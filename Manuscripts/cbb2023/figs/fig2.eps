%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: hbm-examples.pdf
%%Creator: Adobe Acrobat 22.3.0
%%For: josep
%%CreationDate: 1/26/2023, 8:29:28 AM
%%BoundingBox: 0 0 342 144
%%HiResBoundingBox: 0 0 341.2571 143.6970
%%CropBox: 0 0 341.2571 143.6970
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 571 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c006 79.164648, 2021/01/12-15:52:29        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2018-07-16T14:05:39-05:00"
   xmp:CreatorTool="matplotlib 2.2.2, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend 2.2.2"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -143.697 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 143.697 li
341.257 143.697 li
341.257 0 li
cp
clp
gsave
12.6915 132.014 mo
123.146 132.014 li
123.146 21.5594 li
12.6915 21.5594 li
cp
clp
12.6915 132.014 mo
123.571 132.014 li
123.571 21.1339 li
12.6915 21.1339 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 143.697 ]ct
[110.88 0 0 110.88 12.6915 11.683 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 154 
/H 154 
/M[154 0 0 -154 0 154 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 154 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 154 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 154 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 154 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
s)J$Zs)e9arc\EhH$fO<=+5[MJV/T/LPL\CMN3aZOHPioQ^F52S"?7EU84W_W2Zi"Y->7=['dES]=kqo
_Sa@4aNMfRdF-Rrf@\j5hVdAQjlbgjlKdj*n+#u@p%A(Rq>0sbqu6NmrqcZorr2frqt_</q=jXWp%7nI
naGo3lg!]sjlGCYhqZu?f@D#crZ;(]ruh:arZ_=e$md5I,pjrd-n$Mo.P(KM'J;$m0f(UC2)[BP3BB8c
4?btr6q.)F.7m3-:/Oke<EE=-?=@>UC2@g.F*2bTI=[!(Ll71NOcu&sR@KkAU8"OhVl?_tXK;E)riu=+
riuI+*3?3AWMcYiU7e0NS=,_-PECi_LkgS5IsZHbF)h*fr=Al;!Y5eOrXJi:rX\r;!t>\L%K6k9%0@"K
%K-bA%1N^U%1WjWq[O#D%LijW%1<RP$4I:L%LNLJ#m^hC"pY>:"U"u4r<*Q5"9er5#6tG;#71\B#lY/0
$Mk/0$N:>6#RLeBrWWQ3"pP57"9n`,!<iW*"pG8:#R:VAdf>X5s)J$Zs)e9arc\QlH[C-fIXY@KJ:W?*
KnkG>MN3^XOHPcmQC"&/S"6.CTqnK\VQ$VsXfen7['d?Q]=bkn_8F73a2uNKdF-Lpf@\g4hV[;PjQGak
lKdj*nac8Dp%J.UqYL*er;Q]cs8N!2r;6Bfq>'aXp%7hFn*]T/l0.<l$01"&hV?l<f,l+6*rd>^+T<P`
,$Q<<,palb,pjrd-n$Mo.k<2'/hSh30f(UC1c@9P3]]Ad5!M>"6q'U98P2]P:f1.j='8a4?t!P[Ci466
Fa&1\ItEB0MiEd[PEhK)St;[NUo12mX/rM.Z*F;7ppL.0s0M^0)m??EX/W(oUnXNRS=,_/PE1]]LkUG3
I=$6^F8QOH&,m%A%h9'Y%K-e9&,ct?%1WjWrXSo:!Y,\LrXSl9"UkhM%1WjF%LijW$k3[T$OdCO$OdCM
rWrl:#mUY>#R1G:"oJK'"o\Z5#6tG;#71\B#mgqGrX8E.rsSf5%1*:G#mU\>"pY>9"U##-":557"U5/9
"pbM@^]:;5!-/!Zs)e9arc]9+H$amcI"$TrJUrH-KnkJ?NfK0]P*2&qQ^C"+S"6.CTq\?ZVPpPrXfen6
['d?P]=bhm_SaC6aN;ZNcdL@pf\5*8hr*JSjlbmnlg=02o(;VKq>'mar;Q]Xru(h6r;-9cp\+:PnaGo5
lg!`tjlGCYhqQj,rZ;(]ruh:ar?>Mm,UFca,palc-R^Dm.k<2'/hSe20f(UC1c@9P3BB8c4?l+u6q'R8
8P2ZO:f1.k='Jp9?t3b[Ci=<9GBnObJV&Z5MiX!aQ'n/6TVA6]WN3,(Z*CXC[C<WU\b3Q5\IH$W[Bm3E
YHP"-WMcPd&"oG\Q^*bsO,JgLJq8DsGPr$M&,m(=&-!.>%K6k:&,He9%K?q:%06qJrXK;F%LijU%LrpX
%1WjF%L3CO%LidR$jutA#RUkD#mghB"pk24!<`T(";D"C"pY>;#71YB$47.L$k!FO$k<dA%fQk?$O[@N
$OZh=#6tG;#6k>7"oSQ)"U+f/!XK&:XT5s5!-/!Zs)e9arc\?frd-)AIXZftJUrH-KntPBNfK0^P*D2t
Q^F83SXuOKU8=`cW2lu$Yd1UC[OSet]Y2%q_SaC7aihrTdF6Xtg=tE>i8N_XkNM3smI'N8o_/%RqYU0f
ro3qorquZiq=jUUo^_P?mHa'$kN1a_i8!'/rZ;(]ruh:ar?;^s,palb,palc-RgJo.k=7E/M8\00ekIA
2)I3N3&s)a4?Pho6:F@68P2ZN:f1(h<EEC2?t!VYC2Rs2GBnO`JV&T3MiEj_Q'\#4TVSK`X/rD+Z*UjI
\%0'K])KA=^&G\D\fA8i\$`QKZ*170WMcPdTUq[?Q'7>iMhm(=JU;\A%KI";&,m%=&,m%=%K-e9&,ctA
%1WjW%M&=E"qD+P%1WgUrXK#>%LrsH%N,]a%1N^T$O[:L$k!CL#m^eA#R1M<"pG,5r<3*'r<<T8#RC_D
$OdCN$k3+FrXnu?rXo,>":PYG$k!@L$4-tE#6kA;#6"f)"9J`0"o\]+#atbj!;$<N!!7.]F8g:]G5ldd
H2`.QI"$NpJUrH-KnkJ?MN3aYOHPioQ^F/0SXl@GU84W_W2Zi"Y-PC?[C3WX]tV;!_o9[;air)Ydacq#
gD8T$hr3VVkNV:!mdK]:o_%tSqYU3iro!enrqu]kq=jXVo^_J=mHa$#kN([^hV91o*r[8]+TEV_+q5eD
,pjoa-7:/h.4H_sr[e[60/,+:1Gq!G2E3]X4?Yej4$c2$7Ros?8ki&X;,^Ir=^59@@qKIlDfKiDH[UBq
KnkSIOd29$S=ZCJVl?_uYHb@?[C<]X]"G\h^%K/?^&GY`]",A\[Bm-AYH4_$VkTiUR?s2&O,]'QKn=`"
rXSi:rso&>rXJo;rXSo<r!il>%LijW%f6_7%LNXT%1N^U%1NdV%K-bS%1WgV%LidS$jm@M$47(F#m^e@
#7(M;"pOu/('OgE"U529#71YB$471M$OdLT&J5Ziob@E>rXf_P$k*LP$OR1H#R:P<#6k>7"oSQ("U##5
"pY@"!:U$f!Ta=\F8p@]G#ig2H$Oa`I"$NpJ:W9(KnY;<MMdIUOH>]kQC+&.SXl@EU84T^W2Zi"Y->7>
[CEcZ]Y;1t_o9[<bKS5Ye(*(&g>:`FiT0+alKdj+nac>Gp\F^`r7M#]r;6?bp@\"Hn*]N,l0%0hi8=MT
ru_4_ruq=b%4!5G-71#b-7:/h.4QhG/HRRY0`EjK1c.*L3BB2a4?btr6q'U98PDiR:f1.j='8d9@:L]s
C2Rs2Fa&7`JV&Z5NKKEiR@KkAUo12nXKSt<[C<`Y]Y2"n^qdh(ou$gHrkKJf]tM"g\[SuQZ`gI2Vkg&Y
S=,_-OcPEVLOjsS%f?hA%Ls![%LrsH%fR";%fHk:%f?e7%LEUT%1N^U%1WjWr!jDM%L`dV$k!IP$OdCN
$4-tD#mU\@rW`6&rrrB+&I/RI#n%.M$P!XY',)&q()\"_)ugfT()%Aq'+PK\$OdCN#m^hA"pY;8"9nc-
"9eo4"pjf#WW;tuliR.eo`4Uas)\0]rcS9crcq@fH[L9kJ:W9(K8#)9Ll.4RO-#NhQBmo,R[p%BT;&-X
W2Q\rXfen7['dES]=bqq_SsO8bKS5WdaQe"g=tNCiT'%_l0Ia)nac>Fp\F[`rpBaOrtGD0qtg-_p%7hF
mHa'$kN1[\*Zk;&rZD1ar#uRq,pala,pjrd-n$Mo/,h+&/h\n4r\F^72E*QT3rV5h5!MA%77Tj>9MJ8Y
;cHb">?kTHAS,arEHQJNIt<3*Ll7=XQ'\#4&tktsWN35-ZaI9Q]"G_i^VIY%rkn`SqT&TSrkf_m^qd^u
]Y(ea\$`KEXK/=uU7e*JQ'7>iMhlt9rsno:!"Su=!Y,\LrXSl;r=/u?%LijW%fHk5%L3FP%LrpX%Lr=G
$k3[T%L`dT$OdFO$OZh=#6tM?"pP56"o\Z("VM"E"pYG@$4@7M$k<j_',22t)>bBL*W$cV)&<i#'GD&j
$k!FO$4-tE#6kD;"U4i-!sJf3#+bep!WE,`!rW/c!<7->FT6OaGQ)kMH[L3iIXm!#K7el5LPgtLO-#Hd
Pa7Z'R[]k>T:r!TV5UAoX0/\4['d?Q]=bhm_8=44aNMfRdF6Xsg(W5ri8N_WkNM3umdK`=p%J4Xqu5+F
&cV\(q=aLRo'bu3l0.<ji>s'>+9*J`+oNSp,U=Z^-7'rb-7:2i.OltJ/IjBd0JP@>2)I3M3&s#^4?Pel
5t".27nH<I:/Fed<)m.-?=@>UC2Rs0GBnOdJq\u<NKKKmR@^(GUoCDrZ*UjK\[oGe^VI_'_o9Uba8X$u
_ns4(^V.:k\[SoOZ)k"*UnXNRR?`tsNJiLB%M&CIrso#=!Y,YKrXJo=rX\u<!t>\L%K6k9%06qJrXK8E
%LijW%1WgV%LrCI&e,<Z%1WdU$Od@N$OR4I#RL_ArWWE-"pOu/$3^P9"pY>;#m^kGrX8u@&JGio)&`Dm
rZ1\SruM%W#8n9k'GD&g%/pV>$4$qC"pY>9qud')"U:S!rW2cqp]LNuq#^Kqli@',rcD1aG'A.UH$amc
I"$TrJV/T/LPL\CNfK0^P*2,tQ^XD5StD^MUnsrfX/iA,ZEpsI\@]De^;7_+a2lBIcdC1lf@\m8hr3YX
kNV="n+#uAp\F[`rr:FH&H;V)q=jUUo'u/6lKREk*Zk;&ruh=br?=$C,UFca,pjrd-n$Mo.k<2'/hSh4
0f([E2E*TT3]oPh5=%V)7Rp$B9MSD];,gV">[Ce`AS,[nEH?8LI=Hj(Ll7=XQ'n/6U8OukYHbFC\[fAd
^VI_(_u@^UaT'BVbPoW`aSs4!`P]R0^V.=n\[SuOYH4_$UnXHNQ]mPmLkcHMr"&f;rt#,>rser;rX\r;
!t>_M%K6k:%0@"K%K?q:%0d4M%LimX%K$\O$k3XS$OdFN$O[:K#mgkD"pYD<"p>,.";M(D#6kD>#mq%J
$k*^]'G_Q*)]]q@rZM4bpEBM[(*F_A*??(<)&X,%'+kW\$jm:H#6kA;rWW6'!!`,sXT8>$qZ6a"rWMcq
!X&W.qZ?]srrDQhs)\0]!d8a2rcnKjrd7=eJ:N3'K8#)9Ll.4QOH>WiQC!u-S"6.CTq\B[VQ$VsXg#+;
[C3TW]tV;!_o9^=bK\G_e(31*gu%&MjQGallgF<6o_81Xqu5s^jSobir;-6`p@RqEmHa'#jW5KB*s*Q-
+oNVa,X`q*-7'uc-R^Al.P!#$/M8\10f(UC1c@9P3BTDe5!M>"77Kd=8k_uW;,^Ir=^GKEASQ%!EHQJP
It<</MiEj_Q^jWYTVnciXKf+>\[oGe^VI_(`W!m\aN;QIbPo`_c2Gj0bKJ#LaN)??`P]L,^V.4h\$N?C
X/W"mTUqR:PECcZ%M&CI!"Su=!"Su;rXSo<r=/f:r!rZ7!=fS<%LNXT%1N^T%LimX%K$\9%1*IR%1<RO
$OdCMr<WZ5"pbD:"pOu/rWO,C"pYG?$4@7N%M9?g()\&1*?Q@G+sJ0Rr[%Fhr?VXk+X/*Q+!:J$$PjKl
'+PEY$OR1H#Q=o-"oSQ)"U*ic_#XH8quQp%!sJQ+oEY<u!X&T-quZm!mf3E1F*%P,G'8(RrcoZ6I!gBl
J:N3'K8#):Ll.4ROHPckQC!u-S"61DTq\B\W;`hGXg#+<[^`l\]tV;"`Q$!@bg4\ce^rI.hV[;Qjlksp
mI0W<p%eI]r7M&BrtG;+q=jRSna>f1kiX!.+!2UJ+X-e.<[8q:,pjrb-71)g.4H_s/M/S-0/,+:1Gq!J
2`Nf[4Zkqp5se"07nQHL:f1(g='8a6?t3e`DJsT=H$t0oLPUqNPEhQ-TVAEdXKSt<\%95c^r!t+rl5#[
"Ned/bfp(2ps/oarlcG,aiVWEa2Ps5^q[Op]!o)RXK/=uU7e$CQ'72c%M&FJrso#=!Y,YKr=8f;r=/l<
%LrCIr=&c;%K6hE%1WgU%LrpW%LrsI%M]E]%1NdT$k!CM$OR4I#RC_B#7(M<qZIc?"pYA>#RLkI$P!a^
()[u/*??4E+sJ0V-2o:e.fUmq,o@dL+s7sJ)]KY1'G1oe$OdCK#mUY>"pG20"98VP!7_)L!W)p!!sJT,
r!3!'r!33)!<`N&!r`5j!#9QrFED\LGB\=XH[C-fIXls"K7el36ALAQNfK0^P*2&rQ^F83SY)UMU8=`c
X/iA*ZEppH\@K8d^qmq-a2uNKdF-Lpf\5-<i8`q^l0@[(nauMJqYU3ibl7nHqtg-^p$rO[md99&*ZcCF
+<VgNr?>Vp,UFca,pjrd-R^Dm.k<2'/hSe30f([E1cIBS3BTGe5=%V(7Ros@9MJ>\;cHh$>[UuMC2@d-
Fa&1^JVAo<O-,]oS=lUPX/rM0[C<]Z]t_G%`Pom=aNMcNc-=PZp!<]a+jS?Wbfe2OaN)??_ns4(]tCnb
[BZg6WMH8[R?s2"N=HHs&-!.>&-!.>%K6k:&,Hb9%K6k7%1E^V%1WjW$k<aV%LimG%LW^S%1WdS$k*LP
$OZh="pY><"pG,5rWE]7"U529#m^hE$k!IU',1EarYl.c+<VgN,pt&i.f:gs0)R4?.Olen,p=EU+<M[E
)]9D*'+kW\$jm7H#6kD:"9nc-]`@9srW2s!"9Sc0"U4l1rsAT1rsel5rsAZ0rWN?+!sAK'rW2Qi!-A-]
!-\?c+F/6ZH[L3iJ:N3'K8##8Ll.4RO-5ZjQC!u-S"6.CTqX-7VPpJpXfen7['dES]=l"r_SsR:bKS;\
e(3.)gtq#MjQPjnmI0T;p@nC\rlG*Hr;6<ap%%Y@lfoPj*rmG_+oNVb,[)K@-7'uc-RU>l.P!)&/hSe2
0f(UC1c@9P3BB;c5!_M'77Tj>9MJ8Z;cHb">[CiKAo)@)F*DtZJq\u>O-,]qS=l[UWNWS5[CNl^^r"".
a2c9CbKS5VcMl2idJ2/idJ_DqcHXVXbK9b("i\?o^V%,e\[AcIXJr+lSt).2OUh=#rXSr=rso&<rXSo<
r=/u?%LijW%fHh;%LrCI#Rq7Q$k<^U%Lr=G$OmRT%L`dT$jmCN$N:>9#R:P="pG5/"98W)"r@LN$4@7N
%MKTq)]Ke>+<hsT-RpSr/h[,Vr\=:)s"F@((Fps_-RBo[+!2LB)&<nu%L`aR#m^b?#Q=o,"KDJ#!!!&t
!X]#4"U,,9#mgqJ%K6n5&cWC@%06eBrWiH,rr`3$rrM]k"ES[,G'<k/9mM#2H[L9kJ:N3'K8#):Ll.4R
O-5ZjQC!u-S"6.EU8"H\W2Zi"Y->7>[CEi]^;.S%`lH0Ec-Okhf%Aa6hr3YXl0@U%nacAIq>1*Cs7$$u
rquWgp@RqEmHYf8+!;^*+oNTd,UF``-7'uc-R^Dm.P!)&/hSe20f(UC1c@<R3BB;c5!_M'77Tj>9MSD]
;cHb$>[CoOAo;O,Fa8CbJqo/COcu'#St`-^X0K"=\%KDh_Sa@5a2lBH#gCQ=d*U1fdaJ'Brm^nqs3gqp
rm2S/c-4AQaN)?=_SEjt]!o)PYH+XuTUqR:P7IO%rXK&A%h9'Yr=8f;r=/u?%LijW%fHhG%LimX%1WjW
$k<^U%Lr:F&e#3Z$k3RQ$4@4K#m^hD#R:V>!!`?(*<cTO"pYGA$OdCT',2<')]p.E+seN_.P!,)0/53Z
1]B601EA2)0/"q..k2nm+X/$N*?,k3'+k]^$jm:I#6kA9rWL[Mec>[MrW30(!sAf,#6kJA%1`s]&c<@B
(&\gU&J5Na%13FK#6tD9"9\T(rrM`l"ES[,G'<k/!."Qj#(1lKJ:W9(6%t#JLkpqKO-#NhPa7](R[p"@
Tq\?ZW2Q\rXfen8[C3WX]Y;5!_oBd>bg4\cf%8R0hVdGTkNV="mdg#Cq>1!-rrE$,qtg'[o^VA8*ZlIH
+T<P_+ql4J,pjoa-7:/h.4H_s/M/S.0/3A]"Z/%o3&s&!4?u(r6:=748P2]P:f11l='K!=@qKInEH?8L
I=[*-MiX'eQ_'kEWN3,,[C<][^VIb+a2lBEbK\>Xd*U1gdaQ\EeG@_pe0*5hdaHOid*Bn[bK7iG`P]R-
]tCnbZa$U4VkTiSQ]hpX&,m%=&,m%=%K6k:&,Zn?%1WgW%f?e7%LERS%1NdW%1NdVr=0SP%L`dT%1<ON
$O[:K#mgkD"pY>9"pOu/%0Zn>#6tP@$OdCO',22n)]Ke?+sJ0X.Om&'0/51;1]B6-2uYWU1G^a?0.nb)
-RBo[+<MOA)&*_r$k!FM#RL\?"pG/5^]<U!rrN'"!!N9)#mUbC%1Ng[&JPrY(&AdH'b(ik&J5N_$4-qB
"U,#2rW<'"o`4u5,'J-RGBnI\H[L3iIXm!#K8##7Ll.(NO-#NhQBmo,S"6.C/u#)9V5UAoXfen6['dEU
]Y2+t_o9[<bK\G_f%8R/hVdASkNM7!n+$)Ep\Xmf`;^)Aqtg'[o^D5I+9*J`+oNSo,U=Z^-7'rb-RU;k
.OtEL9eJ(Q0JbLB1c@9Q3BB8b5!MA%77Kd=9MSD];cQn%>[UuOC2@m2Fa8CdJr#>EPEhQ+U84]gYHbRI
]"Ghq_oKg=bKS5Vd*U1ge'lhFeb@YmeH==MdaJ-A"jP97aiML5`PTF*]XkS[Z)k"(U7dp@r"&f;rt#,>
rser;rX\r;r=/c:r=&c;%K$\A%1NdV%LrpX%K-bN$k3[U$OdFO$k!CK#m^hC#6kA8"oSQC"U>59#RLhG
$k<jb)&jS<+<`$Y.P!,)0f(UBrAO^:pc872*&KH+0eP(/-RBo[+<;C=().>j$Od@J#mLV="9kn-r;Zfu
r;mN4"9f#8#mq+P&JPoo(`4/0pDs8PrYQ"X'G1od%13=F"U,&-!ri;p!<70?Fp</7H$Oa`I/\RDJ:W9(
KnkG>MN3aYOHbuqQ^F52SXuIJUnsreWN3/(Yd:aG\@]De_87,.`Q60EcdC4mf\5*;i8`q_l0[p-o(DbQ
r;OS5#lOSop@[tE+!:J)ruq=b!$qOi#pprE-7:2i.4QkI/cRIr0JP@>2)I3M3BB8c4?btr6q'U;8k_uV
;,gOs=^GKEAnl4'Fa&+\JVAo>O-Q'"St`-^YHbFE]"G_n_o9[;air#Td*U1ge'unHeah;jeJm#fe'ZRi
cHXSWaiMN?_SEjt\[SoKXJ_kgS=0?e#S.FU%M''[%Lr@HrX\r;":YhM%1`:F!=fS;%L3FP$k<^V%Lr:F
$4I@P%1<RO$Od@LrWr]4#RCV<r<+)D"9f#7#71_F$k<j_)&jM:+<i*Z.P!,)0f(XCr\sa8rB'm:r\jp9
1c$d$0.n_%,pa`X*?,k3'+kW\$OI(C"pY;7WW<&"rW3E/"9f#8#mq+P&JY6[rYbbWr?2%`r?)Ig*?#h5
'bqDn%h/jE#6=u2r<!!"pAk58rcUbTGBnI\H[L9kJ:W9(KnY;;Ll.4ROH>]kQC!u-S"?4DU84W_WN3)&
Yd1UC[^`u`^;7\*`lQ?IdF-Lqf\>3>iT'+blKnfEnauPNqYn>2#labtp\+1J+!:J)ruq=b%4!5G-7'rb
-RU;j.4QkI/JKik0JP@>2)[?O3BB8c5!M>$77Kd+8P2ZQ;,L:m=^,3@@qogtF*2bTJV&T6NKKKoS=l[W
X0K"=]"G_k_o9[;aihrSd*U1ge'upuqUYMpqptbs):[-`dEp1ac-+5M`P]R-]XkY[Z*1.)Un4+S%gELR
%hB-[%K6k:&,ctA%LimW%M&CG!=fS;%L<LQ$k3[U%1WjG%M&sW%1E[S$OR:M$4."E#mgM7rrr?()[-EM
#71_F$k<j_'H7u3+<hsV.P!,)0f(XF2uPc948M)=48q8>2\\))0eY%,.OQA`+<)7;'G1f`$OR1C#6kA9
"fhY&!WE-3"9er6#mq+P&JPrs)BBh@+T<V^-2o,#+<;I@(`3u%&J#3T#mUV;"TAK&!VZToFT-FbGB\?3
HU`C3IXm!#K8##7Ll.(MO-#NhQBml+S"$"ATqnK\VQ$VsY->4=[^`l\^;.V'`lH3Fc-k(kf\5-;iT'%`
lKdp/o_&%Vr:L$4rs&Arp[n"u+9!D_+oNTE,UF``,palc-R^Dn.P!)&/h\n40f([E2E*TV3]oPh5=%\+
7Rp'E9i+\c<EEC0?t3baDJsZAHQdfhKnt_NPF7r6U8b2sZaI?V^VI_*a2lHJc-XhbdaZdsr7:o"s4I/#
rn.8&rRMk:e^W'qdEp7bbfRoG`PB7%]XP;TXJr+jT)9*#%Ls$K%KHt;%fR";%L!:N%LimXr=&l>%1NdW
r=&r>%1WgV%LrCI#7V(N%LidR%/pV?#mgkD#6kD;"oJK@"U52:#mgtJ$kX0h)&jY?+XJKd/h\q91cPCo
s#^6Cs#p0Ar]M>c4?GVb3B&lR1G:C6.jlVe*uu:9'GD&d$k!=G"pP8&!4i11!WE-7!sAc4#7:nN&JZ#t
*??7I,:+Wb.JYLn.2!pQ,9n<O)Aj2'%hB*V#6tD7!ri?$!Vl`qFT-GWGBnI\H[L3iIXm!#K8##7Ll.(M
O-#NhQC!r,S"6.CTqnN^W2lu$Yd1UB[^`l]^;.Y*`lH9Hc-k(lg=tE?iT0+blL"-4o_/.Yr8I\4rs&Dt
q=XA%+9!A_+oNTY,U=Z^-7'rb-RU;k.Olr#/M8\10ekIA1c@9P3]oPf5=%V)7Ros@9MJA];cd++>[_,R
Ci46:H$b$mLPV"RQ(4G=UoUT#[C<`\^C.ora2lBHc-F\`daS3Grmh)$rn-krs4IA'rmhq:e^W$qdEp1_
bK.`E_SEq"\[SoKX/Vhdr!ruA%hB-[%1W:HrX\r;"UtnN%1WmH%06qJrXSo:"q1tO%1WjWr=8f9#7_+M
$OdFO$iUG9#7(M>"pY#/(BjsH"pkPA$k!OY'H%i1+<i*Z.P<A/1]B<83B9/`r]U9FpcesH5!;%k4?FHA
3B&lR0ek=6.O?5\*uu47'GCl_$OI+E#6q70rrN*##m:D:#71hM&JQ&c(`FM>,:3=<s"!jt'It[_.4$8b
+<;@;'bM#g%1*7C"9\W)rrMoq89ArsG'A.UH$amcI"$NpJUrH-LPL\CNfK3_P*D9!R$sM8StD^PV5C2l
X0&V3Za@0O]=kqo_o9X:bK\A^e^iI/hV[ASkNW?=mIBiApA4^d^AeQ<qtg$Y+!2UJ+X-e.,:"N\,pjoa
-7:2i.4Qhu/M/S.0JP@>2)I3M3''/b4?l+u75dV*7nQKN;,L7n=^,3@AS,guEHc\VIt`Z9Ocu'#TVA6_
YHbRI]"c%u`Q-'Cc-F\`daQ^rec+,#f@]QF!nc/Wrmhn9e^MspdE^"\aiMN?_SEjr\$`E@X/)Ee&-!.>
&-!.>%K6k:%fd+=%KHt9%fHh;%LrCIrXB&?%LrpX%LrCI'b(W^%1WaS$OR:M$4-tE#7(P?"U5/0"<I^N
#6kJ@$4@7P'G_W,+!;^S.P!/,1Gh$L3BK;b4oRYF5PRM^5<h=q4Ztnh3B9#W1GLU;.OQMd+<MO?()$o_
$Od=I#mLU8!!!'!!Y>G:"U>>@%hTKj)B'V@,:+f</,q9u1DVc"0.SP%.4$2]*?#b/&J5N[#6tD8"9&?%
!Vl^lFED\LGB\=XH[C-fIXls"K7el5LPUhJNf]?cPa7Z'R[]k?TqS9YVPpPrXg#+;[(*ZY]thJ%`lH0E
c-OkhfA#*;i8j"_lL"$1o_/%Vr:^03rsJc'qY'S(+!;[L+oNTC,U=Z_-7'uc-R^Al.P!#$/M8\10f(UC
1cIBR3]oPf5=%V)7RosB9hnPa<**:/?=RPYDJsS>H$asjLPUkNQ'\)8Uo1;tZa[NY^r""0aN;WNd*U4i
eCFQL!nZ&Vqq:buqq2#&fDa>:e^W'rdEp1`bK7fD_na%"\[SiIX/)Kg&-!.>&-!.>%K6k:&,ct<%K$_7
%0[4N%LrpW#Rq4O%LrpX%LrCI$k3[U%L`^Q$jm@M$46\;#mLV="p>)4"9eu."qq7K$O[FV()\&3+<hsY
.kWP41cPCo"$A\/55me=5p&<U5!D+l4#o;[1c$j>.k2ni+s.aC().>h$OR1H"pai%\,ZL0r;mN5"U,2>
%1s9h(`aV>,paujr\+:-pbi^?1G:C3.k)bh+<;@8'G1i_#m1D9"U"`*rrMrr:NU]%G'A.UH$amcI"$Tr
JV/T/LPL\CNfT9bP*VH$R%'S9T:r!UVPpJpXfet9['dES]Y;1t`Q$!@bg4\ef%Aa6hr3\[kj.[*o_/%T
r8Rb1rsA]&q=YmP+<VgNr?=fY,UFca,pjrd-n$Mo.kN>*/hf"71Gq$H2`Nf[4Zkno6:=:57nHBK:f1.j
=^,3?@qKIoEHQPTItEK7NK]]sTVSKbYHtXJ]FDWm`Q-$Bbg"M^daZgtrmh,%f_sLmgAT\Bf[n^*e^`0u
dEp7abK7fD_ns+"\[/QEWMKJ'rso&>rso&<rXSo<r=/l<%LrCIq[EoC%LimW$k<^U%LimG%L*@N%1WdT
$P<^R$OR4H#mgkB#R1D8"9\l2rWX8G#n%.O&JQ*%*?QFN-S$i)1cI?R3BK>d5!Sp1pd4jD)a6GK4?GP^
2`*<D/h84k+s.aC)&!Sj$OR1F#3,^-!<3*!!YtkA#6tSH&JZ-$*?ZRQ.4[&-1H%-P3qtiR3]]/W1G^O3
.4$2])Aj2'%h/jN"U,#-!ri;u!!77aG"d('GBnI\H[L3iJ:N3'K8#):Ll.4ROHPcmQ^=)/SXlCHU8=`c
WN3/(ZEppG\\#Mg_8=13aN;]Qdact%gtpuJjlksrmd]uDq>1*:s6Takr;$(/+!;[L+oNTa,U=Z_-7'uc
-R^Dm.P!)&/hSh40f([D1cIBS4?Yej5sdt/7n6-F:/Fee<EWR5?tEqdDf^&JI=[!+NK9?kS>)gYX0K"?
]Y2(t`Q-'Cc-F\`df.c"f%/I*g&Kb&gA0M"gA]bBf@SU)e^`0tdEp.^bK%ZB_S<ap[Bm'9Vu7/+%f[(>
%f[";%fR";%K[(L%K6k8%K6hD%1WgU%LijW%1W:H'+GE[%1E[S$jm@M$4-tD#mLV=#5nZ+"U,,D"pYGA
$O[O['H7u5+<`*^/h\sY2[)3'4?Ykmr'C?Lq*Y-JrBVAe5<_1l4#o5Y1bgX9-RBoX*?,k1&Io3W#mU[]
!8mkV!>tq?!sAc4#n7CW(`F;5,:+ch0/GLE3]]Deq*G!C'KS952D6^6,pacV)Aj2$%h/aK"U"`*rrMus
"E\a/G'Eq2!.4]m$%@DTJV/T1LPUaGNfK0^P*D9!R$aA6StD^NV5C2jX0&P1Za@0O]=bqq_T'X;bK\G_
f%8X2hr*PXkiqL'nb)YPqn)k7s8W)ppE(J"+<g\-rZkSl-71#c-7C8k.4Zo#/M8\10f(UC1c@9P3BTGe
5!_M'7Ros@9hnM`<)m.-?=@D[CiON?H[gU#MiEd_R@L"LWN<G6\%KJk`Q-$@bg"M^daQasf%/I*rn75'
o\9>urn/.@f@SU)e^`-rd*Bn[aN)9;^V.4fZa$R/r=8l<rXSu=rXJi:rX\l9!Y#VLq[NN7#n7@R$k<^U
%LimH%MT?^$k<[T$Od@N$OR1H#R:P>"pG2/";D"E"pYDA$k!X]()n89+seTe0/56f2`E`W4?YkmrB^HM
oKrUFr';2b4Zkhe3B&lQ0.n_%,p49K)\`qq$O[:J#/($.!<3*!!Yke@#6tSH&JQ'#*?ZXW.k`\:3]]De
r^$BKr]qDb3]]/T1G:1',p43H(_dJi#mU\<!s/N)!W)j"FED\LGQ)k1H[L3iIXls"K8#)9Lkq(OO-#Nh
QC!u-S"6.EU8"K]W$SFDXff";[C3WY]thJ%`lQ9FcdC4mf\53?iT'+clL+35pA+R_\Gld1q&^\$+<g\-
"=,6=,plG8,pjuf-n-Sq.kN>*0/,+:1Gq!I3&ru]4Zkno6:==68P2]R;,^Fq>@(]GAnl4'Fa&7bJq],D
OdDT0UoCDu[C<`\^r".4aihrUd*gCnrmh)$rn78(qqM#'qV2#'rn.;(rmh8'eC2jmc4%t>aN)98^V.1c
Z`L/)%fd+=%g!4M%K-e:&,Hb;%1WmH%1NdV%LrpX%LigV%1NdVr=02E$k3[T$O[:L$jm@@$3(81#6+l,
"TAQC"pYG@$k!OY()\,7+sA<a/ho.@3B9/`5!D415la7N6iKLR6iBCO7/]IQ6N07f5<_4l3B9#T1GLC0
-R'ZT)\s,$$k*LL#Hn+-!WE-#!u1tC#7:nP'Gqi5,:+ij0/b^L4[DA%r^coZr^[tr6pX+%3]8cI.k)\c
*?#Y,&IJgL"U"o/!W`?"!!ICeG'A00Gt*..I"$TrJV/T/LPL\CNfK0^P*D9!R$sM8StVmSVP^;kXfen7
['d?S]Y2+t_oKj?bKnVcf@\j8i8Nb\l0Ig.o_81Yr6bQ.rs&As+!;[L+oNTb,U=Z_-7'uc-R^Al.P!#$
/M8\10f(UC1c@<R3^#Vg5!hY+7n6-C:/Fed<EEF3?t!Y`DKBrGIt<3,NK99kS=ldZXKT%B]"c%ua2lBH
cHstfeCFQL!S?$)g&B_'g\fh,g\oq)g]#q+f`9Y'ee-H^da6@cbK7fF_SEjq\$N0:rX]#=rXT&?%1W:H
rX\r;"UtqO%1WmH%1E^U%LrpX%1EXT%1WjE%M&sW%LidS$4@7L#mgkD#RLD6r<+&C"pP;<#n.4P'G_W.
+<i*].k`\82`Wl[4?c"/5la7N6iTRP6NBOQ6iTRQ6NBIP5o2aL4?GP`2`*6A.jlJa*uu47'+>6V#RSr[
h#IEUrW3l="U>>@%ho`q*?ZRQ.k`\:3^#bs6qBlH9)qfe9,L2j6ps=,4ZYJW0.S=n+<;:6&If'P"U,#-
!WW9!!!ICeG'A00Gm\nGI"$TrJV/T/LHC9IMN3aYP*2&qQ^F52SXuOLUo()iX0&P/Za@-K]=bhn_SaF8
air)Ze(<=.hr*PUkj%L&o(;\Qqu4>0qu6luqB$h&+X-e.>9kI?-71#c-7:2i.4Qi"/M8Y/0JP@>2)I3N
3BB;c5!MA%77Tj>8kr2[<)m")?=78TCi4<<H%1C!LQ.F[R@^(LX/rS8\\,\o_oKjAbg=_aeCE+#f%8R-
g&B_'g]-()g]$",g]#q+fbN/kf%/C$e'ZOfbK7iG_na$u\$`E?rX]#=rXT&?%1W:HrX\r;"UtqN%1WmH
%1E^U%LrpX%1E^U%LrsF%MB0Z$k3RQ$4@4K#mgkB#RCV<#5nZ;"U5/;#RUqJ&JQ*%+!;^Q.kWI[1cI?R
4$5Yjr]pNNr^6]Rs$QTMr^.bq6pj=.6:!n%5!;"i3B&cN0.SLq+s7mF().5d$jd6U!:^%0!<E6'!sAc4
$4RL\(`FMA,q1K'2EEue6psR:92#(Wr_""t845a,4ZYAP.k)bh+;bh-%giUH"U+f+!!2ut-$4<RGB\=X
H[C-fIXls"K7el5LkpqKO,oHePa@`(R[p%ATq\>1VPpJpXfen7['mKV]Y;5!`Q-*DbgFkhf\5-<iT'%a
lL"-4p%eL_\,Q[3q]?q'+X-e.s!1\m-71#c-7:2j.4Qi"/M8Y/0ekI?1c@6O3BB;c5!MA%77Tj?9MSD]
<)m(+?t!P[Ci=H?H[gX$Ll[[`S=ZISXKSt>]"Ghr`Q60Fc-Xkde^`7%f@\d0rn@A+s4mY/rS7G-rS7G-
s4mS-rn7S0g"=p-e^Y2[da6@bbK7fD_SEgp\$<%6&-!.>&-!.>%K6k:&,ctA%1WgV%M&FHr=0)B%LigV
%1WjWq[O2H%1E[S$k!IO$4-tE#6kG<"oSQB"U,,9#RLkH%M9Hq)^$=N-S@&,2`E`Y4?Yn-5mTeE6UX:/
6psE;6O6(J6UO706UO3>5nuRH4?GJ\1bgU5,p=HS)]9D'$k!CJYQ+_*!Wj5@"9f#8%1a$f)BC%K.4[24
3^#bs84uTP;#OAn=oD;;:f'eX84Z$44Z52S.k)bh)Aj2$%13=D"U"`*!!3#u3-9=eGB\=XH[C-fIXls"
K7el5LkpqKO,oHgPa@c)R[p%BTq\?[W2Zi"Y->7?[^`r_^;7_+a2o%=bgFnif\5-=iT0+blg=67p%eL_
\,Q[3r#[%(+X-e.'I4qM-71#c-7:2j.4Qi"/M8\00f)3R1Gh!K3&s#_4?btr6q'U;8k_uW;,gV">[UuM
C2Rs4GC+mmLPV"TQ(4MAWN<;0\[oJk_oKjAbg+S_e(*""f@\d0rn@A+s4mY/rnRA)rnIS0gt_k_(u!]s
g"=p-f%&=!dEp.^aiMH=^q@7fZ*4-;rso&>rso&<rXSo<r=/r>%LijWr!iT7#Rq7Q$k<^V%Lr:F%1NaT
$OdFO$k!CK#RLb7#5nZC"U52:#RLkI%MK^!*?ZLO.P<A12`E`Z4[)+062X+M7.`hK6pj=0r^-ZO(I:>N
4Zked2`EHE/ghqh+<)78&Io0U$*XC0!WE-4"9f#:%1a-i)B^=T.k`eA3^Nd6s%EAgr`&_sr_s\191qfD
5s[Oi1Fjn#,97[>&J#<U#6b80!WW9"!)%EWG'A.UH$amcI"$TrJV/T/LPUbDNfT6aPa%N%R$sS;T:r!T
VPpJpXfen8[C3TW]tV>#`Q60Ec-b"jf\>3>j5f=elgF?9pA+gerjVn3rqmi\+<_p,+ql4I,pjrb-71)g
.4H_s/M/S.0/<G^&2Z:(3&s#_4?btr6q'U;8k^s7;,L:o=^GKEASQ+$Fa8=bKnkJHPF%l6UoUT%Zam`^
_SsR;bK\>[daQatf%8R-g&B_)gB?<dgYCT`g\oq+gB?<dgYCT`g]#nAg"G$0f%&="dEp.^bK.Z?^q@7h
Z*4-;rso&>rso&<rXSo<r=/f:!tGbL%f?e7%L<LR%1E^U%LrsF%M9-Z$k!IN$OdCM#m^hC"pP58rWFJM
"U5/;#RUqJ&JH$$*?lXS.PEM42`Wl\4[)(r5sdq+6pj@1r'UELr'LZV6pj=06UUi=&3i?A4?5>Z1G:@.
,p=BM)\rPg%L`[NYlOe)rW3o?"U>>E&JQ-(+=/He0/bjS5t"7::f(+jr`T2)rE0,"(Jmq$91VH:3]]/P
.k)bb)Aj/!%0m+A"TAH&!W<!'FEVhOGBnI\rd7%]J:N3'K8#):Ll.4ROHPimQ^F//SXuIIU84ZbWN3/(
ZF%$J\@fMh_Sa@6air#Xe(31+gu.5RkN_C$o(;YPr;Q3ca8Z>@+!;[L+oW\b,S;=L-7'uc-R^Dm.P!)&
/h\k4r\GcU2E*TU3^#Sh5=.b-7nH<H:f1(i='8j;@qBIoEHQPRJVAjuMij3iStMm[YHbLH]YDA'a2uQM
cI((ie^i=(rn7;)r7h8,s4dA)rn@P1gY:N_g]#nAg"G$0f%/C#da6:`bK7fB_S*OkZ`j?=":bnP%hARJ
rXSo<r=/r>%LimXr!iT7"UtqN$k<aH%f[":%KHq:%0?nG$N:G3#q#u_"pG27"9\l3"pPA?$4ICV'H7u3
+seTd0/5:B3B95d5=%S%6::]>rBpBIrBhVo6pj@06UF()5<_4m3B9#S0eOq%+X.pG)&!Jg$OQD)^B"97
rW3r@#6tPG&JZ3)+=Sfo1HIZ^6qBjF:fLCs=nu>%=V=\1:eO>I6p3Rh0.SIt+<;:5&HiOL#6b;1!WW9"
!!dUhG'A.UH$fO<6%4?7JV/T/LPUbDNfT9bPa7Z'R[Te=T;&-XVPpJpY->4=[C3TX]tVA$`Q60Fc-k(l
g=tKCj5oIhmI'Q<pA=dCs4[JVrZ<7*+X-h/rZi(%-71#c-7:2j.4Qi"/M8\11&`se1c@9Q3]oPf5!MG(
7Rp$B9MeS`<EE=0?t3baDK0lGI=d0/Mij9kSt`$^YHtXJ]t_J*a32[0cHt"geGe##f\+sWgA]h0gtUW>
g]$")g]#t2gYCT=h#?(.gA]b<f[eX(eC)aic-4;M`PT=$\[/R?%g3@P%hB0L%K6k:&,ct@%1WgW%fHk6
%L<LQ$k<^V%1WjG%KHq:%0?nG$N:G4#pKT[#6k>7"U"r3"U>5;#n%.O',2B++!Dp[.krh:3B9/a55mhO
6:4./6U^o@oKrOE!CT9n6pj=.5s[_!4ZbY_1bgX5-RBrW)]9;$$k!EI!##A6!WiH-#71_L'GVW2,:P-!
2ED+,5tFO>:fLCsr`o;/r`g7B<)c[e845a,3\rE>.3fiO'bLr_#6tG3!ri<#!!dUhG'A.UH$fO<4aqp3
JV/Z1LPUbDNfT9bPa7Z'R[Te=T;&-XW2ZhuY->4=[C3WY]tVA$`lQ?Ic-k.ng=tKCj5oIhmI'TKp%S@]
[JpF0+!;[L+oW\b,S;=L-7'ud-R^Dm.P!)&/h\n5r\G!?2E*WW4?Pel5t".27kI;)9i+\a<EEC2@:Nkb
DfKuHI=d0/Mij9kTVA?cYHtXJ]t_J*a32`Qd*gCnrmq)%s4[J,#Me(hgtUT=h"]V.gt^Z=gtUW`g]-",
fb2rgf%&:!dEp.^aiDB<^V%.cZ2P7:%Ls![%fQq:%f[(=%L*CQ%1WgW%fHk6%L<LQ%LimW%1WjH%KR"I
rXCXk$OR:M$OI(F#7(P="U"u3"9eu7"pbMC$k<pb)]^"D-RpW$1H.<S4$Gkp5sdq+6pjB@6hE_E6PMpU
6psC/5s[_!4ZbY_1c$d8-RBrA*uc.5&Io3VYlGgG!<N<)"U>>@&JQ'&+<rBi1H%B^5tFXF<)d"'>[7)6
+(AJ[=]n^#91VT>4ZYAP.k)\c)ANqs$3pe>!s/N)!WE'mFEVhOGBnI\I!gBlJ:N3'KnY;<Ll.4ROHPio
Q^F52SXuIJUnt#hX/iD-ZF%$J\\,Vk_SaC7bKS5Ze^iI0hVmMVkj.X)o_%tUr:9m+rrrBD+<VgNrZX<I
,UF``-7'ud-R^Dm.P!)&/h\n51G^mF2E*WW4?Pel5t".27nH<I:f1.k='K!>@qBIpEHcbX*J0!$NK]Wq
TVA?cYHt^N]thV-aNMiRd*gFof%/IPg&Ke*gBQHfgtUT=h#?(+h#?%0gtUT^h#H..g&fs\f`'G3eC2jm
cHOJP`P]I']!\gB%gELR%hB-Z%K-e:&,Zn?%1WgW%fHh;%Lr@Hrs]/B%1WgV%LrCI&e,6Y%LidR$4I:M
#m^hB"pY>9que,H#6kG?$O[O[()n8:+X\`l0f1gL4$5\k5s[h)6UX:0r^69Dqa25h6UF+*5sILo3B8oP
0e4_"+WhXB'G1f`$MFJ5!<3*!!Z;+E#71hO'c7r9,qCW)2Ea>o84ucY=]o!7raPe9raHFD=]n^'91qfA
4Zt\Z0.A+g$lp&s&IJgL"Tnf-!<N0"9QYH$GB\=XH[L3iIXls"K8##7Ll.(MO-#NhQC!u-S"6.CU84Wa
WN3)&Yd1XD\@K8c^r"(1aihoSdacq&gtq#Njll$tn+?>Jqu5LQf)Gjp+<VgNrZXu\,UF``-7'ud-R^Dn
.P!)&/h\n51G^mF2E*WW4?Pel5t".27nHBK:f1.k=^,9B@qKOqEHcbXJqo/APEhQ/Uo1<!Za[T\^r=>&
aNVoUd*pLpf%/I+g&B\,gY:N^g]-(.g\T_)gBHBegYCQ=rnIJ,rn.n8f%/C#da6:`bK%Z@^V.4dZi1I>
%Ls![%LimG%f[(<%L!:N%LimXr=&c;%K-bB%1NdV%LijW%K6hC%1E[U%1EUP$jd:K#m^hB"pY>:qum!'
(^LHV$P=$f)]^%I-S$f*1cIEV4?btq5skQ<s$ZlSnO!4B)am%]6UO1+5sIOq3B9#S0e4_"+Wh^D'GCrb
$f_66!<3*!!Z2%F#7:nS'c8&<,qCW,3^#bs92JGf=^552@esX7@N8WU=]A3j845a,2D[!:,p43F'G1ZY
#6b22!W`?$!!77cG"Hn%H$OaaI"$NpJ:W?,KnkJAMN3aZP*D9!R$sM8StDaQV5UAoX0/\4['dES]Y2+t
`Q$$Cbg4bgf%Sp9iT0+alg=05p@nI`bl?r-"<Sa/+X-h/=sP@>,pjrb-7:/h.4Qet/M/S.0JP@>2)I3M
3BB8b5!M>$77Kd=9MJ>\;cQt)?t!PWDJsN=H[UL$LlIU`R@p@RXKf+@]YD8$a2lKLd*U7ke^i='g"G*5
rn@G.rS.A-s4d>(%,9OlgY:N<gt^Z=g=lPZ&_GUbe^MsncHXPQa2>[*]!\mD%gELR%hB-Z%K-e:&,ctA
%1NdV%M&FH!=fS;%L<LQ%LimW%1WjH%MB3Z%1WgU$O[@N$4-tE#6kD;#5eW'"onoB$4@4R'G_W0+=/Bc
/i,=C3BK>fr^$KMs$ZlSnO!4B!(?cQ(.(;Q5<_1i3B&`K.k2ni*uu:7'+PEYciE)+*ruBD!WrQ1#7:nS
'c8&<,qh&43^H/%92JGf=^53@@eaIT@U`SF=]A3j912'/2D[!:,p43F'G1ZY#6b22!W`?$!#9U!G'A.U
H$apdIXZftJV/Z1LPUhF2NEi[P*D9!R$sM8StDaQV5UAoX0/\4['dES]Y;1u`Q$$Cbg4bgf%Sp9iT0+a
lgF66p@nI`\c;U-"<Sa/+X-h/=sP@>,pjrb-7:/h.4Qet/M/S.0JP@>2)I3M3BB8b5!M>$77Kd=9MJ>\
;cQt)?t!PWDJsN=H[UL$LlIUbR@p@RXKf+@]YD8$a2lKLd*U7ke^i='g"G*5rn@_6gYCQ<gt^Z=ptYo(
$JaFkgtUW>gY:H9rn.n8f%/C$da6:abK%Z@^V.4dZi1I>%Ls![%LimG%f[(<%L!:N%LimXr=&c;%K-bB
%1NdV%LijW%K6hM%1E[U%1EUP$k!CK#RL_?#6kD3"9AZ/rWX#A$4@4R'G_W0+=/Bc/i,=C3BK>'5Q3tI
6NBOR6h!DD6UO9?6P`!S5sIOq4#o5V0e4_$+Wh^D'GCrb$bZQ6!$;4B!WiH,#6tSF'GVH-,:,!!2EF,l
6q^?U=]o!7@Uf+C*b&S`>Zk$&91qZ=4Z5)L.jZD\(_mVi#mUV9!WiB'rW"?gG'8(RH$OaaI"$NpJ:W?,
KnkJAMN3aZP*D9!R$sM8StDaQV5UAo,HIuOZF%'M\\,Yl_SsO:bKS;]e^iI0hVmPWkj.[*o_/%Vrj;\.
+!;[L+oW\c,l]1j-<)9<-RU;k.Olr#/M8\10f(UC1c@9Q3]oMg5=%\+7Rp'E9i+\c<EWO6@:NneDfKuJ
I=d61NK]]sTVSKeZ*h'R^VIh/aNVoUd*pLpf%/I+g"P0ZgBZNggtUT=gtVSYs4dS/rS%J1gY:H9rn.G+
f%/C$%+<MJc-+/J_nWmr[BoiC"qD+R%h9$Xr=8i<r=/u?%1WgW%fHh;%Lr@H#Rq4Q%1WgV%LrCI&e,6Y
%LigS$OdCM#m^hB"pY>:rWE6*"TAT>#RUtJ&JQ!"+!;jW.kWV72`Wr^5Q3qO6UO7/7/fRM6MEhH6iTRR
6P`!S5sIOq4#o5V0eOq'+Wh^D'GCrb$aKa;!<E6'!sAi6(((Kb'cJ2>,qh&43^H/)92JSj=^53@pLG=S
@U*/@=\qpf6pWso1G:7),97U9&If$O"Tnf-!<N0"9QYH$GB\=XH[L3iIXls"K8##7Ll.(MO-#NhQC!u-
S"6.CU84WaWN3)&Yd1XE\@K8d^r"(1aihoSe(*%'gtq#Njll$un+?>Jqu4qAk5PQ++<VgNrZYPl,UF``
-7'ud-R^Dn.P!)&/h\n51G^mF2E*WW4?Pel5t".27nQHL:f1.k=^,9B@qKUsEHcbXJqo/APF%]1Uo1<!
[C<f`^r=@8bg"M]e'uq!f%8U.g=k9fgY:N<gtUT=gtVSYs4dS/rnIJ.s4dS-rn.n8f%/C$da6:abK%Z@
^V.4dZi1I>%Ls![%LimG%f[(<%L!:N%LimXr=&c;%K-bB%1NdV%LijW%K6hM%1E[U%1EUP$k!CK#RL_?
#6kD3"9J`0"r7CI#RUtJ&JQ!"+!;jW.kWV72`Wr^5Q3qO6UO7/7/fRC639MA7/]Ig6:!n%5!1ne2`*6A
.OQA]*?,\+%L``o!8mhu!<E6'!sAi6$4R[a)B^7N0/GLI5t"7::fLS#>[1b4A0,2h>[1E7:eOGL5s7+^
0.S=n*>fM'%1*7C!s/N)!WE'3FEVhOGBnI\I!gBlJ:N3'KnY:BLl.(MO-#NhQC!u-S"6.CU84WaWN3)&
Yd1XD\@K8d^r"(1aihoSe(*%'gtq#Njll$tn+?>Jqu48.q>UR>+<VgNrZYMk,UF``-7'ud-R^Dn.P!)&
/h\n51G^mF2E*WW4?Pel5t".27nHBK:f1.k=^,9B@qKUsEHcbXJqo/APEhQ/Uo1<!Za[T^^r=@8bg"M]
e'uq!f%8U.g=lP\!8RP-s4mY/q:lG7gY:N=gYCQ=gtUT;gA]b;f@JO'e'cUgc-+/J_nWmr[BoiC"qD+R
%h9$Xr=8i<r=/u?%1WgW%fHh;%Lr@H#Rq4Q%1WgV%LrCI&e,6Y%LigS$OdCM#m^hB"pY>:qum!'&-rUN
$P='g)]p1K-S$f*1cGLs4$5b,62a1N7/oXD639MA7/]Ig6:!n%5!1ne2`!0=.OQA]*?,\+%L``\!:p14
!<E6'!sAi6$4R[a(a(%L0/GLI5t"+6:f(:t>[1`IpgbFT@U*/@<)?4\6pWso1G:7),97U8&IJgL"Tnf-
!<N0"-$4<RGB\=XH[L3iIXls"K8##7Ll.(MO-#NhQC!u-S"6.CU84V4W2ZhuY->4=[CEc[]thM(`lZEJ
cdL@pg>(QDjQ5UkmI0]@p\XrsrraDd+<_p-+p'#8-!)B>-7'ud-R^Dn.P!)&/h\n51G^mF2E*WW4?Pel
5t".27nHBK:f1.k=^,9B@qKOqEHcbXJqo/APEhQ/Uo1<!Za[T\^r=@8bg"M]e'uq!f%8U.g=lP\!8RP-
s4mY/q:tu($JaCjgtUW>gY:H9rn.>(edp?^e'cUgc-+/J_nWmr[BoiC"qD+R%h9$Xr=8i<r=/u?%1WgW
%fHh;%Lr@H#Rq4Q%1WgV%LrCI&e,6Y%LigS$OdCM#m^hB"pY>:qum!''F5$R$P=$f)]^%I-S$f*1cIEV
4?ia1rBpTQs$Q`Oog8XF!(?cQ(.(;Q5<_1i3B&`K.k2ni*uu:7'+PEYZ2jn*rW3u@#6tSF'GVH-,:+ir
2EF,i6q^?Q=]o!7@Uf.DraHjP=]n^#91qZ=4Z5)L.jZ;Y(_dPh#mUV9!WiB'rW"p"G'8(RH$OaaI"$Np
J:W?,KnkJ?MN3aZP*D9!R$sM8StDaQV5UAoX0/\4['dES]Y2+t_oBd@'?neNe^iI0hVmPWkj.X)o_%tU
rjDb0rZ<7*+X-h/'dP%N,pjrb-7:/h.4H_s/M/S.0JP@K1Gq!I2`Wo]4?btq6q'R88PDiT;,^Ir>@(`J
Ao)C*GC+aiLPUqRQ'n;>Vl[/0\%KDi`Q-'Dc-F\aeCE.$fDaG1g=k<9gt^Z>gY:N_g\]e*gBQHggYCT=
h#?(.gA]e)edg3Yda6:`bK%T>^V%.cZ2P7<%Ls![%LimG%f[(;%Km4N%1WmH%06qJr=0)B%1WgW%1NdV
rXKPM$k3[U$O[:M$OR1G#mUY>"pXu.)[6NO#RUqI&JGp!*?ZXU.P<G42`Wr^5!M>!6N'7O7/fRE6N0=S
6pj@0(ILMT5sIOp3B8oP0e4_"+WhXB'G1f`$F0[3!WE-5":#/<%1s<l*?uj\0/GLL5t"?L92JSj=^:r8
qdf\8*F)iP<)c[e83oO)2D[!:,9S!A'G1ZY#6b22!W`?$!!dUhG'A.UH$fO<5^n66JV/Z1LPUbDNfT9b
Pa7Z'R[Te=T;&-XW2ZhuY->4=[C3WY]tVA$`lQ?Ic-k.ng=tKCj5oIhmI0]?p\Osg[JpF0+!;[L+oW\b
,S;=L-7'ud-R^Dm.P!)&/h\n5r\G*B2E*WW4?Pel5t".27nH<I/Po;A<EEC2@:NkbDfKuHI=d0/Mij9m
TVA?cYHtXL]thV-a32`Qd*gCnf%/IPg&Ke*gBQHfgt^Z=h#6"-h#6"-h#H.-h#H./gA]b*f`'G3eC2gl
c-4AO`P]I']!\gB%g3@P%hB0L%K6k;&,Zn;%0I(L%M&FHq[Nl@%1WgW%1NdVrXJr<%/p\H$O[:M$O[7H
#mU_@"pG,5rWF>J#6kG?$OdU\()n89+X\`i0f(aK3BTJi5s[h)6UX:0rBp3Dqa2&c6UF()5<_4l3B8oP
0.SCr+WhXB";DFX$js9?rrN*#)$:$I#mq7Y(`a_F.k`\:4[DJ,92JSe=]o#.@fL!;@fK[Q=]n^'91qfA
4ZYAP.k)\c*>K8!$3pe>!s/N)!WE'(FEVhOGBnI\rd7"\J:N3'K8#):Ll.4ROHPioQ^F51SXuIJUnsre
WN32+ZF%$J\\,Vi_SaC7bKS5Ze^iI/hVmMVkN_I&o(DbSr9s[+rrrBD+<VgNrZ_=e&LAbN,pjrd-n-Sp
.kN>*0/,-[1F"_72`Wo]4Zkno6q'R88P2]R;,L=p>@(`JASc:)GBnUgKnpP'Od29)U8P)rZaIBX^Ve+4
bKS8YdaQ_Ff)FA%gAfq+h#H./h"f_(g]ZBegtUW`g]-",fb2rgf%&:!dEp.^aiDB<^V%.aZ2P7:%Ls![
%fQq:%fR";%Km4N%1WmH%JpV<%1N^U%0I%K%LrCI!=]J:%5A4u$4I:M#m^hB#R:P;"9eo2"U,,8#RLkI
%MKNq*?QFN.P!501c[QX5!M>!6:+%-qa:!Br^.Yn6UX=06:!n%5!:tf2`*<D.jlVe*?,q3&Io0Uo)QN*
*WZ9C!WrT2#mq7Y'ceDA.k`\:4Zu)%91r5`=]o!7q-s>.&m815:eO>M5s77b0.SIr+;tt/":khE#6k).
rrN*!#BY-4GB\=XHiACZIXls"K7el5LkpqKO-#NhPa@c+R[p%BU8"H\W2Zi"Y-PFB[^`u`^;@e,aN;ZN
daQe"gYC`IjQGgomdg&EqY^?Ks4[JVr#[%(+X-h/rZi(%-71#c-7:2j.4Qi"/M8\01&`se1c@9Q3BB;c
5!MA%7Rp$B9MeS`<EE=0?t3baDK0fEH\$m+Mij3iSt`$]YHbLH]YDA'a2uO2c-XkeeCE.$f`'S(gA]h2
gtUT=gtUTYh#H./h#,q+g(i;of[n^*e^MsocHXPSa2>d-]",/NrXT,A%M''[rXJi:rX\r;":YhM%M&FH
q@3`>$k<^V%LimG%KHq:%0?nG$N:G3#qH8c"pG27"9\l3#6kJ@$4ICV'H7u5+seTe0/GFD3BKAf5=%S%
6UO7/6q$u@pd4pHr^7Ym6UF()5<_4m3B9#S0eY"(+X.pG)&!Jg$OO'<'*/+8!WrT2#7:tU'cJ);.4[&-
3XS#96qBsI:fLCs=nl5>=]n^':f'\R6p3Rh0.SIt+<;@7&J#0Q"U4l,!!3#u89B#uGB\=XH[C-fIXls"
K7el5LkpqKO-#NhPa@c)R[p%BTq\?[W2Zi"Y->:@[^`u`^;@e,aN;WMdaQb!gYC`IjQGgomd^MQpA4[c
[f6O/+!;[L+oNSu,U=Z_-7'uc-R^Dm.P!)&/h\k4r\G!?2E*TU3^#Sh5=.b,7l3e09MeS`<EE=0?t!V_
DJsZCH\$m+Mij3iStMm[XKf+B]Y22$a2uNLcI((he^i='f\+sWgA]h/gtUT=rnI;)#2@nfgtUT=rnIG+
("q9mf@JL&e'cUgbfe)J_ns*u\[/L=&-!.>&-!.>%K6k:&-!+D%LrpX%1WmG%K-bB%1WgU%LimX%K$\9
%/p\e$Od@M$k!@J#RLb@"pG27"9\l3"pPA>$4@7S',_`0+sA<`0/57A3B92b5Q3qQ6:4+.6UX?@6i'.J
6P`'X6UX:/6:!n%5!;"g2`ENI/h/.j+9ro+)&!Jg$OO'<rrN*#(BjsI#nIU^)BBqH.5*J83^#l!84ucU
<;p%s>T-aJ<)c[j91VH:4ZYJS.k)be)Aj/#%1*7C"TAH&!W<!mFEVhOGBnI\H[L3iJ:N3'K8#):Ll.4R
O-5`lQ^F//SXuIIU84ZbWN3/(YdCgH\@]Gg_8F75aihrVe(*+)gu./Pjlu*unauMNqu63e`W$/Ar#[%(
+X-e.'-nhL-71#c-7:2j.4Qi"/M8\01&`sO1c@9P3BB;c5!MA%77TpA9MSG^<**4/?t!V]DJsZAHQdrl
LPV"TQ(4MAX/rS4\\,Vm_oKmBbg+S`e(*%#f@\d0rn@A+s4mY/s4mD(s4mY/s4mV.s4[J*'A1mee^`*q
d*9eVaMl'4]XkSWYPo(4%f[(>%f[";%fR";%Km4N%1NgF%K-b<%1WgN$k<^V%Lr:F%1NaT$Od@M$k!CK
#RLb7#5nZM"U52<#RUqJ&JH$$*?lXQ.P<G32`Wl\4[)(r5sdq+6pj=07.`kH7/TFO5nuUJ4ZbY_2_cs<
-RBrZ)]KP)%LWUMp&M`*rrN*#)$L0K#n7I\(`a_F.4[&03^#bs84uTP:fLEh=V4V4:f'eX6ps=%2D[!:
.3fiO#8e$`%0m+A"TAH&!W<!mFEVhOGBnI\H[L3iJ:N3'K8#):Ll.4RO-5ZjQ^=).SXuFHU84ZbWN3/(
Yd:aG\@]Df_8=13aihoUe(*+)gu./Pjlu*unauMMqu#CPf`)0Tq]?q'+X-e.8gGZ.-71#c-7:2j.4Qi"
/M8Y/0ekI?1c@6O3BB;c5!MA%77TpA9MSD]<)m(+?t!P[DJsZAH\$d(Ll[abS=lUUXKSt@]"Ptu%)p<2
bg"M^e(*""f%BuTs4[G+!o2ScrnRA)s4mY/s4mV.rn8.@g"=p-f%&9udEp.]aiMH<^q@4eZ)mp8rso&>
rso&<rXSo<r=/u?%LijW%fHk8%L<LR%1E^U%LrsF%L*=N$k3UR$O."I$4-tE#Q4l*"<%FJ#6tM@$OdLY
)&jM;+XJKg0/GOG3BKAf5Q3tJ6N]_D6U^T7#=LsI6UX:/6N07c5!;"i3B&cL0.SCn+s7gB((gr_$4,Yl
c2[hFrW3l="U>8A%hoj!*@!!`0/GLI5s[n091r+\<;K`9<)c[j91qfD5s77e1Fjn#,97[;&J#3R"U,&.
!WW9"!!77cG"[%'H$Oa`I!gBnJ:W?*KnkG>MN3aYP*2&rQ^F54SXuOLUo()iX0&P/Za@-M]=bhn_SaF8
bKSA^e(<=.hr*PUkj%L&o(;\Qqu4n@li.1eq]?q'+X-e.>pL[A-71#c-7:2i.4Qi"/M8Y/0ekI?1c.*M
3BB;c5!MA%77Tj>9MSD]<)m")?=@>YCi4<<H%1C!LQ.F[R@^(LX/rS8\\,_p`Q-*Dbg=_aeCE+#f%8R-
g"P-[gATe+h#6",h#5t-h#,q+g)&Gqf[n^*e^W'qd*BkWaN)36^Ugt`YH7^6rso&>rso&<rXSo<r=/u?
%LijW%fHk8%L<LR%1E^U%LrsF%MB0Z$k3RQ$4I:L#mgkB#RCV<#5nZ+"U5/I#m^kG$kX6m)]p7I,qCT$
1cI?R4$5Yjr]p`T6UO706UUf?r^6WP!^f@Dr^-ZPr]q;a4Zked2`*<D/h/.k+<MO<'FkN[#melXi;`iY
rW3o="U,,<%1a0j)B^7N.5*J83^#bs84ZBHrD<JmrD4G+84Z-:5s77e1G:1',9Rm>'FtWZ#6b54!WiE#
!!ICeG'A00Gn#+JI"$TrJV/T/LPL\C30'#[P*2&qQ^F52SXuOLUo()iX0&P/Za@-K]=bhn_SaF8air)Z
e(<7,hr*PUkj%L&nauSOqu")+rr33#qB$h&+X-e.=X57=-71#c-7:2i.4Qhu/M8Y/0JP@>2)I3N3BB;c
5!MA%77Tj>8kr2[<)m")?=78TCi4<:H%1C!LQ.F[R@KqJWN<;2\[oPm_oKj?bg+S_e'uq!f%8RRg&B_(
g]$")gB-0cg\on+gA]b*fDa>5e^W'pd*BhVa2c'4]t1\\YH.X5rso#=!Y,YKrXSo<r=/u?%LrpX%fHhF
%LimX%1WgU%LimX%JpVJ$k3US$Od@M$OR1H#RLbB"pG50";M(E"pYD?$k*U[)&jY?+se]k0/GFD#rt(0
4[2.s5sdp;6NBOR6i'4N6iTRR6NBIP5o2aL4?GP`2`*<C.k2\d*uu47'+PBY#mn9Fo)K[0!WiH,"U>>C
%ho`s+<r0]0/#+B4Zu)!6qI;MqG8&&91VTA6pWss2D[!:,pONQ(_m_o$4-k>"9&?%!W2p#FED\MGQ)ji
H[L3irdYl=K8#)9Lkq(OO-#NhQC!u-S"6.EU84W_W$SFDXg#.=[C3WY]thM&`lQ9FcdC4nf\53?iT04e
lgOB9p\F[`\Gld1qB$e%+X-e."=,6=-78^=9d_>;.4Hbt/M/S.0JP@>2)I3N3BB8c4?c%t77Tj>8ki,Z
;cQn'?=72RC2S*8GC>$oLQ.@YR@KqJWN351\%9>i_T0a>bKeJ]e'uqIec=>$g&B_&g\KY%g\oh.g"G$0
rmh5%e'cUg%*cu:a2c'3]t(VYXK2=2rso#=!Y,YKr=8i<q@3Q9%M&FH$P!UU%LimW%1E^U%JpVH%1E[U
%1<ON$Od@L#m^hB#Q=r+"<.LK"pYG@$k!OZ()\,8+sAEd/i,=C3B9/`5!T!3rBpTQr^6TNr^?`Q!(-ZN
(dC2I4?GP`1c$j=.OQA^*uu45'+>6V#RR[7!!3'#!!F)A"UPMF'GVH*+<r0_0/GLI3^H&"6qBlE9E%I#
6pX+%3]8lL.k)bh+<;12&If$O"U"o/!W`?"!!ICcG'8*/GlW3jHpW:4J:W?*LPL\ANfK0^P*D9!R$aA6
StD^NV5C2jX0&P1ZaI6P]=bqq_T'X;bK\G_f%8X4hr*PXkj%U)o(MhRqpGH.rs/Q"q&^\$+<g\-rZkDg
-71#c-7C8k.4Zo#/M8\10f(UC1c@9P3BTGe5!_M'7Rp$B9hnM`<)m.-?=@D[CiON?I=Hg%MiEjcR@^4P
WN<G6\\,\m`Q-'Abg+S_daZhHec=;%f`'S&g@O(sgA]bAf[n^*e^`-sdE^"\aN)?=^qICi[BZd3r=8l<
rXSu=rXJi:rX\l9!Y#VLq[NN7#n7@R$k<^U%LimH%MoQa$k<[T$Od@N$OR1H#R:S?"pG/5"9fbJ"U5/9
#R_%L&JQ!"*?ZOP.P!/,1cIET4$5YirB^HMqa:BOqa:BMrBV;c5!;"g3B&lQ0eY"(,p49M)\s)!$Od@K
#L`\/!<3*!!YtnB#71_J&JZ3)+<r0].l/t>3^#Vl62a4O8Gtpm5s[Xs3]]/T0.SIt+<;@;'G1i^#6tA6
rW<*#qu@"EFEVhOGBnI\rd4p!J:N3'K7uFCLkpqKO-#NhQC!r*S"6.CTq\B\W2Zi"Y-PC@[CNo^^;7\*
a2lBIcdLCrf\GBBiT9:fmI0T<pA+Ra^]463#la\p+!2UJ+X-h/rZkVm-71#c-7:2j.4Qi"/M8\10ekIA
1c@9P3BTGe5!_M'7Ros?9hnM^<)m(+?=7>VCiON=H[gTuLlII\R@L"IWN3;3\%KDi_oKg=bg"G\daQas
f%/I)f`'S%gA'G&g\fe)fbiAnf%/C%eC)akcHOJQa2Ps2]t1VXZ)af$%g3@P%hB0L%K6k:&,ct@%1WgW
%f6_7%LERS%1E^U%1WgVrXKSN%L`dT%1EXP$O[:J#m^hA#R1M2";(eB"pYGA$k!X\()n89+=/Bb$SO4j
2`E`W4?Pbk5Q*nJ6M<eH6N'1g5<_4m4#o5Y1bgX9.O?5\*?,q3'+PEY$4-pP!:U!g!WE-9!sAi6#nIU^
(`FD;,paun0/GLI3^#Y*62X.M5nuOG3]]/T0.SIt,97[>'bLrc#mUV:rW<*#qZ%paFEVhOGBnI\H[L3i
J:N3'K8#):Ll.4ROHPcmQ^=)/SXlCHU+)q9W2Zi"Y-PC@[CEi]^;.V)`lQ9HcdC:of\G?AiT97emI'N:
p@nF_]Di3:r;$(/+!;[L+oNSb,[)H>-71#c-7:2j.4Qi"/M8Y00ekIA1c.-N3BTGe5!_M'7Ros?9MSD]
;cQt)?=7>VC2\*7H[UHsLl7=ZQ^j_EVlR)/[CX&d_o9[;bKS5XdF-Ope^i='fDXD"gABY$gAT\)fDa>(
e^`0sck"LJbfRoG_ns+"]!\fHWMf\*rso&>rso&<rXSo<r=/l<%LrCIr!iW8#n7@R$k<^U%LimF%MoN_
%LigS$4@4K$4$qE"pY>:"9eo2"U4l0)@6`Y$k<pb)]Ke?+XJKg0/5:B2`Wr^4?btorB^HM!(-QMr^-NK
)a?MM4?GP`2`EQH/h8:q+s.gE)&!Sl$jm:G#-Iq+!<<0"!Ybb@#6t\K&JZ-$*?ujV.k`P32E!Vq4o7PE
4V^"=2E!?E.k;nj+<;@;'b:`\#6tD7rW<*#qZ&TtFEVhOGBnI\H[L3iJ:N3'K8#)9Ll.4QOH>WkQC!u-
S"61FU84W_W2lu$Yd1UC\@K5c^qmq.(WXV@c-b"kfA#*<i8j"`lg=-2p%J4Yrk8==rquZfocG7u+<_p,
+ql4I,pjrb-71)g-n-Vr.kN>*0JGmL1G^mF2`NfY4?Yek5se"07nHBK:/Oqh='Jp9@qBCmEH?DPIt<B2
NK]WoSt`$[XKf+B]"Pnr`Q-'Cbg+S^daQ^rrmh/&f\$/Uo\08s!nc,Vrmhh7eC2jmd*BhVaMl'6^q@7f
Z*17,UAbZ/%h9'[%h9'Y%K6k:&,ct<%K$_7%1WjW%LrpX%1N^U%LimX%K6hN%1WgW$k!FO$4@4K#mgkC
"pbD;r<+5H"U>5:#RUqJ%MKTq)]^%E,q:Dt0f(XF3B9/`4Zu"onNd@D5<_4m4?43<3B&cN0eOt++X/$J
)]9D'%LWUM#R1O9!!!&u!Y#89#71_H&JPrs*?ZRQs!dt$s"jX4qE"U6'/M9p.k)bj+<;I>'bh5h$4-k>
"T8B%!VudhFED\LGB\=XH[C-fIXZfuJV/Z3LPUhJNf]?cPa7Z'R[]k?T:r'WVPpPrXg#+;[(*ZY]tV>#
`Q-'Cc-Okhf@o$:hrEh]lKdm/"n_K^qu$H-rsJc&qY'S(+!;[L+oNT3,U=Z^-7'rb-R^Al.P!#$/M8\1
0f(UC1cI?Q3]oPf5=%V)7Ros(9MJ8Z;,gV">[CiMAo;O.GC+afKntYLPF%l6U8P)rZ+%9V^V[n-aN;WM
cHstee'uqIf)O@ug%sG"f`BaWrmhn9e^W'rdEp1`aiMNA_SEpt\[A]DX/)Kg&-!.>&-!.>%K6k:&,ct<
%K$_7%06qJrXSo:"q1tO%1WjWrXLsu%LijU$OdFN$k!CK#RCY>#7(J9"U"r3"U529#RLhG$kX0k)]KnD
+X\`i0/57>2`Wl[4?Pek5<nd+)F$DL4Zkef3B&lR1GLO5.OQD_*uc(5'FkN[":>D@"p_71rrN*#'*JIB
#71_J&JPru*?ZRQ,qCK!0E*d(2Z>KG0.SP%,pOWT)B'>)&J#3T#6b54rW3'#q#LG:rcUtZH$Oa`I!gBl
J:W9(KnkG>MN3^XOHPioQ^=/1SXuIIUnsreX/iA,ZEppH\@]Gg^r+.2a32]Qdacq&gYUiJjQGdnmIBc?
pA4[co`*,7#5nAop%0=JrZD1ar?=6I,UF``,palc-n$Mo.k<2'/h\n50f([D2E*TV4?Yek5se"07n60F
:/Oke='8a4@:NncDfKuHI3=#nLPq4WQ(4G?UoUT%[CNl`^r""0aN;ZNd*^:ie(*"If)F=mf`KgYfDaA#
eJ6Q]dEp1`bfRoG_ns1%\[SuMXJqqer!ruA%hB-[%1W:HrX\r;"UtqO%1WmH%06qJrXSo:!"9#@%LimX
%K$\L%1NdT$k!IP$OR1G#mU_@#R(D9rWF5F"U>5<#RUtK%MTZr)]p1H,pt2r0ekIC2`Wl[48qAC55meD
62j(R5!D+m4?GP`r\kQJ0eY./-RBrY*?,k1'+>6W#m^b@#4hi+!!!'!!Y5A9"U>8>%hTBf(`FD;,:!1:
!%\%%q_S4)'.YR^.4$2]+;u.8'G1ib#mU\="9&B%!Vl`qFT-GWGBnI\H[L3iIXm!#K8##7Ll.(MO-#Nh
QC!r,S"$"ATqnN^VQ$VsY-PC@[^`l]^;.V)`lH9Hc-k(lf\>3<iT0+blKdp0o_&%Wr8I\4rs&Asq=X;#
+9!A_+oNTY,U=Z^-7'rb-RU;k.Olr#/M8\10ekIA2)[BQ3]oPg5!M>$7Ros@9MJA];cQt)>[_,RCi468
H$askLPV"RPF8#8U8b5t[C<][^CJ&sa2c9Ec-F\`dF-Opec"&#f@S[Jg&K_)fDX8;e^`0tdEp7bbfe)J
`PTF(]XbGVXK/=pT)9*'%M''[%LimH%fR";%L!:N%LimXr=&l>%1NdWrXAr<$k3^G%K-e9%0m@P$k!IP
$Ocn>":,2:"pXu.)$L3L#7(VE$Od[_()n89+<`*^/h\k41cIAm3<M?*4?`X,r'10E"[,"24?GPA3B9#W
1bgX9.jlVd+<MO?()%8g$k!=I#6tF6!<3*!!XSr3"U>>C%hB6e#T+I#+<VmT,q8dCr%J%"'.G@V,pONQ
*>fV.&J#<X#6tD8"9&B%!Vl`qFT-FbGB\?3HTcb*IXm!#K8##7LPgtLO-#HfPa7Z'R[]n@T;&-XVQ$Vs
Y->4<[C3TX]tV>#`Q$$CbgFkff@\j5i8Nb[$0gaCn+-,Fq>1*+rs/Jup\+1J+!:J)ruq=b%4!5G-7'rb
-RU;j.OltJ/J0Wh0JP@>2)[BP3BB8c5!M>$0h"Q%8P2ZQ;,L:o=^,9B@qogtF*2bTJV&Z8O-,csStN!\
X0K"?]"Gen_o9[<bKS92ciVYEeGe"rf([enf)F2:e'c[kd*BnZaiMNA_nWmt\[AcIX/DbbSGWm!%Ls$K
%KHt;%fQt=%fQqA%1NdV%M&CG!=fS;%L<LQ$k3[U%1WjG%M&sW%1EUQ$O[@N$4."E#mgJ6*<cQK"U"u5
"pYGA$O[FV'G_W,*?lXQ.P!#%0f(Zc2uYi;481l;48h2=2\7c"0eOt+-QsZV*?,q3'+kWX$k!@J"pP57
WrW/#r;mQ7"U>>@$4RR]'c7i-*?ZIL,PWPd,pOZ6+:T>0(`3r!&If'R#6b86rW<'"p]1>9rcSKiGBnI\
H[PgA7"Bi>KnY;;Ll.4ROH>]kQC!u-S"?4DU84W_WN3)&Yd1UC[^`r_^;7\(`lQ9GcdL:of\5-<iT'+b
l0[p/o(MhRr;QNlb5VbHqt^!Zo'[YBrZM4ar?;4erZqjt,paod-n$Mo/,h+G0/#"61G^mH2E*WW4?Ykm
5t".27nH<H:/Okf<EEC2?t3ebDCBRKGC+gkKo:qOQ'\#4Uo12qZ*h-R]t_G%`Q60Ec-=P\dF-ImeCE+<
f)F2<eC2jndEp1`bfRrH`P]R+]XkY[Z)jq&U7ReN%gELR%hB-[%K-e:&,Zn?%1WgW%f?b:%LrCI#n@CR
$k3[U%1WjF%MK9\$k3RP$4@4K#mgkD#6kG<"U4l.rWO2E"pYGA$k*UZ'H%i/+<hsV-RpW"0ekLA2`LXp
pcJF7r\k`P1GLO9.k2nm+s7sH)]9;$%L`^P#R:P="U+N![/g4-rW3N3"U,,9#mq1T&JZ#t)ZCcW+S[/n
+<V[F)B'G-'G1id$4-qB"U"f-rW<*#pAk27:j.#+GBnI\H[L3iIXm!#K8##7Ll.(NO-#NhQC!u-S"6.C
U84T]W2Zi"Y->4=[^`r^]tqS'`Q60EcdC1lf@o!:i8Ne\l0Id+nb)VOqu#UVhZ!i[r;66^o^VAK+9*J`
+oNSo,U=Z^-7'rb-RU;k.OtEL2_Ha;0f(UC1c@9Q3]]Ac5!MA%77Kd>9MSD]<)m"&?=72RC2@m2GBn[h
Jr#>GPF%]-U84ciY8"=P\\,Vk_SaF8aihoQcHstde'lhFeb%GkeJm#eda?FgcHXSVaN)?=_SEgq\[SiI
XJ_keS<s-arso&>rso&<rXSo<r=8c8rsnu:!=fS;%fQnA%LimX%1WjG%Kd+K$k4it$jm@N$47(G#R:V@
"pP26"9\l2"U>5:#RLkH$kX-g)&jS=+sA6[.P<A-1G^ld2tT-/2\n5+0eY.0.OQMc+<MUC)&<eo$k!CK
#lY&."lfU(!<3)u!Y5D;"U>8=%1`s`'GVH%)B/SqqB5bX%iQ?'(_m_s%h/jP#6tD8"8r9$!VQKpF*)O(
G5c[cH2`.]I"$NpJUrH-KnkJAMN3aZP*D2sR$a>5St;XMUnt#hX0&P/ZF%$J\\#Mi_8=+1aN;]QdFHh"
g>(TDjQ5Rilg=03p%J4Yr7(c:rs\f$q=XCNmd2&;+!;^*+oNSu,UF``,palc-R^Dn.P!)&/h\k3r\Hnu
2E!NT3]oMg5=.b,7Rp$B9hnM`<)m")?=7>VC2\*5GC+gjLPUkNPEhQ-U84ciYHt^K]"Pko_o9[;aihoQ
cHsr<dJhVpeFqE9eC;srda?Ihd*BnZbK7iG`P]L+]t(V[Z`L4,U7e*EPn*a'rXJo=rXJo;rXSo<r=/u?
%1WgW%f?e7%LNXT%1NdV%LrpX%K6hR%1WdV$k3RQ$4@4K$4$qD#6kG<"p>)4rWF)B#6kD=#n%+L%MKNl
)]Ke?+sA6[.P!,)0E*d-2"ijN1c.!E0eY14.k2ni+X/$L)]KP,'+>6W$O@%D#6k>8"OI/%!<3)u!XSu5
"U>8=$4RLVrY5AIr>>PQr"obU'bh>o%hB*V#m^G5!!N6%rrMcm"ES[,G'<k/%=*5GH[L9kJ:N3'KnY:H
LkpqKO,oHgPa7Z'R[p"@Tq\?ZVPpJpXfen7['dHV]Y;1u_oBa=bg"Pae^rI/hV[ASjlu'tmd]rBp\Odd
`r?/?qYBjlo^_P>lQ.,i+<^Y,r?>Ai,palb,pjue-n-Sp.kN>*0/#"61G^jE2E3]X4?Yej5sdt.7n6-F
:/Fed<EEC0?t3b_DJsT=H[UBtLPV"RQ'\#6U8P&nZ*UpM]Y2(s_o9[;aihoQcMl/ldF-JBe+hGme,Rkr
dJhK1c-=JSaN2E@_ns1%]!o)RZ)ak%TUq[=P7IO%rXK&A%h9'Yr=8i<r!ii=%LijWr!iT7#n7@R%1E^U
%1WjG%L<LR$k3[U$O[CB$OI.H#RC_@#7(J;r<*Z8"U529#m^kG$OdU\'H%i/$m-T9+XJKc.kWG-0erY`
pbX-M1GLU;0.nb*-RU2a+<VaF)]9>'%LW[Q$4-qA"pG/5"MFg%!<*#u!Xo/6"U,,9#mq+N%hTEQ'_iCK
'GM,k%hB*V$N:84"U"r1rW<*#oDf#8FED\Lrc]K1H$amcIXZftJV/T/KntPBNfT6aP*D9!R$sM8StVjP
/Yo8BWN3/(Yd:^E\@K5c^qmn-a2lHKcdL@pfA#*;iT'%`l0Ia,o(;\PqY^?6rso&+q=jURnaGf/*ZlIH
+T<P_+orr8=X>CA,pjrd-RgJo.kN>*/h\n51G^mF2E3ZV3^#Sh5sdt.7n6-E9hnPa<)m.-?=@DWCi=<7
H$askKnt_LPEhZ0TVnciYHbLE]"G_l_SaF7aN2QKbg+N5d/VMmde_Gldf7_ocje:Fbfe2Na2c0:_SEjt
%CrmQZ*1.)Un4*EPE?@R&,m%A%hB-[%K-e9&,ctA%1WgV%M&FH%1WgW%LijW%1E^U%1WjF%MT?^%1WdU
$Od@N$OR1G#m^e@#6kA0"<@XL"pP;=#mq(K%M9?i)&jS<+<VgR,q:Ap/hSe1r\=F/r%n=,*%rrt/h8D!
,p=ES*uu:>)&<kt$k*LN#mUY="U4l.WW<"urrN'"$j-V8"U>8=#mq+N%hJXOq@ro@$P*aW%13CH#6b86
"8i6#!V?@nF)uGFG'8(RH$Oa`I!gBnJ:W?*KnY;<LlRLVOHPimQ^=)/SXlCHU84W_W2lu$Y-PC@[^`l]
^;.S&`lH3Ec-atif%Aa4hr3VWkiqC#n+$)Ep\OdbgAgaD'E7q,qY'USna>f0kT1ce+!;[L+oNTd,U=Z_
-7'uc-RU;k.4Zo#/M8\00ekIA1c.-N3BB8c4?l+u6q0[:8k_rV;,^Fq>?kQEASQ%"EHQPRItEB1NK93g
R@L"IVlQo&Za[KV]t_A#_o9[;#KY$1bfn>WcL]E^c5t6Sbfe,La2c0:_S<ds\[SuOYH4e#U7e$CQ'%%9
%fHq<%f[(>%f[";%fR"8%K[(L%f6_7%LNXT%1N^U%LimW%K-e9%1`pW$O[@N$k!CK#RLeC"pb56"oSQ7
"U"u6"pPA>#n%+L%MKNlrYl.a+<VjO,paog.fLsn0)mI$.N'T[,p=HT*uu:>)&*_r$k!IN#m^hA#6k>8
rWL[MdfBCKquZm$rrrB,rsAZ3p^R61rX&Q/!sJi2"8r<#!V-6jF8p@^G5ldcGlrD@I")'F!.dRkK8#):
Ll.4ROHPckQC!u-S"61FTq\B\W2lu$Y-PC@[^`l\]tV>#`Q$$Cbg4_de_&U1hr*JTkNM0tmdKf@pA+R^
r650Cr;6?d&,#Scn*TH*k8kZd+!;[L+oNSd,U=]8-<_]B-7:2j.4Qi"/M8Y/0JP@>2)I6O3&s)a4?l+u
6q0[:8k_rU;,L:o=^,9B@qKOpDfp8LIt<3-MiEd_Q^OM@UoCDrYI1jM]Y2(q_Sa@5a2lBEbKS2Tc2Q#b
d/M;pc-=JVbK7m*`tuY2_SEjt]!o)RYH4e(U7e*GQ'78e%M&FJrso#=!Y,YKr=8f;r=/l<%LrCIr='5H
%1WjW%1WgU%LrpX%1W7G((CZ]%1EUQ$O[@N$4."E#mU_A"pP26rWET4"9o)8#71YB$k!IT&JGio)&jM8
+!;aO+XJE^-iPUl/,h":-RU2d+X/*P*uu:>)&<kt%LW[Q#m^hB#6kA1"98V@!9O:\!W3!"!sJT,r<N<.
q?m3.r<N<*rr`0#rrMWis)\3^s*"EdrcnKjrd5K1J:N3'K8#):Ll.4ROH>WiQC!u-S"2@,T:r!UVPpJp
X0&V3ZaI6O]Y2%p_SaC7aii#XdaQh#g>:`FjQ5Rglg=-2o_%tSqYU9;rtPJ0qYBmXo'u/6lKICP*ZlIH
+<_p-+oihd,RYnF-7'uc-R^Dm.P(KM8hMbN0f(UC1c@9P3BTGe5!M>"77Kd=8k`&Y;,^Ir>@(]GAnl."
F*2\TIt<B2MiEpcQ_'kEVl?_uZ*UpM]"Gen_SX:4a2l?Drlb>cp<=/mbfe2OaN2EB`Po^0^V@Fm&\5<U
Z)k"*VkBWOQ]mPkM[g6q&-!.=%fd+=%K6k:&,ct>%1WjH%fHh;%LrCI$4RIS$k<^V%1WjWr=0SO%1NdV
$O[:L$jm=J#m^hB#7(M<"9nc-(BjsH#6kD>#RUqI$k<j`()[u/*??7F,5r_e,par5-Q+3V+X&$P+<MUC
)]9D*'G1f`$k!CJ#mUY=rWW9(!!TJ)pAk3oqZ?d#r<;`srWN?+"9\Q'rW2Kgs)\0]!d8a2rcp)BH[L3i
J:N3'K8#)9Ll.4QOH>WiQC!r,S"$"ATq\?ZVQ$VsXg#+;[C3TW]HOu&_Sa@5aNMiSdF6[ug>(QBj5f=b
lKdj+o(;YMq>1$gd/OXUr;-6`p%%YAmHWs!jW5KB*s*Q-+oEMq,U=Z_-7'uc-R^Al.P!#$/OqEH0JP:<
2)R9N3&s#^4[)(r6:F@68P2ZO:f1(i='8d7@:a%cDK0`AH[UBtLPUkNPEhQ-TVSKbX08e7\%0)`^V@S%
_o;Vq!6G/]s3(5^rlb>`s2b2[)o]_3^q[Rq]",;VZ*14-VkTcQR?`nqMhhiQ&,d"=%fR"=%f[";%fR";
%KHt9%fHhI%LijW%LimW%1E[U%1WjWr!i]8rXBJJ$k*IO$OR4I#m^b?#7(J;"9n`,!!W?+$O6tE$4@4M
%MKNj(B,6T*?Q@GrZ_@cq'H"`#9k?7+<MUE)\F#,().Do%L`^Q$4."D"pY;8r<*-)"JPnq!W3!#!s8](
"o/E$"Tef0"8`0!!Ug$gF8g:]G5ldcGs?Y'I"$NpJUrH+KnkJAMN3aZOHPioQ^F52SXuIIUnjicWN3)&
Yd1XD[^j#_]thM&`lH0Ec-Oedf%8X1hV\q'j5oLhlL"'1o_%qPqYU3>rt58-qYBjXo^_J=mHWoujPq:&
rZD._ruq=b%O<;G,pjoa-71)g.4Qetr[e^70/,+:1Gq!I2`NiZ4?Pel5r_8$7Rp$B9hnM^;cQn'>[CoO
Anl4'F*DnXJV&T3NK93eR@KqEUo18pYHtXG\[oGe^VIY%_o9Uma8!aR`u`4;_ns4(^V%.h\[AcKXK/=r
U7e*GQ^*\mMhcur%f?k;%fQt?%LimH%fHq;%Kd.L%LrCIr=&c;%K6k9%0d:O%LijW%K6hQ%1WdU%LidR
$jm@M$47(G#R:V?"pP8.";1kB#6kA=#RLkI$OdLW',22t)?(TT*W@/U+TEP_*W?ul)&<o#&Io9Z$k!CJ
#mUY>"pG,5"9\i1"U5.'!<*#p!r`;s"TJT"!r`5e!<7->FT6OaGQ)kcH[L3iIXm!#K7el5LPUhJO-#Hd
Pa7Z'R[]k>T:r!TV5UAoX0&P/Za@-M]=bhm_8=12aNMfPcdUFqf\>3=i8Nb[kiqF#n+-,DpA+R^r;Q`J
rt>>/qYBmYo^_P?mHa$"jl>;@*r[8]+TEV`+q>kD,pala,pjrd-n$Mo/,h+G/h\n51G^mF2E*TU3]oMg
5=%V(77Tj>9MSD];cHb">@(`JALM/.DfKoFH[gTuLPq.QPEhQ-TVA6]X/rM0Za[KU]"Pel^r!t+_o9Ue
a!&F@_o'@,^q[Rq]",;XZa$^7WMcJ`St).4PE1WXKn9dEr"&f;rXT&?%1W:Hr=Ai:!Y#VKrXSl9!=fS<
%LERS%1NdV%LimWq[O5I%1WdU$k!CN$O[:J#RLeC"pk24!!W9''*SRF"pYG?#mq%J$k*UZ',23")>tNQ
*W.#X*W6oh)&<u%'+k]_$OdCM#mgh@#6t/2rWE<,"9f#$!3?2"!VQTm"82fq!VcZe!<7->FT-FiGB\=X
H[C-hIXqEK8V;_PLPUhFO,oBcPa7W&R[Te=StDaQV5C2jX0&P/Za@-M\\#Mg^qn"0a2uNKcdL:mf@o!9
hr*PVkNM3smI0W<p%S4Vqu$H]s6K[urquZhp\+7MnaGl2lK@9iiSYaurZD+^ruq=b"!f0=-N5:q-7:2i
.4QhH/H[UY0JNJ^0Jk[G2`Wo]4Zknm6:=747nHBK:/Fed<*<F1?t!PWCi404GBnUdJVAo<NKKEiR@Y"`
U8OogXKSn:[C<]X]Y)"o_#D4N_tV.L_]H\3^q[Xt]Y(hb\$`QIYH4_$UnF<LR?`tuMhm.?Jc?5W%gELR
%hB-[%K6k9&,d":%K?q:%JgP>%1N^U%1WjWr!jPQ%L`dV$k*LP$OdCM#mgkC#7(P?"pG,5qudW9"pY>:
#7(VC$k*LP%M99e'GgZcnf%ZK)&<np'GD&j%LWXQ$OR1G#Q=r-"oSQ)"U+f/SH/ThlN6tbl2^g)s)e6`
5^.EtH$amcI"$NpJUrH-KnkJ?MN3aYOHPioQ^F52SXuFHU84W_W2Zi"Y-PC@[^`l[]tV;!_o9^=bKS;[
daf8ef\>3<i8`n[kiqC"mdK]<p%J4WqY^?lhZ";hr;?Eep\"4OnaGo5lKRNnj5JnPrZ;(]rZM4ar?;^s
,UF``,palc-R^Dm.P(KM%5':f0f(UC1c@6O3BB8`4Zkno6:=:57nQHL:/Oke<EE=0?t!PWC2@m2Fa8=^
JVAl8NK93eQ^OA:U84cfX08e5ZaI9Q]"5QR^&PkA_#D(i]tM(k]"5A[[Bm-AYH+Y#U8"<NR?s2$O,\pK
Jq&4J%f?k;%f[(>%f[";%fR":%L!:O%1NdWr=&c;%K6hE%1WgV$k<^U%LimG%MoQa%1NdV$Od@M$k!CL
#mgkD#R1M<"U=l-&d8CA"pY>;#71\D$4@7M$k<aZrY,;GpD3`B$54'b&Io9Y$OdCMrWri8"pYA;"U"u3
rWE?."U55;R/m*bp]:Esq>o^Y!c`:&rcJ0`rc\?frd.=dIXZftJUrH-LPUbDNfT6_P*D2tR$aA6SXuOL
U8=`cWN3)%Yd1UC[^`l\]tVA$`Q-'AbK\A]e^i@+gYC]Fj5fCel0Ia)n+-,D#57feqtp<ji;XYlr;6?d
p\+7Mna>f1lfdNnj5JqQg`IRYrZD._rZV4a%4!5G-71#b-7:2j.4QkI/KcZ!0/57=2)I-J3&ru]4Zkno
5se"07nH<H9i+\a<EE<O>[CfHAS,asEH?>LH[gX$LPq.QPEhK&StMgRVl?c!YHbFA[C<]W])KA@^&5YD
]cXo"]"5G_\$`QKYHP%.WMcPbSt).4PEUuaLkUG3I=(r'r"&c:!"]&=!"Jl:rX\r;"UtqN%1WmG%0-k:
%L!:O%LigVrXAo=%Lr@H!=]J:%20*X$jm@N$OR1G#m^bA"pbD:"pOr.&d8CA"pY>:#7(SA$4@7N$OdFR
rXo)Br"T)C%M99_%L`aR$k!FL#m^hBrW`?*r<*<."9eu6#6sl%U&aW_o)S:\!-/!Zs)e9arc_LjH$amc
IXZftJUrH-KnkJANfK0^P*2&rQ^F52SXuIIU8=]`W2lu$Yd1UC[^`l\]tV>"_oBa<aj&/Ze(*%%g=tE@
iT'%_kj%L$md]i<p%J.UqYU0hrqHH\rttb5qtg0bp@\+LnaGl2lKRKnjPf%SgtNqM*rd>^+T<P_,"*\&
,pjrb,pjue-n-Vr.kN>*/h\q61G^mF2E*TU4?Pbh5=%V)7Rp$B9MJ>\;,gOs>?kKBAS,[pDfKoDH$b*o
KntX$NKKEiQ^jS;U84]dX/rD-Z*UjG\,Nr<](`l:\fSDm\$rcQZa$^8X/i4qU8"6LR?`tuO,JgLJq8Du
H2S6O&,m%A%hB-[%K-e9&,ct?%1WjWrXSl9!=fS<%LNXT%1N^U%LimX%K6hO%LigU%1E[R$Od@M$OR4I
#RLeB#lY#0"U##-"T8K4#6kA;#m^eD$4@7N$iUS7%egS7%M9*X$O[@O$OR1G#mgh@#6tD9qud$("TAT,
#R1Rp!3lOu!T*kYEH-%"F8g:]G5c[hH$amcI")'F;h9RRKnkJ?MN3^XOHPioQ^=/0S"61DTqnN]VQ$Vs
Y->4<['d?Q]=bkn_8XF7aNMfPdF-Lpf@\g4hr*PUjlbjllL"$.nac>Fp@nCZqYU3grp9Xerqu]k)uBC)
p@e1Oo'u/8mHWs"kN([^hqm/BfH21V*r[8]+T<P`+p'#8-2o5g,pjrd-n-Sp.k<2'/h\n50f(UC1cI?Q
3]oMf5!M>$77Kd;8P2]P:f1.j=^,-;@:Nk`Ci466Fa&1^JVAl8MiEd[Q'[o/StMgRVl?_tXKMZ.Z2V*/
[J761[JmKOZ*1@4X/W"mUnXNRS<oM+OcPK[LP:>0I=$0\r=8`9rXK&A%LrpWr=8f;r=/u?%LrpX%fHh<
%LrsI%fHh@$k3[U%1WjG%LijW$k3[T$k!IN$k!FMrWrl:#mUY?"pG26"oSQ6"U"u4"pY>:#71\B#mgt<
$iUS0$iUS6$O$kD#m^hBrWWB.#6"f(":,/8"U55;"pYI]!13cdEW1%ZFT6O`G63&8HiABpIXls";hK^V
LPL\CNfK0^P*2,sQ^F52SXuIIU84W_WMur#Y->7>[C3WX]Y;1t_o9X9aihoSdF-Rrf@\j5hVdAQjlbjl
lg=*.nac>Fp%J.Uq>1!cr;Q]fru1n9r;?HhqYBs]p@\(MnaGr6lg!`ukN1a_i!/&ngXt+"+9!>]+9*J_
+oW\b,Zc9=-7'uc-R^Al.P!#$/M8Y00JP@>2)I3M3&s#^4[)%o6:=747nH<I:/Fed<**4,>[UuMAnl.#
EH?8JH[UHsKntYHO->ioR@KkAU8"H]WMur"XKVW.r3QF2qm.BLZ*1@4XK/>"Vkg&[TU_F<Q'7>kNJiUH
Jq8>sH$+3+%fHq;%K[.O%fQq:%fR";%Kd.M%LrCIr=&c;%K6hD%1WgV$k3XU%Lr=G)\!8c%1WdS$k!IO
$k!CL#m^hC#m^_?"pP56"oAH&"UYG=#6kA;#71YA$2t;0$i^Y4$P!LN#mgkC#mU\>"pY>:"o8?."U"u5
"pY><#me3EWrW0>rcA*]s*"Bc*-lgVH[L3iJ:N3%K7er7Ll.(MNf]?cPa7Z'R[QI1St;RKUnjicWN3/'
Y-PC@[CEcZ]tV;!_o9X:aihrTdF6Xsf@o!7hr*JSjlbjllKdm+n+-&Ap%J+Rq>'mdqu6Nhrr)coq]5P/
q=jUVo^q_En*]T/lKRKnjQ,:XhqZu?f@D#crZ;(]ruh:arur7'+s\E[-71#b-71,h.4Qet.kN>*0/,-[
1I!`T2E*WW3]oMg5=.\)7Ros?9MJ8Z;,^Ir=^,3?@:a%cDJsN9GBnObJV&Z5MiEd[PF%W(St;ULUnjof
WN6$"ric.&rNH4%%]cS.Vkg,]TUq[AQ^*bs%$-=&LPLJ4IsZHbF)h*fr=Al;rt#,>rser;r=Al;rsel9
r=&f<%Lr@HrXAl<%K6k;%K-bP%1WgV%LidS$OR7M$OR4I#RLbA#R1S6"p"i1r<*<."U"u4"pb,3!XAr:
rWrK0rX/Q1r<`H/!XT):r!!6,"U##-"9AZ/r<<E2"pbG>$*"!>!<7'<F8g8eG'8(RH$Oa`I!gBlJ:N3'
K8#)9Ll.4QO-#NhQBmo*R[]k>T:r!TV5U>lX0&P1Za7$I\@K8c^;7\(`Q-'Abg"J^e(*%%g=tKAi8`n[
jlksolg=-/nac8Cp%JCZ!;ZWjo_SdfqYBs]*;B1"p%7hFnaGl4lfmZtjlGI\i8<DGg=Y!,+!:J'rZD._
ruq=b'dP%N,pjrb-71)g-n-Vr.kN>*0/,*Z1Bo]n2E*TU3rV5E5!_M'7fGn+8k_rU;,L:m='8d7?t3b[
Ci402Fa&+ZIt<</Lkq%OOcu&sR@Kk?TE1d_rhfaqri>[m+02HAWMcYiU8"<PS=H"4Q'78iNJN@DJq8E"
H$=CNDu:+C&-!.>&-!.>%K-e9&,ctA%1WjW%M&CG!=fS<%LNXT%1NdW%1NdV%K$\D%1E[T$k3RQ$jm@M
%1<LL#m^hD#7(P?"pG5-"9AZ/rWN<,#Q4i,#Q>&%#lb52#Q=o/#6tJ4"o/9."pG28#R:V?#mgmd!0mQa
EW1%YFT-F`GQ)jiH[C-h;LX(FJUrH-KnkJ?MN3aYOHPioQ^F//S"6.CTq\?ZVPpPrXfen6ZaI6O]=bhm
_84"-`lH3Ebg4\be(3.'gYCZCi8N_XjlbmmlKdj*md]i<rq-6`s7Z-[rq7*"p%7nInaZ)9mHs6)l0.<l
jQ#4Wh[/)mg=Os-e']<[rZ;%\rZD1ar#u+drZqmu,palc-R^Dm.P(KM""l5\1&`sj2)I3M3&s#^4Zkqp
6:=737nH<H:/Fed<)ck#>?kQE@qKIlDK0`?H$ashJV&T3Ll7=TOcu&sQ^jS;rh0:cs.oCes/5jl*MT:$
TUq[DR?s2(PECocMhm.BJq8DuH$==NEGfUj%f6b:%fQt?%LrsH%fR":%L!:O%1NdWr!`Z:%K6hF%1WgV
$k<aV%LimWr!j/E%1WdT%1EUQ$OdCM$N:>>#RLb@#7(M<"U"r3qulp$rW`B-n-8mtrs&H+!<`T'":GA9
"pG28#R1P>#RLD9^]:;5rc.sZrcJ-_)L$CNH$amcI"$NpJUrH-KnkJ?MMdIUOHPim6C4%+R[]k>T:r!R
V5C2jX/iD-ZEgjF[^j#_^;.S%`Q#p=aihrTdF-Rrf@o!6hV[8Mj5f=bkiqBulg=-/n+#r=rq-0^qY'p]
rq%3$o'u8=mdBK.lK[TskN(^ai8<GKgY1<2e^`*qrZD.]rZD+^ruq=b%O<;G,pjoa-7:/h.4H_rr[gPk
0/#%71G^mF2E*TU3BTGe5!M>$77Ka:8P2]P:f1.j<EWO1?=72QAnl.#EH?>LH$t0nJq\u9MiEd[PEV8u
R@0S8T)PD]UAC\bUAgeoSt;IBR?s8*PECueN=Ur&LP:;/IslTdF`D><ChikXq[`]:rt#,>rser;rX\o:
r=/c:r!`Z:%K6hG%1WjW$k<^V%1NdV%K6hY%1WdU%L`dT$O[:L$k!CL#m^hC#7(S?#R1J:"p>,,"9J`0
"TAT(#6"i-#PnZ(#Q=r+"Tef1"oAE5"U5/7"pbJ>#R:YB#RC_DXT5s5rc.pYs)e6`s*+Kgrd,u>IXZft
JUrH-KnkJ?MN3aYP*2&qQ^F/0S"61DTq\?ZVQ$VsXfa4ZZF%!H\@K5b^;.S&`Q#s>air#UdF6Xsf@\g4
hV[5Lj5f=bkNV6rlg=*-rpTmWrpodTrph*"naGr7mHs6)lKRNqjlPO]iSWMIgtLE4e^Msoci,$c*rd>]
+TEV_+q#YB,pjrb,pjue-n.Y8.P!)&/hSe20f(UC2)I6N3&s#^4[)(p6:=737n6-E9hnP_;cHh$>?kKB
@qB7eDJsN9Fa&1\It*'(LPUkHO,oEeQ'I^8RK&fVT(\iVSfO>kR@0D,Q'7>mO,]'RLkUG4IslZjGBItF
DJX'"rXSo;r"&f;rt#)=!"Jl:rX\o:"UtqN%1WmE%K6h@%1WgV$k<1G!Y#VKr=0/D%LijW$k!IO$jutA
&IJjO#RLbC#6kD=#R1G:"9eu+"98W)"T/Gs#5eW,"9\l2qZIK7"9\l4"pbG<"pYG?#RLeE$CUt?!!$s:
EW1%ZFT-GJGB\=XH[C-fIXZftJV/T/LPL\ANfK0^P*2&qQ^=/0S"?4DTq\?ZW2Q\rXfeh4Za@0N\\#Mf
^;7\(`l?'@)9^7KdF-Inf%8X0gYCZCi8N_Wjlbgjl07L4li6AOme?2KmN1c_lg*j#l0.<njlPO_iS`VM
gtUQ8f%/C"dEg%\*r[8\*rd>]+TEV`+s&!T,palb,pjrd-n$Mn.k<2'/hSe20ekI?2)[?O2uu$#r]Dht
5sdt-7Ros@9MJ8Y;,L:m='Jm6?t!PVC2@^)EH?>JH$ashJV&T2Ll71NO,oG&PQ-pIQhQpHQQDEWPEV,i
O,]'ULkpb=Jq8E"H[0gXEH,o5C1^sc&,Qk7&-!.>&-!.>%K?q<%fR"8%KHt;%fHh<%LrsI%L<LR%1NdW
%1NgH%K-b@%1WdU%1E^F$Ps3Z$k!FM#mgkD#R:S?"pYD<"pG26"U4Z(rWW$!r<<!"$j?e;"9er5"pbG<
#RC>8!!i]6$47.KLB-95!,qjVrcA*]rc\9b:O.;6I!gBlJ:N3'K8#)9LkpqKNf]?cPa7W%R$sM8StDXL
UnjldWN3)%Y->4<[C3TW]=bhm_8=12`lQ9Fbg4V_e(*%$f\5*8hV[8Mi<eT+jlP[hkiqBtrTjCKrpK^O
rp(TilKRQski_'gjQ#4Wi83>Gg=Y'0e^N!pccsYV*r[8\*rd>]+T<P`+u(>g,palb,pjrd-n$Mn.P!#$
/M8\10JP@>2)I3M2`Wo[4Zknm5sdt.7Rp$B9MS>Z,Z.K><EWO1?=72OAnGdqDfKi@GBnO`It<3'LPL\A
MiE^WOcfU+r0@8Jr0@8F*KcJFO,]-WLkgb>Jq8K$I=$0\F`VJ=DJEcp@:9]D%f?k:%Km:P%LimG%fR":
%KHt9%fQn>%1NdVr!j&C%1E^U%LimW%Lr:F$OdIS$k3UQ$OR7M$iUJ>#m^hC#mU_?#7153!X&W0o*#$r
o)o1""9o&6rWWi;#6kD>#m^eC#mq"I$k2_-JcPECs)7mVrcA*]s*"Bc!dT'<rd4]prdZ#?K7el5LPUhJ
NfT9`Pa%K#R$sJ7SXuIIU84W_W;`hJXg#+:['d?Q]=Y_i^qmq-`Q-'AbK\;XdaQ[rf@\a1gt^fEi8N_V
jQ5LdrojCHrTaCJqs44G+6i%Rki_-jjlGI\iS`VMgtUQ8f@JO%da?CcbfRpI*r[8\*rd>^+T<P`,5rhf
-2o4t,pjrd-n$Mo.kCTN""u;]1&`sX1c.*L3&s#^4Zkqn5se"07Rp$B9hnG[;,^Fq=]o!9?t!VXAo)@&
EH;V4Fa8=\It*$$KnY;<Ll;7ls,[,@plkZ=*KQ8@NJi^NLkg\9Jq8E"H[0gXF)c2;ChdQn@piXC&,Qk8
&,m%?%hB0L%K-e9&,ctA%1WjW%M&CGq[N`<%LijUrXK&?%LrpWrXK/B%LrmV%L`aE$j?tG$k!FMr<Wu?
#mgkA"pbJ="pG/7"9\nl"9nu4"U"r4"o\]1#R:P>#71\7$3(A3$NLO)!6YBBDuObUF8g:]G5ldcGlW3j
Hnp/$J:W9(KnY;;Ll.(NO-#NhPa7Z'R%'S9StD^NUnsreWN3)%Y->7>['mKT]=bhk_&U>/`Q#s>aihoS
cdC4je^i@)g=tE<hV[5KiSihrjT"??kP49?kPjQ`jQ,@]iSi_Phqm/CgXt01f%&6tdEg(]bK7fE*Zk;&
rZ;%\ruh=br?D4d$md5I,palc-R^Al.OtEL#;.Y_0JP@>2%MQ$2E*TU3]oPf5!M>"6q.)F,YCa):/Feb
<)lq$>?kKB@:Nn]C2Rp-EH?8HH$amdIt*$$Jqa2Zs+pW3pl592reMSMLP:G6Jq8E$I=$6bF`hbFDf0B+
An>I\?sHnH&,Qk7&-!.=%fd+=%K6k:&,Zq9%K?q6%K6hE%1WgV$k<^V%1WjE%LrpX$k3XS%1N^R$jm@N
$iUJA#mgkD#RL_A"pP;<#lY#."o\`+"T8N!"TAT("TJ]+"o\]7#RCY>#RC_C#RLbC#mUeE$O[@N$k%pm
h>mRorc.pYrcJ0`s*+Hf8UGf3I"$NpJUrH-KnkG>MMdFTO-5ZjPa@`(R[]k=T:qsSUnt#hWN3/(Y-PC@
[C3TU]=bhm_84%.`lH0BbKS5WdF-Lof%8LXg=k<:hVR/hhu_ltj8J'2jo4<^j5]+Wi8EMLhV?o@g=Y$.
f$i*rdEg(]aiVWD`?$*"+9!>\+9*J`+oEN8,U=Z^-7'rb-RU;j.4Qet/M/S-0/#%71G^mF1cIBR3]]Ac
5!D1t6psL77j1Gr9MJ8Y;,^Fn='8a4?=72OAS,[nDJsN9F*DhRH[U<lrdb-&Kn]J\oSEL%*ef<"Jq8K&
I=6HhH$=CPEH,l6ChdQn@pi\N>?MIIq[WN7rso#=rso&<rXSo<r!ii=%1WgVrsnr9!=fS<%f?b=%LijW
%fQq8%NZ&h$k3[T$k!IO$jm@N$O[:K#mgkD#RCY?#R1M=#lOu-"oSYt"TAW*"oSW2#R:S="pbG?#lG#/
$N1>6$4@:9!.k4@!<7!:EW1%XFBNd1GB\=XH[C-fIXZftJUrH-KnkJ?MN3^XOHPckQC!u-S"#t?T:r!T
V5C2jWN3/(Yd1UB[C3TW]=bkn_8=+/`lH0BbKS5WdF-Ine^i@)f\>09gtprGro!h8rT!_7r8[h9rnn^P
hVR&BgY1<4f@JL$da?Igbfn8OaN)9;*Zk;&rZ;"[ruh=br?=HO,UF``-7'rb-RU;k.4Qhu/M/S-0/,+:
1Gq$H2E*TU3]oPf5!D8!6q'R87nH<H:/4V_;cHau=^,-;?t!OWAS,[nCi=63F*2VNH$amdIt.HKs+:3'
q1nm%s+:6$)Lm0`H[0m\F`hbFDf0B+C1^sc@:!8F=]Z+Eq[WK6rso&>rso&<r=8f;r!if<%LrsI%fHh<
%LimH%L!:O%1N^UrXAr>%1WjD%NZ#f%L`dS$k!IN$OdCN$47(G#RC_B#mgkC"pP;<#lFo*"o/B#"oJQ6
#R:S=#RCYA#m^hC#mpS<#7CnJ$471M$f_5@!<-p9EW1%YFT6OaGQ2sfHN8HmISYKFJV/T/KnkJANfK0^
OHPioQC!u-S"$"@T;&'UVP^;kX/iA*Yd1XC[C3WX]=kqo_8=+/`lH0BbKS5WcdC1ie^i@(f\5'6gt^cC
hr"Cjo\of-rndb5g_\c#gY1B6f@JO%e'cXic-=GTaiDE@_nuBorZD+\rZD._ruq:a!$qOi$RR/G-71)f
-n-Vr/,h+a/h\n40f(UC2)[?O3B9,`4Zknm5sdt.7Ros?8ki&U;,L7k<EE=->[CfH@qB7aC2@d+EH?2D
GB\=ZH[U>BJ,OrjK)U?#Ii3Z]H[0m\GBItHEGfZ1C1_$g@:<PK>?b0/rX\l9r"&f;rt#)=!"Jl:r=Ai:
!t>_M%K6k8%0@"K%K$\C%1EXT%1WgW%1WjG%L*@P%LijW$jd@N$k!IN$OdCNrX'/B#m^hC#RL_@#R1J<
#7(V&#6"l6#6kA<#R:S@#lFu6$47.K$k*LPrX/]8ciBF5rGV[TrcA*]rc\<cs*=Tj;LEk@J:N3%K7el5
LPUhFNfT9`P*D8uQ^F51SXl@ETq\?ZVP^>nX0&P/ZEppF[^`l[]Y2%p_84%.`Q-'@bKJ,ScdC.ge'ln!
f@S[-g=k<9rS7&%rS/1CgY1B6f[n^*e^N!qdEg._bfe,La2\>%_o'=+r>tq[rZ;(]rZM4ar#uXs,UFca
,palb-R^Al.OltJ/Hd[Z0JG6\1CuB"2E*TU3]oPg5!M7u6q'TE7jCW"9hnM^;,^Fn='8[2?=%&K@qB7e
C2@d*EH-&@F`hnPH$T@8oR6[b)gQ^QGBJ%LEH,o7DJX'"An,=Z?s[)C=]\[(;uI7(%f?k;%f[(=%f[";
%fHq:%Kd.L%LrCIr!iN5"q;%O%1EXSrXJu=%Lr=G#Rq7P%1NdU$k*%CrsJc7rsSf5rX&T2rs8W2rs/Q0
r<Dm!r<<Q6#R:S@#m^hD#lY/0$3U_E$k!FA$j-kF$kBrNWrW*:rc.pYrcJ0`rc]-'H$amcI"$NpJ:W?*
KnkG>MMdFTO,uPePa%K#R$a>3SXuIITqnK\VPpJpX0&P/ZEppG[^`l[]Y2%p^r"",`l?'?aihlPc-Oec
daQasf%/I)f\$2WrS.,&rS.>*)VE]of@JL&e'lamdEg(]bK7lIa2Z*9_SX+&r>tq[rZ;%\!$D7arZV4a
%jWDH,pjrb-71)g-n-Vq/,_%%0/#"6r\HGi1c@9P3'')_4Zknm5sdt.7Ros?8k_rS:f1(g;cQn#>?b?=
?t!JTAS,[nCi400EH-&@F`m\-rH\0brH\Bd%<Zf7F)c,:DJj9*C1_#c@prbQ?<g];=&i7!;>h%&%f?k:
%f[(>%f[":%fR";%L*@O%LijW%f6\9%LrCIr!`o?%LimW%LimWr!ir@%L`dU%LrsH$O@.J$OdFO$OR7?
$3(;2$3(;2$2t2.#lY&*#5ni,#6kJ@#RC_B#lY/0$4R@N$k!FM$k!IO%1NdVWW9a5!,haRrc.pYs)e9a
rceBfs*O`m9R_MBJUrH+KnkG>MMdFTO-#NhPa@`(R%'S9StD^NUnjicW2ZhuXfen6Za@-K\@K5a]tV4s
_SX:2`lH0BaihoQcd1"edaQ[qf%0iPrRgbrrR_,%)qWZle^`-tdaHOhc-4DTaiMQD`l5j4_8*du*W7&Y
+9!>]+9*J_+oNVa,Rl%H-7'rb-7:2i.4Qetr[eX50/#%71G^mG1c@9P3BB5#4:XP@5sdt.7Ros?8k_rS
;#X<+<)lq$=^,-;?smDQAS,OhCi"!,DuXhVF8^7RGPuY(F)u>@Df9N2Ci!iuARf4Y?s[/E>?P$-<)ZXk
%fHq8%fHq;%f[(>%fQq:%fHq:%L*@O%LijW%f$S5%KR"KrXJl;rXAr>%1WjF%K[(L%/p\E$k3XS$k!IN
$O[@N$iUM3#m(A=$2t5/$1nK$$3(;2$3(;0$3(A3$OdFO$471L$k!LQ%Lilr!0mQaDZ4SREW'tYFT-I`
GQ)k`H[L3iIXls"JV/Z1LPUbDNfK0]OHPcmQC!r,R[]k>T:r!RUnsreWN3)%Y-,"7Za@-K\@K5a]Y;+q
_8=+/`l?'?aiV`Mbg"J[dF$CjrmUkso%*fjrmMG,da?Cec-=JUbK7iHa2Z*;$,XQq^qRLp],_pk*r[8[
*rd>]+TEV`+qQ"F,palb,palc-R^Dm.P!%K/NPL:0JG491G^mF2E*TU3BB8c4?bto6:=417Ros?8k_rS
:f("d;cHau=^,*8?=7/L@q0(^Anl'sD#S>ODt\2LEW0nUDAm>-C1_'hARf.W?s[/E>?P*/<E)mo;,C!t
%fR"8%f?k;%fQt?%LimG%fR":%Km4N%LimH%fHh<%LrsI%L3FQ%LijU%LrCI!t>\L%K$\I%1WdT%1NdU
%1<RP$Od@M$NLV7$iLG1$2t5$$2t5.$2t;2$P3^T$OR4L$OdFQ%1E^U%1E`^!2ontDZ4SREW'tXFT6Oa
GQ)jhH[C/>IK4otJH^[[KnkJ?6Age`O-#HdPa7W%R$sJ7SXuIIU8"K\VPpJpX0&P-ZEggD[C3TU]=Ybi
^;.S%_o'I5a2c9CaihoPc-=S\dF$CjrR:GirR:bo)q!'Zccs_Ybfe,MaN)??`P]U0_8*du]Xt]p*W@,Z
+9!;]*r[8]+TEV_+oinf,lf:k,mYhF-R^Dm.P!%K/Hd[Z0JG6\1E&),2E*TU3BTDe4?btq6:=427Ros?
8k_rS:B"*+;cHau='8a4>[CfG@:NeYAS,OhC2@_bDY7rHDZ4GYC2.?mAS#@]@:0[T?<g`<=]\[(<)ZXk
:ej^p%fR"8%f?k;%fQt?%LrsH%fHq9%Kd.M%LrCIr!iN5$4RIT%1N^U%1WgWr=/Z7!Y#VLrXB8G$k3RP
$k!IP$4@4Mr<rQ2q[*9.pB^U%r<iK2!t5PF$N1A>$O[@O%LijU%LoN?])_kKrGV[TrcA'\rcTW4GBnI\
H[L3iIXls"JV/T/LPL\CMN3^XOHPimQBmo*R[]k=T:[F'U84W^W2Q\rX0&M.Yd1XC[C3TU\\,Sg^;.P$
_Sa:2`lH0Aao9H`bl5leci2>hdeqSldf.YncPk'Qbfn8RaiMQD`l?!8_ns7*^qRLp]=GEl*W7&Y+9!>\
+9!D_+oNVb,l]1j-5%UN-71)g-n-Vq.k<2'/h\k30`Ej52)I-K2`NfYrB),b5=%V&77B[97nH<H9heG\
;,L7j<E3+%>?b?=?=<b@!+Z">s(;7FqeZ1Jr+u@Iram*\ARf4Y@:3DJ>[(E8='&C$;c?Oj:ej_Y%Ls$K
&,Qk6&-!.>&-!.>%K-e8&,ctB%1NdW%1WmF%06qJr=/i;%fQn?%LrpX%K-b:%K$_9%K?k:%K?q<%K-Y:
$jm=LrXA`5r!Ms#q[*<2rX0DK$k!CL$k!FO$O[CP%LrpW$k<^VRK1V5rbh[Qrc.pYs)e6`rc^8GH$amc
I"$NpJ:W9(K8#)9Ll.(MO,oBcP*D2tQ^F52S"6.CT;&'UV5C,hWN3)%Y-,(9Za:XY[^N`W]=bhj^;.S$
_Sa:1`l?'>aN2KFbKKn/r6>&`r6>5brlZ,"aiMQDa2Z*;_ns:,^qd[t]Y(ke\@/gE*W7&Y+9!>]+9!D^
+oNSr,U=Z^-71#b-71)g-n-Vq/,h.#0)mRJ0ekI?2)R3K2`E`W3]oPg5!D1s6:=427Ros?8kMfP:/Lpe
&5uP-<EE7)>?b?;?=%#I@:B.Fr+5\9r+5k;ra?UN?s[/E>[(?6=&i7";c?Oj:f'n]9M.nU%fHq8%f?k:
%KI"B%h9'Y%K-e8&,ct@%1NdV%K6k8%0@"K%JpV@%1N^S%1NdV%fHk7%Kd.L%Li=G&.T*W%1<OP$O[@O
$47.K$k2q>q$Qp*rX9DI$OR4L$k!IP$OmOR%LrpW$k*.H%K6im!9!qWDZ+MQEW1%YFT6O_G63&8HiACZ
IXZftJV/T/KnkJ?MMdFTO-#NfPa7Z&R$sM8SXuIIU8"H[VPpJnX/iA*Yd1R@['d<O\@K5a]Y2%n^qmn)
_o'In`rF*YaT'B\bOWmVbPoW_a8j9[`Y$2-_ns7+^qROr]Xted\@/fPrZ1qYrZD+\rZD._r?;.arZht"
,pjrb-71)f-n-Sp.P(KM'eV*l0JP:<1Gq!G2E*TU3BB8c4?bq?5=%V(77Ka:7nH9G9MJ8Y;#X<!;cHas
='&O/>?kG4?N4F3@Idq-@K'[6?3"70>6\53=&i4!;uTW!:ejb[9M.lHrXSl;q[WN7r=/l>%hARJr=8f;
r!i]9!t>_L%K6k8%06qJr=0>I%LrpW$k<^U%LimW%LimE%Kd.M$k3+E$4[IR%1<OP$O[@OrX/Z5r=&6)
rXAc6rX&W6rX/o=$O[CP$kE7G!t5YL%K-e.!.k4C!<$g6DuObUF8g:]G5c[oH$Oa`I!gBlJ:N3%KDpQa
LPUbDNfK0^OHPioQC!u+R[]k=StD^NUnjiaW2ZbsX0&P/Yd:[C['mEQ\\#Jd]tM.q^qmn)_u@XT`rF*Y
aSj6YbPKE[ao9?ca2c3>`Poao_@FDt^qRLq]Xt_b[^NTNZi(pC*r[8\*r[8]+T<P_+p]G>,palb,pao;
-NtnI.4Qhur[e7*0/,(7r\G3F1c.*L3&s#\4?Yej5!M>"6q'QC7gDXY9MJ8W:f.Hp;,^Cm<E3-"=oV_+
>lJ(.@.dt+@/aI:>[1K;=]ni*<<?,u;uTW":ej_Z8kMZF8,Wqr&,Qk7&,m(=&-!.>%K-e9&,Qh=%1WjW
rXSf7!=fS;%KR"KrXB)@%LijW%1WjB%Kd.M%Li=G"V)"N%1N^E%0$_8%/pV4$hXr+$NLM>$471M$O[@O
$iUS:$k<dH%0I"K%1W4FSH-h5rGMRPrGhgXs)e6`s*+Hf!df9ArdFitrdc5FKnY;;LkpqKNfT9`P*D8u
Q^F/0S"6+BT:r!TUo(#fW;`gtXV.e>ZEggC[C*HQ\@K5a]Y2%n_#D.M_Z%IQ`W*sWa8<sSao'6Ya8a0Z
`W!af_SO((^:q:n]Xted\@ArS['R+;*W7&X+9!>]+9!D_+oEMa,lT(i-N5:u-7:/h-n-Sp.k<2#/M/S.
0JG4;1Gq$H1cI?Q3BB2a4Zkhk5=%V(6q0X97nH9E9MA/U:f.-g!)rkr!*0#"s&oA+r`o>,qI'5-rETA,
s&o>&"'&<";uTW":f'n^9h\5P8cD6Y%fHq7%fHn>%h9*K%g!4N%K-e8&,Qh=%1WjWrXS`5r=/u?%LijU
%/gY:%1`=Gq@3T:%L`dF%0-n;$igb9$i^Y8$iUS3$Mk/.$N1D5$i^Y7$NghH$kE7Grs\o;!"Jc7M?)K5
!,VUOrbqaTrcA'\rc\<cs*=Tj#(1fIIXls"re!(^LPL\CMN3aYOH>WiPa7Z&R$sM6SXuIITq\?ZV5C2j
WN3)%Y-,"7Za7$H[C3TT\[f>b]EZ'`^;.P#_>_=N_u7RI`r*gT_uIUR_>_4_^:h4m]Xt_b\@AuT[Bm3F
Yco,G*W@,Y+9!>\+9!D_+oEMg,U=Z^-71&<-3bhG-n-Vq/,_%1/h\k30ekI?2)R3K2`NcW%6?U64Zknl
5=%V(6q'TE7gVaY8k_oQ9hnM]r_`\os&Attr`B&$oiq>sr`B,"s&Atrr_X2&:ej_Z9MA&M8Ol9?77@ac
%fR"8%f6e:%f[(=%f[":%fHq:%Km4M%LimH%f6\:%LimH%K[(K%fQnE$k<^U%LimW%1WjC%Km4M%L`dF
%K?q<%/p_8$iLM,$iCG4$i^\9%/pb9%0R(J%LimD%K[(L%e]mS!:^'hD#S>NDuObUF8g:[G5lddH2i6k
I/eZpJ0]\uK8##7LPUhFNfT6_P*2&qQC!u+R[]k=StD^MU84T]VPpHmWtVV;Y->4;Za@*I[^N]U\\#Jd
]tOEZs1nZNrPJKM!5nZPqnrEMrk\WMrk9&Z]Y(kg\[]/X[^EKLZa-g<XrJG\*W7&Y+9!>\+8m>^+oNVb
,l]1i-42%G-7:/h-n-Vq/,h+(/hSe20JWP_(,[p*2E*TT3BB2`4Zkhk5=%V&6q'R7r^R5c8kMcN9hnG[
r)*Jms&AqsqcEVsqcEbsr`&nrrD<kt:ejb[9MA&N8cD3`7R]^5%hJXLr=Ac8q@ET9rt#,>rsel9rX\o:
":YeM%1W:Hq[EQ9%K-b<%1NgH%0-h8%L*@P%LimW%J^J9%1WjVr!iZ9rs\i8q[<6/q[<B4rXAf:r=&l<
$k<aVq$mK9%Lim-!/1CSCi""gDZ+MQEW1%YFT-I`GQ)jfHiABsIXZftJUrIQKf+XALl.4QO,oBcP*D8u
Q^F//S"6+AT:_jPUnjiaW2ZbsX0&M,YctF>Za@-J[^N]V\\#Jdrk8<Fs1nTLn\Y7@rkSQJrk0#Y]Xted
\@AuU[C*BJZa-g<XfWQ_r>khXrZD+\rZD+^ruq=brZh[o,pjrb,prU="XkfK.P!%K/HmaZ0/,(7r\G<I
1c.*L2`WlZ3]oPf5!D1s6:+(/77R8H#t[]\8k_rR:/4X_;?'Sn<:Nue<;oho;$p,r:/4MW9M.oK8cD3a
7R]^364XV*%fHq8%f6e:%fQt=%fQq9%fR"9%Km4N%LimH%f6\9%Lr7ErXB#>%LijW%0[4O%1WjWq$mN:
%1WjVq[NQ8r=&3*r=&Z8r!`c;$k<aVp^RE9%LimXciBF5s(qUNrGV[TrcA'\s)nHeGBa%307/%nI"$Np
J:W9(K8##7LPUhFNfK0^OHPimQC!r*R[T_:St;RJTq\?YV5C2iWW&q,Xf\b1Yd1UA['[6K[f3c:\c05?
]`,VA^A,M@^AbhF]`5VD\c0)F[^ENM['R*EYcn>7Xf\Y)*$"ksr>tq[rZ;%\rZM4ar#ub!,UF``-7'rb
-7:/h-n-Vq.kCTN"YMG]0JP<]1D_o*2E!KR3&s#\4?Yeh5!M7t6:+(/77R5G!_GsUr_*;dr_EGhpegfb
s&&Vir_WVis%WJd!_Q$UrC7/`77BU26:!gH&,Zq9&,Qk6&-!.=&-!.>%K-e8&,Zn?%1NdW%K6k7%0@"L
%K-b<%1NgH%1EXT%LimX%1WjW%LrsB%KHt;%fQn3%JUG.%K6e9%f["4%L3FQ%LimX%1^&OWrW-8rGMRP
rGhgXrcJ0`rceBfrd+isI"$NpJ:[]P,__#/LkpqGNfT6_P*2&qQC!r*R[T_:SXuIITq\?YV5C,gWN#lt
$E^J6Yd1R@Za@*IrjMj:s1/-@rOi!?rP&*@rOi0Brj`<E\@/iR[C!<IriuX1Y-+o+WrT-u*;poV*r[5]
+9!>\+9*J_+oEMg,U=Z^-71&<-3knH-n-Sp.P(KM"thM]0JG49r\GBK1c.*L3&ioZ3]oPg4?bqn5s[h*
6q'R7rC6iZr_!2as%WJfrD;oZrD<Mhr_3Sj9M.oK8OreNr^I,]6ps@-5sIR4&,d":&,He6&,m(=&,m(=
%K-e8&,Zn?%1NdV%K6k7%0@"L%K-b<%1NgH%1N^S%LijW%1NdV%1WgVpC@34rXSl8q$m$,r=&]9rXJW4
rXB)B%1NdV%1WiI!58I4D#A2LDuObUF8g:\G5lddH2`0jI/eZpJ,k0"K-Z/+LPUbDMN3aYOHPckQBml)
R$sM6SXuFFT:r!RUnsodW2ZcqWt)86Y->.9ZEpmE['d<M[f3f9\c'/1]`#GB]DfA@\Gio@[C*BKZa6t:
YQCu0Xo>@%WMoe9r#P_WrZD+\rZD+^ruq:as!7Ujr[%Ukr[%jt-n$Mn.OltJ/HmaZ0/,(7r\Fm=2)I3L
2`E]V3BI+$$U-a=5s[h(6q'O67f>jW8cME^9`@cb:@V0Y:B!uf9`@Za8c;-Z7fGg]6pa4+5<h=orX\o:
r=Ac8q[`]:rt#)=rsel9r=Af9":YeM%1W:Hq[ET:%1W4F!t>_M%1`mW%LrpW%LijW%LimX%1W"@rXJf9
nI5=*rXJQ2!"Jo;#7V.Q%1WjW%atEC!;p[4DZ+MPEW1%YFT-I_GQ2sgHiABoIXZhHJH1?%K`Ho-L^&`s
NfT9`P5^[]QC!r*R[T_:SXuIGTq\9WV5:&dW2ZcqX8f=%Y5ba+ZN%91[/RK4[f!Z.\bru9[f<c6Zi[S?
ZMq'.Y5YR&Ws#E#W2?Hi*<$uW*rR2[*r[8\+T<P_,5rhh,pao;,lf:k-NGRo.0:tL/,h+#0)dL*0JP<]
1E/2.1c@9O3&ru[4?Pbi4?bqn5s[h(6psI47Rm;Gr^m)]r(QiZs%WDbrC[)]qaUWUr^?fTr^$iU5<h=o
4?Yk*&,m(;&,He5&,m(=&-!.=%K6k9&,Hb<%1WjWrXSc6!Y,\Lr!ic;%M&II%L`aU%1NdV%1WjW%1WjW
!"JH.oaUC#!"Jo;!"Jo;#7V.Q%1WjV%);kA!;p[3DZ+MPEW1%YFT6O`GQ)mfHiJKmIK4otJLH/)KnkG>
Ll.(MO,oBaP*2&qQC!u+R[]e;SXuIGTq\9WUnsobW2Q]oX8f=%Y5ba+ZMh-0[/IE0[e[H0[f3]6[/RE3
ZN%0.XoPU&Ws5Q&W2QSiV>M>3*WI2\*rR2[*r[8]+T<P^,6&qf,lf:k,mbnG-R^Al.4Qetr@J1*/h\n4
1&`sL2)R3I2E*QS3B9,]4?Pbh4?bto5s[h(6psI47Rm8FrCQlYq+UWWr^luW!_,XJ!(HlT!(-ZN#<tC9
4?Pbh4T#`g%fHq7%f?k:%fR"=%f[":%fHq8%Km4M%LimG%f6\:%LimF%K[(L%fHhI$k<aV%LrpW%LrpW
%LrpWnIFdnrseu<rXAi;rXB)B%1NdW$k3ZJ!4r7/D#J8LDuObUF8g:\G5ldbGo1mTI!gBlJ:N3%K7el3
LPL\AMMdFTO-#G/P*2&qQC!u+Rf8ceSXuFFTqS3VUnsobVPpJnrN#t#s/uC+rNcF/rj;I.s0h^1rNuR1
rj)R.s/u@'rMp1&W2QSjV50pb*;poU*r[8\*r[8\+TEVb,5i\u,U=Z^-71#b-71)f-n$Mn.OltI/HmaZ
0/,(7r\OO2))O602`NcW3]]Ac4Ztnk5!M7t5sdn+6q'QC7f,^N8cMEX8btsV7fPpW7/fL\5s[_"5!1qj
4ZkbdrX]#>r=8`9q[WK6rsnu<rso&<r=8c:q[N`<%1WgVr=8]6!"Su;r=/l<%1`=G%L`aU%1NdW%1NdW
%1NdWr=.`rrso#;rso&<rXK2C%1WjW%LrmUrXG:rc2[i[rG;CLrGVXSrcA'\rc\<crd"Ki!doBErdY]6
JV/T/KnkG>Ll.4QO,oBaP*D2srg*hVR[T_:SY#hQ!20IgU87db"K&,rWN#iss/l:'rilC-rNkt"r3QC.
rilF*s/l4"$E:#'W2?DfUnj_(r>b_Ur>tnZrZ;%\rZM4aq]Z(e,UNF:s!@[ls!Rgp"=YcL.kCQM""l5[
0`Eg+1BTKk1cG=l"#r;$3rV5K4Zkhj5!M7t5sdp;7/fXS7cm5?7fGjV7/oUQ5n#tB5!D(k4Zkhf3]RcM
&,Zq9&,Hb9&,Zt<%fR"<%f[":%fHq8%Km4N%LimH%f-V9%LrsF%K[(L%fHhD$k<aV%1WjW%1WmI%K6k:
%H\0"%K6k;%K?q;%0d:P%1NdW%/gV8%Yk&C!<6j4D#J8MDuObTF8g:\G5c^cH2i6jI/eZqJGt*"KDpQ2
LPUbDMN3^XO-'@("-f+;Qi<?\R[]e;St;RHTqS3TV#I1jVZ*OoWVrjtX8]7#Y5>HoZM^s*Y5YR%X8](-
W2QSjV59u`U8"?R)]S\pr>khXrZD([rZD+^rZV4arZqLis!I^k!%.[m"t1oL.Olr!r[n+%"YVP`0f(Tp
1G^mG1c@6N2`NcW3BI.%!'U<Ds$$HIr^$NMr^?WPnj`OGrC$WOs$?ZLr]UcR4?Yhi4?>M`3B/r/&H!(;
%fHq7%f6e9%f[(>%fQq:%KI";&,Qk:%K?q<%K-e5%0@"K%K$_9%K?q:%0-h9%f["<%fQq:%fQq7%e:),
%fHk9%f["<%fQq;%fZt9%0I(M%1_t0JcPECs(hOKr,2LPrGhgXrcJ-_rHJ9es*OcnrdOlts+13&s+UH-
&;Z4$NfK0]OH>WiPa7W%Q^Ic@$(IKVSt;RHTq\:\U]@7jVZ3UpWV`apXo#:!YkbO#Y5PL#X8f0uW;iap
V>d7pU7n9QT,SaI*;giV*rR2[*r[8\+T3J^,6&qf-3#=l-3#=l-iPLs.4Qet/,_%(/h\k30JP<\1C5oq
1c@6N2`NfXr]1'B4o[\F4T@VE5Q3tI6Mj1C7JfLO6N0:N5Q<qH4T@SE4T7AE3B/uW2uaHe&,Zq:&,He5
&,d"<&-!.>%K$_7&,Qk:%K?q<%K6k6%K6h;%JpV:%1WmH%K6e9%f[";%fQq9%f6_-%f?b9%K-e9%K?q<
%K6k;%/^P;%LijW%\3UC!<6j3D#J8MDuF\TF8g:\G5c^bH2i6kI/\R9J:N3%K7el3LPL\AMMdFSO,oBa
P*D2sQC!r*R$sKQS"#t?StDXKTq\9WV#I4jVZ3UoWVW[mXn8dnXno*uWW&jrVZ*ClV#I(mTqS*MSf8XG
*;poV*rR2[*r[8\+T<P^,6&qf-3#=l-3#=l-iYUp.K:mt/,_%(/h\k30JP<]1]B6=1c@6N2`NcW3BB5#
4T@SE4T7PD5Q*nF6M*\C6N'4L5Q<qH4T@SD49.GA3<hH&2`<Q*&Gm":%fHq;%fHn7&,m(<&-!.>%K$_7
&,Qk:%K?q<%K6k5%0-n;%K$_9%K?q9%K?k:%fQq:%fHk6%eL5-%fHk9%f[";%fZt9%K6k;%K6ip!8[_T
C]&#HDZ"GPEW'tXFT-I`GQ)mfHiAEmIfFrtJImHdKnY;;LkpqGNfK0]OH>Y)PQ7$KQNihGR[]e;Sc52^
T:qtXUAq%hV#[@kVZ*OmWTgJ]WW&jqVZ3LmV#I+gU&UbaScPCOrYtbTr#P\VrZD([rZD+^ruq:arZqLi
s!I^ks!Ians![mrs!n%!r@J"%r\"7*r\=C.s#'g5r\ag:3&pmts#U-Ar]U6CrBC*Cog/I>r'(*Br]U9D
s#U->s#C$;r\ad62?"0b&,Zq8&,He5&-!.=&-!.=%K-e7&,Qk:%K?q<%K6k5%K?q<%JpY8%K6k8%K6e8
%fHk6%eU;.%f?e8%fQn8%K6k;%JpV8%JBdR!:^'fC]&#HDZ+MPEW1%YFT$C_GQ)mfHiAEmIfFrtJJNlj
KnY;;LkpqGNfK0]OH>WgPa%K"Qi<BPRfAlWSc>;]TDkPaUAgtgV>[:iW;<InX7r[lWVi^oVZ*FlV#I+f
T`UjYT)P;\S,F<(*;giU*rR2[*r[8[+TEV_,5rkf-3#=k-3#=l-iYUp.K:mt/,_%(/hSe10JG6Z1Bo]o
1c.*K2ZPf93<)#<3r_>@4oIM>55%5<55[PB4oRSD3rV/=3!)#t2Z>Q52>n*a&,Zq9&,He4&-!.=&-!.=
%K-e7&,Qk:%K?q<%K-e4%K?q<%JpY7%K?q9%K-_6%f-Y.%f6_5%fQn7%K6k:%JpY8%H@GB!<-d6C]&#H
DZ4SQEW1%XFT-I_GQ)mfHiJKmIfFruJc:<%L&Zr.M#WA4NrP1?OT1LDPlI'LQiEHPRKAtLSc55\TDkPa
UAgteV>[:fW:m4fW;`[oVZ*FkV#I+gU&L\aT)YA]S,\rT)uL]R*W@,Y+9!>[+9!D^+oEPa,lT+i-N>Ck
-N>In./tar.fV$t/cRI'0E3a+1&Ng/2)I/h2ZG`83<)#<3rM2>4o.;755RJ?4oRSC3rV/>3;tl:2ZGW6
2?,K1&H!(:%fR"8%f-_8%fR"=%f["9%f?k7%f["<%f[":%f$S5%KHt7%fQq;%f-Y5%/LJ-%JpY5%/UM5
%f["7%f["<%aY3C!;pX1D#A2LDuO_VEW1%YFT-I_GQ)meHiJKnIf=ltJcCB%L&Zr.M#WA4NrP1?OT1LC
PQI/;Qi<BPRfAlVSc>;]TDkP`UA^ndV>@(_W;<CiV>[4hUApqdTDtM^SHPFOR[TWA)uL]R*W7&X+9!>\
+9!D^+o<J`,l]1i-N>Cl-N5Cm./tar.fV$t/cRI&0*3g^1&Nj-2?#H42ZG`83;tr:3rM2;4n^u<4o7D@
4T.>?3WD)<2ubf82#fH41].g^&,Zq9&,He5&,m(<&,m(=%K$_7&,He9%K?q<%K-e3%K?q<%JgS6%K6k5
%JgM,%f-V0%K6k;%J^J:%1NdW%D;bB!;gR/D#J8LDuObTF8g:\G5c^bGlW0kHiAElIfFruJc:<%L&Zr.
M#WA4NrG+>OT1LDPlI'KQiEHQRf8fUSc55[TDkP_UAC\XV>I(eUA^ebTDkG]Sc>2ZRf8]SQhqa!*<.&Z
*W-uX+8m8[+9!D^+oEP`,lT+i-N>Ck-N>In./tar.fV$s/cRI'0E3a*1&Wp-2?#H32Z>Z73;kl63qPQ3
3rM);3;tl:2?5Z72#fH21]K3,&Gm":%f?k6%f6e9%fR"=%fQq8%f?k7%f["<%fQq9%epM5%fQq4%fQq9
%eU;&%K-e8%JUG5%K?q9%B9EB!;^L/D#A2LDuF\TF8^4[G5c^bH2i6jI/\TpJH(3#KDpT)L]<20MZ8_:
O8k=AP5gdGQN*<OR/WQRS,SuXT)G;[U&(MUV#6teUA^ebTDkG]Sc,&XRfAcTQiEBJ)uL]R*W7&X+9!>[
+9!D^+oEP`,lT+i-N>Cl-N5Cm./taq.fV$t/cRI'0E*[*1&Nj,2?#H32Z5T73<(u73V5B/3W1r:2uY`7
2#T<11]K300_u@Y&,Zq9&,He4&,m(<&-!.=%K$_7&,He8%K?q<%K-e3%K6k:%JLA2%JgS,%JgS5%JUG3
%K?q8%FY<B!!$a1C\qrGD?+VSDuObTF8g:\G5c^aH2i6jI/eZpJH(3#KDpT)L]<21MZ/Y9O8k=@P5gdH
QN!6MR/WQSS,SuWT)>5XU%>#TU&CV^T)P;[S,SlUQirbBQBmd3)uCWQ*W7&Y+8m8[+9!D^+o<J_,l]1i
-N>Cl-N5Cm./tar.fLss/cIC&0E3a*1&Ed,2?#H22Z,N23;,B33Vk`62uPZ62#]B01BfKf0JG-jq[iW8
r!rZ9q@<B5rXSl;rso#;r!rZ9q@<N7rXSr;r!rH1rXSr;rsnc5q[N-,q@3-.rXJi:q$k+>VuZj3qeQ(F
rGMOOrGhdWrcJ-_!-eHerd"Kird=`prdb$"re(6)s+gW1rJLW8s,[2Arf[8Fs-EYNrg<\RrL<bVqk!5J
r1<hWrL<eTrg<_Prg*SKs-!0srZ(nWr>keWr?(tZrZD+^rZV._rZqLir[.Xkr[.Xms![mrr@7gtr@S"$
r\+:*r\=:+rAFO1q_mk$r&4I0r\X[5q_S7,r\4@*s"=<^q[iW8r=8`9q%!94rXSo<rXSo:r!rW8q[WQ6
rso&<r!rE0rXSl9ndamor=/`9pC7-4XT5s5s(V=FqeZ4Kr,;ORrH%s[rc\9brd"Kis*Xfprdb$"re(6)
reLN0s,-f9rf@)@rf[;Grg*MLrg<\RrL<\Tm%4-Gr1!\Srg<YNs-EYK!g8_.p`')Mr>keWr?)%\ruV.]
rZM1`q]c%cr[%Ojs!@Xks!Rdos!dstr[[mur\"4(r\4:*q_S1.q_[Xtr&"=/q_S1*s"OF*"YMDZ%hB6K
&Gm":%f?k5%f6e9%fR"<%f["8%f?k6%f[";%fQq8%eU;1%fHjr%KI":%K6k1%K6j+!6tTDC&;]CD#A2K
DuObTF8g:\G5ZXaH2`0iI/eZqJGk'!KE$Z)L]3,0MZ8_9O8b7?P5^^FQN!6LR/NKOS*QXBS,JfSR/WHO
QN!-JP5gX=)uCWQ*W-uX+8m8[+9!D]+o<G`,l].i-3#=j-3#=l-iPOn.K:mt/,Lpt0)dO'0`Eg&1]0,r
2#B0+1]B-.0`Ea)0)mO&&,Qq8&,Zq;&,m+9%f6e8%fR"<%fQq9%f6e4%f["<%fQq7%eL5/%f?e%%f6_6
%eL5.%Yk&C!<$X.C]&#GDZ+MPEW'tXFT$C^GQ)mfHiAElIf=lsJcCB%L&Ql,M#WA3NrP1>OT(FAPl@!J
QiEEMR/!-FS+rHMR/NBMQN!-JP5^RBO7jOj*;^cT*rR2Z*r[8[+T<P^,5rke-2o7j-3#=k-iYRp./k[q
.fLsr/cIC$0E*['1%R3r2=iX&1&Wg*0E*U$/c?4V&H!(9%fHq6%f-_8%fR"=%fQq7%f?k4%f[";%f["8
%e'r&%epM.%e1#*%fQq/!.k4C!;pR-C]&#HDZ"GOEW'tXFT$C^GQ)meHiJKmIf=lsJc:<%L&Ql,M#WA2
NrG+=OT(FAPl@!GQhm*HRe`EJR/E<LQN!-IP5^RBO8k75)uL]R*W-uW+8m8[+8m>]+o<J`,lT+h-N5=j
-N>Im./k[q.fCmp/cRF'0)[I&0`*Tc1]0!+0`Ea(0)I7#/,TqS&H!(:%f?k5%f-_8%fR"<%f["8%f6e4
%f[":%fQq7%da_s%f?e,%JgS6%K?p/!6YB?C&2WBD#A2LDu=VSF8g:[G5c^aH2`0iI/\TpJGt-!KDpT(
LB*/1M#WA3NrG+<OT(F@Pl6pEQgU7;Qi36KPl6dEOT(=?NW=t0)uCWQ*W7&W+9!>\+8m>]+TN_`,5rke
-3#=k-2o7j-iPOn.K:ms/,Cjs0)RC$0`!Nl1\rj)0`<['0)I7".f_'s&,Hk7%fd+<%fHq6%f-_8%fHq;
%fQq8%f6e3%f[";%fQq6%aPU]%KI"<%K6h;%>k/B!;gL-C\qrFDZ+MPEW'tWFT-I_GQ)meHiAEkIf=ls
JcCB%L&Ql,M#N;2NrG+<OT(CCP5LRAQKsn7QMZpFP5^RAO8b1>MY.qc*;^cT*rR2Z*rR2[+T<P],5rkd
-2o7j-3#=k-iPOn.K1gr/,Cjr0)RC"0^CIj0`*O%0)@1!/,q*r&,Qq8&,Qk8&,?_8&,Zt;%fR"<%fQq6
%f?k4%fQq:%fQq5%b(sa%fHk9%f["3!.k4@!;^F+C\qrGDZ+MOEW'tWFT-I^GQ)meHiAElIf=lsJc:<$
L&Ql,M#E51Nr4t:OSk::PlI'CQMHdBP5UL@O8Y+<MZ/G')uCWQ*W7&W+8m8Z+9!D]+o<J_,lT+h-N5=j
-N5Cl./k[o.KD"!/,1^o0).*l0_mC!0)7*t/,h$t.JaSO&Gm"9%fHq5%f-_7%fR"<%fZt<%JpY4&,6Y5
%K6k8%JUFn%JLA2%K-e9%K6jt!/1FPC&D]AC\qrHDYnANEW1%XFT$C^GPugdHiAElIf=lrJc:<$L&Ql+
M#N;1Nr>%9OSY..Pl-^EP5LF>O8Y+<MZ/G3L[lD]*;poT*rR2[*rR2Z+T<P\,5rke-2o7i-2o7j-iPOm
.K1gq/,(Xo0)dKk0D[<q/c@4!.fLms./=DM&Gm":%f6e5%f$Y7%fHq;%fQq7%f-_7%f6b8%K-e8%J1.u
%J:5/%K-e9%K$^_!13c^C&2WAD#J8KDuObTF8^4ZG5ZXaH2`0iI/SNnJGt-!KDpT'L]*&-MZ&S5O8G%'
P5::<O8Y+;MZ8M4M#N2#)u:QQ*W$oW+8m8Z+8m>\+o<J_,lK%g-N5=j-N5Ck./bUn.fCmk/ab7h0(ggp
/,^sr.K1ak&,Hk6&,d"8&,He3&,d";&,m(<%JgS3&,$M3%K-e9%K?mm%f?e7%fHk5%_VkC!!$[,C&2WB
D#A2KDuF\SEr^:\FT$C^GPugdHi8?kIf4frJc16#L&Hf)M#E5.Nqnb+OSFn6Nr=k6M#E,-K`E%`)u^fR
*;giT*rR2Y*r[8[+T<P\,5ied-2f1i-2f1i-iGIk.K(an/)W#V/,h!u.fCgp./bOf&,Hk7&,Zq8&,6Y2
&,m(;&,m(;%JgS2&+pG2%JpY2%JgS0%epM1%fHk0%]TNC!<6^-C&)QAD#A2KDuF\SF8^4ZG5ZX`H2`0h
I/\TnJGt,uKDpT'L\uu+MYW:tO8=n7MYr;/L])r,KDuk[)uCWQ*W-uW+8m8Z+8m>\+o3D],lT+g-N5=i
-N5Ck./YOl.fCmr/*\__/,Ump.K([n-iYOf&,?e6&,Zq8&,?_2&,d":&,m(;%JgP7&,Qn1%f?e3%dFN"
%f?e.%f['g!0mQaBD?3;CB/2JD#A2KDuF\SF8U.YG5c^aH2`0iI/SNmJGk&tKDgN&L\uu)MWBfpMYi5.
L])r*KDuk[)u:QP*W-uW+8m8Y+8m>]+o3D^,lK%f-N,7h-N,=j./YOj.dnn]/,Lgn.K([n-iGCc&,Hk6
&,Zq8&,?_1&,m(;&,m(<%J^M0&,$M5%f-Xq%f6_,%fHpR!2onsBD?3:C\qrFDZ+MREW0tVF8^4YG5ZX`
H2`0hI/\TnJGausKD^H$L\ZbiMYW)+L\ul)KDgB#)Yk?I)uCWP*W7&W+8m8Z+8d8[+o3D],lT+g-N#1g
-N#7h./>=U.etOn./kXm-iGCj-1qfE&Gm"8%fHq5%epS5%fHq;%fHk5%epS'%f$S'%IXf&&$5iD!<$R*
C&)QAD#A2JDuF\SF8U.YG5lddGQ)mdHi8?iIf4fqJc(/uL&6YtM#*#%M#)o)L&?T%JcC9!)Xn^C*<$uY
*W$oV+8m8Y+8m>\+o3D],lAte-N,7g-N#7g..etb.eP7e./YIj-N,7j-N4PM&,?e6&,Zq7&,?_1&,d";
&,d":%JUG.&*XT#%JC;(%epS7%[mCC!;pL)C&)QAD#A2KDu=VQF8^4ZG5ZX`H2W*gI/SNlJGk&sKDUAt
L[9imL\lf&KDgB"JG^>T)uCWQ*W-uV+8d/[+9!A\+T3JZ,5iec-2]+g-2]+e-ho+V.JYCh-i57h-2f1^
&,?e6&,Zq8&,-S0&,d":&,d":%JUG.&'ka\%fd.=%Yk&C!;pL(C&2WBD#8,JDu=VQF8^4ZG5QR`H2W*f
I/SNmJGXoqKE$Z&L#e$cL&6N#Jc1-!If(,R)uCWP*W-uV+8d2Y+8m>[+o<G`,5`_b-2f1f-2]+c-fc]P
-i57g-2f1j-1VTC&Gm"8%f?k;%f$V1&,Zq:&,d"9%J^M-&(M0`&,Qk.!.k4C!;^@'C&)QAD#8,IDuF\R
F8^4YG5ZX_H2W*fI/SNkJGXonKCsrhL&$AuJbsurIK4cl)Xn^C*;^cR*rR2Y*rR2Y+T3JY,5`_b-2](i
-Mo+b-KZ]O-Mo+d-N,4j,k2E@&Gm"8%f6e3%epS5%f?k9%f?e1%eC4p%f[%1&,-P6%@mLB!;^@&C&)QA
D#8,JDu4PQF8U.XG5c^`H2`0jHi8?hIf"ZlJb=ZhL%U)pJbsuqIf=`k)XeXB*;^cS*rR2\+8m8Y+8d8\
+nm2Z,l8nb-Mf%]-MAh[-Mf%c-N#1h,k)?E&Gm%9&,Qk7&,-S.&,m(:&,Zq9%J:5!&,$M$&,Qk7%fQop
!8[_OBD6-:C\hlEDZ"GMEW'tVFT$C\GPlaaHi/9hIf+`rJGFcZKD:#pJGXfnI/+]M)u:QO*W-uU+8m8Y
+8m>]+o`_[,5`_a-2Jta-0HWM-2T%d-2]%W&,Hk6&,Qk7&,-S/&,Zq8&,Zq8%J:4^&+pG1%JBdR!:^'a
BD6-9C\hlEDZ"GMEVsnUFT$C[GPugaHi&3eIe\HhJae6cJGO`mI/J?d)XeXA*;^cS*r@&W*rI,Y+T!>V
,5rke,l/h^-KlcN-Mf%d,lAkS&,?e5&,Qk7&,$J5&,?b5%fHq8%f6_*%d4Gn%f?e6%c[PC!<-X-BD6-9
C\hlEDYnAMEVsnUFSp=[GPc[`Hi&3cIc5hVJGFZkI/A6jH1r6G)u:QO*W$oU+8d2X+8d8Z+nd,W,kr\`
-K?HK-2Sta,4,p:&Gcq7%f6e2%egM3%fHq<&,Zq7%F#C[%JpV8&'t<D!;:("B`MrGC\_fDDYnAMEVjhT
FSp=[GPc[_Hhr-bIcl7UIenHjHiJHlH1i0G)u1KN*W$oU+8[,W+8d8Z+n[&U,kr\Q-Mo.a-2Jn^,4#j:
&GZk6%f6e1%egM3%f6e6%f-Y7%b;-d%JpY7&%qtD!;1"!C%uK?D#S>ODYnALEVjhTFSp=YGPc[^HhVpM
IeS6dHi&*gGP)mS)t4gC*;^cR*r@&V*rI,X+Sm8R,53AF-2/\b,5*5\+mT[6&Gcq7%f6e0%egM1%f6e5
%egG*%e:,(%JgS3&-!->!58I*BD6-8C\qrEDYe;LEVjhSFSg7YGPZU]HguLYIenHfI//-cH2VsZ)X\RA
*;U]P*rI,W*r@&V+T!>R,5`_[,kr\V,k</X+mKU5&Gm"7%f-_0%egM6&,Qk5&,He+%JUG(%J^M1&,d!e
!0mQUBDcK@C&2W@D#8,HDu4POF8U.WG5?FYH2)aHI.r!bH2i0eGOlaA)u1KN*VpiS+8[,W+8[2W+n-]D
,k`MP,5WPI&,Hk5&,Qk5&+pG+&,He3%fd+8%c\#m%f$Y4%_r(C!!$X&BD6-8C]/)KD#/&HDu4POF8L(U
G5HLYH1QCRI.Vd\H2;^dG'4bt)Z:TB)u:QN*W$oT+8[,V+8R,W+mL9B,k</U,5NGa+<V6[&,6_4&,He5
&+pG)&,Qk3&+^;1%J:2&%epS2%f['A!4r72B(K[/C&)Q?D#/&GDu4PNF8L(UG5-:SH0]hLH22[\G5iHO
)Y4pG)u1KM*VpiS+8R&U+8R,T+jqS1+o3;_&.fB:&,?e4&,He4&+gA(&,6Y-&*j`(&,6\2%f-^)!6tTD
B(BU/C%uK>D#/&GDu4PNF8^4[FS^1UGM.9:GPQF^FT*0K)X\R?*;poW*VpiS+8R&T+8R,T+k\(7+o*8\
+8ui>&,Qn4&GZk5%f-_.%eC5+%bVBf%f?k8%u1/D!<$O$BD-'7C\hlCDYe;KEVabPFSU+WGPcUFH1cCX
G5QI\)=nd6)u:QM*VpiS+9*D[*r-oR+S?o=,5!,U+T*>[&EjZ"&H34=&,?_3&+gA%&+pFn&+pG*&+]dQ
!;$9hB(BU.C%uK=D#8,GDu+JLF89qOG49_CGP?:VFT6F[)=e^5)u(EM*VgcQ+8HuR*rmGX+P\.7+Sd,Z
*rHT4&,6_2&,Qk4&+U4u&*"/r%dsr.%\3UC!;gC!BD-'7C\_fBDY\5IE<((VF80kLG3=)AG5-1XF8HjG
)XSLA*<$rR*VgcQ+8HuQ+7p]=+nQoP+8m8X&G-M*&,6_3&,?_2&+U4r&*FGk&,d%;%Z18C!;^<uBD-'7
C\V`ADYe;IEVX\MF9$F4G5$+UF8?dF)XSL=*;LWP*WR8W+8HuO+4MG-+8[,U&EaT%&H*18&,?_3&+L.E
&,Qk1!.k4@!;U6sBD-'6C\V`ADY\5GEVFPGFSU+LG4ThMF8p7U)=\X3)u(EK*VgcO+8d2X*qLK;+S-]L
*rd>X&EXMt&GQe8%f?h4&+0qO&+pFm!/1FPB)?31BD-'6C\V`ADYS/FEV=J.FSKtPF8U%Q)=\X3)u(EK
*V^]N+8-cL+5J%5*rI,T&EXMt&GQe3%epS5%e1%W&+U4W!13b:~>

%%EndBinary
grestore
np
grestore
.8 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
12.6915 132.014 mo
12.6915 21.5594 li
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
123.146 132.014 mo
123.146 21.5594 li
@
12.6915 132.014 mo
123.146 132.014 li
@
12.6915 21.5594 mo
123.146 21.5594 li
@
40.4413 100.7 mo
39.1013 104.33 li
41.7813 104.33 li
40.4413 100.7 li
39.8813 99.73 mo
41.0013 99.73 li
43.7813 107.02 li
42.7513 107.02 li
42.0913 105.15 li
38.8013 105.15 li
38.1413 107.02 li
37.1013 107.02 li
39.8813 99.73 li
0 1 1 0 cmyk
f
93.9346 48.5889 mo
93.9346 51.2589 li
95.5146 51.2589 li
96.0446 51.2589 96.4346 51.1489 96.6946 50.9289 cv
96.9446 50.7089 97.0746 50.3789 97.0746 49.9189 cv
97.0746 49.4689 96.9446 49.1389 96.6946 48.9189 cv
96.4346 48.6989 96.0446 48.5889 95.5146 48.5889 cv
93.9346 48.5889 li
93.9346 45.5889 mo
93.9346 47.7889 li
95.3946 47.7889 li
95.8746 47.7889 96.2246 47.6989 96.4646 47.5189 cv
96.7046 47.3389 96.8246 47.0689 96.8246 46.6889 cv
96.8246 46.3289 96.7046 46.0489 96.4646 45.8689 cv
96.2246 45.6889 95.8746 45.5889 95.3946 45.5889 cv
93.9346 45.5889 li
92.9446 44.7789 mo
95.4646 44.7789 li
96.2146 44.7789 96.7946 44.9389 97.2046 45.2489 cv
97.6046 45.5689 97.8146 46.0089 97.8146 46.5789 cv
97.8146 47.0289 97.7046 47.3889 97.4946 47.6489 cv
97.2846 47.9089 96.9846 48.0789 96.5846 48.1389 cv
97.0646 48.2489 97.4446 48.4689 97.7146 48.7989 cv
97.9746 49.1289 98.1146 49.5389 98.1146 50.0289 cv
98.1146 50.6889 97.8846 51.1889 97.4446 51.5389 cv
97.0046 51.8989 96.3746 52.0689 95.5646 52.0689 cv
92.9446 52.0689 li
92.9446 44.7789 li
.690455 0 1 0 cmyk
f
10.61 7.21037 mo
10.126 8.04637 9.774 8.86037 9.543 9.66337 cv
9.301 10.4664 9.191 11.2804 9.191 12.1054 cv
9.191 12.9414 9.301 13.7554 9.543 14.5584 cv
9.774 15.3724 10.126 16.1754 10.61 17.0004 cv
9.752 17.0004 li
9.213 16.1534 8.806 15.3394 8.542 14.5254 cv
8.278 13.7114 8.146 12.9084 8.146 12.1054 cv
8.146 11.3134 8.278 10.5104 8.542 9.69637 cv
8.806 8.88237 9.202 8.05737 9.752 7.21037 cv
10.61 7.21037 li
1 /0 /CSD get_res sepcs
1 sep
f
15.263 12.5344 mo
14.46 12.5344 13.91 12.6334 13.602 12.8094 cv
13.294 12.9964 13.14 13.3044 13.14 13.7444 cv
13.14 14.0964 13.25 14.3824 13.481 14.5804 cv
13.712 14.7894 14.031 14.8884 14.427 14.8884 cv
14.977 14.8884 15.417 14.7014 15.747 14.3054 cv
16.077 13.9204 16.242 13.4034 16.242 12.7544 cv
16.242 12.5344 li
15.263 12.5344 li
17.232 12.1274 mo
17.232 15.5594 li
16.242 15.5594 li
16.242 14.6464 li
16.011 15.0204 15.725 15.2844 15.395 15.4494 cv
15.065 15.6144 14.647 15.7024 14.163 15.7024 cv
13.547 15.7024 13.052 15.5374 12.689 15.1964 cv
12.326 14.8554 12.15 14.3934 12.15 13.8104 cv
12.15 13.1394 12.37 12.6334 12.832 12.2814 cv
13.283 11.9404 13.954 11.7644 14.856 11.7644 cv
16.242 11.7644 li
16.242 11.6654 li
16.242 11.2144 16.088 10.8624 15.791 10.6094 cv
15.494 10.3674 15.076 10.2354 14.537 10.2354 cv
14.185 10.2354 13.855 10.2794 13.525 10.3674 cv
13.195 10.4554 12.887 10.5764 12.59 10.7304 cv
12.59 9.81737 li
12.942 9.68537 13.294 9.57537 13.635 9.50937 cv
13.976 9.44337 14.306 9.39937 14.636 9.39937 cv
15.505 9.39937 16.154 9.63037 16.583 10.0814 cv
17.012 10.5324 17.232 11.2144 17.232 12.1274 cv
f
19.1131 7.21037 mo
19.9711 7.21037 li
20.4991 8.05737 20.9061 8.88237 21.1701 9.69637 cv
21.4341 10.5104 21.5771 11.3134 21.5771 12.1054 cv
21.5771 12.9084 21.4341 13.7114 21.1701 14.5254 cv
20.9061 15.3394 20.4991 16.1534 19.9711 17.0004 cv
19.1131 17.0004 li
19.5861 16.1754 19.9381 15.3724 20.1801 14.5584 cv
20.4111 13.7554 20.5321 12.9414 20.5321 12.1054 cv
20.5321 11.2804 20.4111 10.4664 20.1801 9.66337 cv
19.9381 8.86037 19.5861 8.04637 19.1131 7.21037 cv
f
27.099 7.54037 mo
28.188 7.54037 li
28.188 10.8294 li
32.126 10.8294 li
32.126 7.54037 li
33.215 7.54037 li
33.215 15.5594 li
32.126 15.5594 li
32.126 11.7424 li
28.188 11.7424 li
28.188 15.5594 li
27.099 15.5594 li
27.099 7.54037 li
f
35.327 9.54237 mo
36.317 9.54237 li
36.317 15.5594 li
35.327 15.5594 li
35.327 9.54237 li
35.327 7.19937 mo
36.317 7.19937 li
36.317 8.45337 li
35.327 8.45337 li
35.327 7.19937 li
f
43.533 12.3034 mo
43.533 12.7874 li
38.99 12.7874 li
39.034 13.4694 39.232 13.9974 39.606 14.3494 cv
39.969 14.7014 40.475 14.8774 41.135 14.8774 cv
41.509 14.8774 41.883 14.8334 42.235 14.7454 cv
42.587 14.6574 42.95 14.5144 43.302 14.3164 cv
43.302 15.2514 li
42.95 15.4054 42.587 15.5264 42.213 15.5924 cv
41.839 15.6584 41.454 15.7024 41.08 15.7024 cv
40.112 15.7024 39.353 15.4274 38.792 14.8774 cv
38.231 14.3274 37.956 13.5684 37.956 12.6114 cv
37.956 11.6324 38.22 10.8514 38.748 10.2684 cv
39.276 9.69637 40.002 9.39937 40.904 9.39937 cv
41.718 9.39937 42.356 9.66337 42.829 10.1804 cv
43.291 10.7084 43.533 11.4124 43.533 12.3034 cv
42.543 12.0174 mo
42.532 11.4784 42.378 11.0494 42.092 10.7194 cv
41.795 10.4004 41.399 10.2354 40.915 10.2354 cv
40.365 10.2354 39.925 10.4004 39.595 10.7084 cv
39.265 11.0164 39.067 11.4564 39.023 12.0174 cv
42.543 12.0174 li
f
48.637 10.4664 mo
48.527 10.4004 48.406 10.3564 48.274 10.3234 cv
48.142 10.3014 47.999 10.2794 47.845 10.2794 cv
47.284 10.2794 46.855 10.4664 46.558 10.8294 cv
46.25 11.1924 46.107 11.7094 46.107 12.3914 cv
46.107 15.5594 li
45.117 15.5594 li
45.117 9.54237 li
46.107 9.54237 li
46.107 10.4774 li
46.305 10.1144 46.58 9.83937 46.91 9.66337 cv
47.24 9.48737 47.647 9.39937 48.131 9.39937 cv
48.362 9.41037 li
48.439 9.42137 48.527 9.43237 48.637 9.45437 cv
48.637 10.4664 li
f
52.41 12.5344 mo
51.607 12.5344 51.057 12.6334 50.749 12.8094 cv
50.441 12.9964 50.287 13.3044 50.287 13.7444 cv
50.287 14.0964 50.397 14.3824 50.628 14.5804 cv
50.859 14.7894 51.178 14.8884 51.574 14.8884 cv
52.124 14.8884 52.564 14.7014 52.894 14.3054 cv
53.224 13.9204 53.389 13.4034 53.389 12.7544 cv
53.389 12.5344 li
52.41 12.5344 li
54.379 12.1274 mo
54.379 15.5594 li
53.389 15.5594 li
53.389 14.6464 li
53.158 15.0204 52.872 15.2844 52.542 15.4494 cv
52.212 15.6144 51.794 15.7024 51.31 15.7024 cv
50.694 15.7024 50.199 15.5374 49.836 15.1964 cv
49.473 14.8554 49.297 14.3934 49.297 13.8104 cv
49.297 13.1394 49.517 12.6334 49.979 12.2814 cv
50.43 11.9404 51.101 11.7644 52.003 11.7644 cv
53.389 11.7644 li
53.389 11.6654 li
53.389 11.2144 53.235 10.8624 52.938 10.6094 cv
52.641 10.3674 52.223 10.2354 51.684 10.2354 cv
51.332 10.2354 51.002 10.2794 50.672 10.3674 cv
50.342 10.4554 50.034 10.5764 49.737 10.7304 cv
49.737 9.81737 li
50.089 9.68537 50.441 9.57537 50.782 9.50937 cv
51.123 9.44337 51.453 9.39937 51.783 9.39937 cv
52.652 9.39937 53.301 9.63037 53.73 10.0814 cv
54.159 10.5324 54.379 11.2144 54.379 12.1274 cv
f
59.9011 10.4664 mo
59.7911 10.4004 59.6701 10.3564 59.5381 10.3234 cv
59.4061 10.3014 59.2631 10.2794 59.1091 10.2794 cv
58.5481 10.2794 58.1191 10.4664 57.8221 10.8294 cv
57.5141 11.1924 57.3711 11.7094 57.3711 12.3914 cv
57.3711 15.5594 li
56.3811 15.5594 li
56.3811 9.54237 li
57.3711 9.54237 li
57.3711 10.4774 li
57.5691 10.1144 57.8441 9.83937 58.1741 9.66337 cv
58.5041 9.48737 58.9111 9.39937 59.3951 9.39937 cv
59.6261 9.41037 li
59.7031 9.42137 59.7911 9.43237 59.9011 9.45437 cv
59.9011 10.4664 li
f
65.269 9.77337 mo
65.269 10.6974 li
64.983 10.5434 64.708 10.4334 64.422 10.3564 cv
64.136 10.2794 63.861 10.2354 63.575 10.2354 cv
62.937 10.2354 62.431 10.4444 62.079 10.8514 cv
61.727 11.2584 61.551 11.8304 61.551 12.5564 cv
61.551 13.2934 61.727 13.8654 62.079 14.2724 cv
62.431 14.6794 62.937 14.8774 63.575 14.8774 cv
63.861 14.8774 64.136 14.8444 64.422 14.7674 cv
64.708 14.6904 64.983 14.5694 65.269 14.4154 cv
65.269 15.3284 li
64.983 15.4604 64.697 15.5594 64.411 15.6144 cv
64.114 15.6694 63.795 15.7024 63.465 15.7024 cv
62.563 15.7024 61.837 15.4274 61.309 14.8554 cv
60.77 14.2944 60.506 13.5244 60.506 12.5564 cv
60.506 11.5774 60.77 10.8074 61.309 10.2464 cv
61.848 9.68537 62.585 9.39937 63.531 9.39937 cv
63.839 9.39937 64.136 9.43237 64.422 9.49837 cv
64.708 9.56437 64.994 9.65237 65.269 9.77337 cv
f
71.99 11.9294 mo
71.99 15.5594 li
71 15.5594 li
71 11.9624 li
71 11.3904 70.879 10.9724 70.659 10.6864 cv
70.439 10.4004 70.109 10.2574 69.669 10.2574 cv
69.13 10.2574 68.712 10.4334 68.404 10.7744 cv
68.096 11.1154 67.942 11.5774 67.942 12.1604 cv
67.942 15.5594 li
66.952 15.5594 li
66.952 7.19937 li
67.942 7.19937 li
67.942 10.4774 li
68.173 10.1254 68.448 9.85037 68.778 9.67437 cv
69.097 9.49837 69.471 9.39937 69.889 9.39937 cv
70.571 9.39937 71.099 9.61937 71.451 10.0484 cv
71.803 10.4774 71.99 11.1044 71.99 11.9294 cv
f
73.9591 9.54237 mo
74.9491 9.54237 li
74.9491 15.5594 li
73.9591 15.5594 li
73.9591 9.54237 li
73.9591 7.19937 mo
74.9491 7.19937 li
74.9491 8.45337 li
73.9591 8.45337 li
73.9591 7.19937 li
f
81.3511 9.77337 mo
81.3511 10.6974 li
81.0651 10.5434 80.7901 10.4334 80.5041 10.3564 cv
80.2181 10.2794 79.9431 10.2354 79.6571 10.2354 cv
79.0191 10.2354 78.5131 10.4444 78.1611 10.8514 cv
77.8091 11.2584 77.6331 11.8304 77.6331 12.5564 cv
77.6331 13.2934 77.8091 13.8654 78.1611 14.2724 cv
78.5131 14.6794 79.0191 14.8774 79.6571 14.8774 cv
79.9431 14.8774 80.2181 14.8444 80.5041 14.7674 cv
80.7901 14.6904 81.0651 14.5694 81.3511 14.4154 cv
81.3511 15.3284 li
81.0651 15.4604 80.7791 15.5594 80.4931 15.6144 cv
80.1961 15.6694 79.8771 15.7024 79.5471 15.7024 cv
78.6451 15.7024 77.9191 15.4274 77.3911 14.8554 cv
76.8521 14.2944 76.5881 13.5244 76.5881 12.5564 cv
76.5881 11.5774 76.8521 10.8074 77.3911 10.2464 cv
77.9301 9.68537 78.6671 9.39937 79.6131 9.39937 cv
79.9211 9.39937 80.2181 9.43237 80.5041 9.49837 cv
80.7901 9.56437 81.0761 9.65237 81.3511 9.77337 cv
f
85.8061 12.5344 mo
85.0031 12.5344 84.4531 12.6334 84.1451 12.8094 cv
83.8371 12.9964 83.6831 13.3044 83.6831 13.7444 cv
83.6831 14.0964 83.7931 14.3824 84.0241 14.5804 cv
84.2551 14.7894 84.5741 14.8884 84.9701 14.8884 cv
85.5201 14.8884 85.9601 14.7014 86.2901 14.3054 cv
86.6201 13.9204 86.7851 13.4034 86.7851 12.7544 cv
86.7851 12.5344 li
85.8061 12.5344 li
87.7751 12.1274 mo
87.7751 15.5594 li
86.7851 15.5594 li
86.7851 14.6464 li
86.5541 15.0204 86.2681 15.2844 85.9381 15.4494 cv
85.6081 15.6144 85.1901 15.7024 84.7061 15.7024 cv
84.0901 15.7024 83.5951 15.5374 83.2321 15.1964 cv
82.8691 14.8554 82.6931 14.3934 82.6931 13.8104 cv
82.6931 13.1394 82.9131 12.6334 83.3751 12.2814 cv
83.8261 11.9404 84.4971 11.7644 85.3991 11.7644 cv
86.7851 11.7644 li
86.7851 11.6654 li
86.7851 11.2144 86.6311 10.8624 86.3341 10.6094 cv
86.0371 10.3674 85.6191 10.2354 85.0801 10.2354 cv
84.7281 10.2354 84.3981 10.2794 84.0681 10.3674 cv
83.7381 10.4554 83.4301 10.5764 83.1331 10.7304 cv
83.1331 9.81737 li
83.4851 9.68537 83.8371 9.57537 84.1781 9.50937 cv
84.5191 9.44337 84.8491 9.39937 85.1791 9.39937 cv
86.0481 9.39937 86.6971 9.63037 87.1261 10.0814 cv
87.5551 10.5324 87.7751 11.2144 87.7751 12.1274 cv
f
89.8102 7.19937 mo
90.8002 7.19937 li
90.8002 15.5594 li
89.8102 15.5594 li
89.8102 7.19937 li
f
97.4991 11.7314 mo
97.4991 14.6684 li
99.2371 14.6684 li
99.8201 14.6684 100.249 14.5474 100.535 14.3054 cv
100.81 14.0634 100.953 13.7004 100.953 13.1944 cv
100.953 12.6994 100.81 12.3364 100.535 12.0944 cv
100.249 11.8524 99.8201 11.7314 99.2371 11.7314 cv
97.4991 11.7314 li
97.4991 8.43137 mo
97.4991 10.8514 li
99.1051 10.8514 li
99.6331 10.8514 100.018 10.7524 100.282 10.5544 cv
100.546 10.3564 100.678 10.0594 100.678 9.64137 cv
100.678 9.24537 100.546 8.93737 100.282 8.73937 cv
100.018 8.54137 99.6331 8.43137 99.1051 8.43137 cv
97.4991 8.43137 li
96.4101 7.54037 mo
99.1821 7.54037 li
100.007 7.54037 100.645 7.71637 101.096 8.05737 cv
101.536 8.40937 101.767 8.89337 101.767 9.52037 cv
101.767 10.0154 101.646 10.4114 101.415 10.6974 cv
101.184 10.9834 100.854 11.1704 100.414 11.2364 cv
100.942 11.3574 101.36 11.5994 101.657 11.9624 cv
101.943 12.3254 102.097 12.7764 102.097 13.3154 cv
102.097 14.0414 101.844 14.5914 101.36 14.9764 cv
100.876 15.3724 100.183 15.5594 99.2921 15.5594 cv
96.4101 15.5594 li
96.4101 7.54037 li
f
106.651 12.5344 mo
105.848 12.5344 105.298 12.6334 104.99 12.8094 cv
104.682 12.9964 104.528 13.3044 104.528 13.7444 cv
104.528 14.0964 104.638 14.3824 104.869 14.5804 cv
105.1 14.7894 105.419 14.8884 105.815 14.8884 cv
106.365 14.8884 106.805 14.7014 107.135 14.3054 cv
107.465 13.9204 107.63 13.4034 107.63 12.7544 cv
107.63 12.5344 li
106.651 12.5344 li
108.62 12.1274 mo
108.62 15.5594 li
107.63 15.5594 li
107.63 14.6464 li
107.399 15.0204 107.113 15.2844 106.783 15.4494 cv
106.453 15.6144 106.035 15.7024 105.551 15.7024 cv
104.935 15.7024 104.44 15.5374 104.077 15.1964 cv
103.714 14.8554 103.538 14.3934 103.538 13.8104 cv
103.538 13.1394 103.758 12.6334 104.22 12.2814 cv
104.671 11.9404 105.342 11.7644 106.244 11.7644 cv
107.63 11.7644 li
107.63 11.6654 li
107.63 11.2144 107.476 10.8624 107.179 10.6094 cv
106.882 10.3674 106.464 10.2354 105.925 10.2354 cv
105.573 10.2354 105.243 10.2794 104.913 10.3674 cv
104.583 10.4554 104.275 10.5764 103.978 10.7304 cv
103.978 9.81737 li
104.33 9.68537 104.682 9.57537 105.023 9.50937 cv
105.364 9.44337 105.694 9.39937 106.024 9.39937 cv
106.893 9.39937 107.542 9.63037 107.971 10.0814 cv
108.4 10.5324 108.62 11.2144 108.62 12.1274 cv
f
113.163 16.1094 mo
112.877 16.8134 112.602 17.2864 112.338 17.5064 cv
112.074 17.7264 111.722 17.8364 111.282 17.8364 cv
110.49 17.8364 li
110.49 17.0114 li
111.073 17.0114 li
111.337 17.0114 111.546 16.9454 111.7 16.8134 cv
111.854 16.6814 112.019 16.3844 112.206 15.9004 cv
112.382 15.4604 li
109.951 9.54237 li
110.996 9.54237 li
112.877 14.2504 li
114.758 9.54237 li
115.803 9.54237 li
113.163 16.1094 li
f
122.315 12.3034 mo
122.315 12.7874 li
117.772 12.7874 li
117.816 13.4694 118.014 13.9974 118.388 14.3494 cv
118.751 14.7014 119.257 14.8774 119.917 14.8774 cv
120.291 14.8774 120.665 14.8334 121.017 14.7454 cv
121.369 14.6574 121.732 14.5144 122.084 14.3164 cv
122.084 15.2514 li
121.732 15.4054 121.369 15.5264 120.995 15.5924 cv
120.621 15.6584 120.236 15.7024 119.862 15.7024 cv
118.894 15.7024 118.135 15.4274 117.574 14.8774 cv
117.013 14.3274 116.738 13.5684 116.738 12.6114 cv
116.738 11.6324 117.002 10.8514 117.53 10.2684 cv
118.058 9.69637 118.784 9.39937 119.686 9.39937 cv
120.5 9.39937 121.138 9.66337 121.611 10.1804 cv
122.073 10.7084 122.315 11.4124 122.315 12.3034 cv
121.325 12.0174 mo
121.314 11.4784 121.16 11.0494 120.874 10.7194 cv
120.577 10.4004 120.181 10.2354 119.697 10.2354 cv
119.147 10.2354 118.707 10.4004 118.377 10.7084 cv
118.047 11.0164 117.849 11.4564 117.805 12.0174 cv
121.325 12.0174 li
f
127.771 9.71837 mo
127.771 10.6534 li
127.485 10.5214 127.199 10.4114 126.902 10.3344 cv
126.594 10.2684 126.286 10.2244 125.967 10.2244 cv
125.472 10.2244 125.098 10.3014 124.856 10.4554 cv
124.614 10.6094 124.493 10.8294 124.493 11.1264 cv
124.493 11.3574 124.581 11.5334 124.757 11.6654 cv
124.933 11.7974 125.285 11.9294 125.813 12.0394 cv
126.154 12.1164 li
126.858 12.2704 127.353 12.4904 127.65 12.7544 cv
127.936 13.0294 128.09 13.4144 128.09 13.8984 cv
128.09 14.4594 127.87 14.8994 127.43 15.2184 cv
126.99 15.5484 126.374 15.7024 125.604 15.7024 cv
125.274 15.7024 124.944 15.6694 124.592 15.6144 cv
124.24 15.5594 123.877 15.4714 123.492 15.3394 cv
123.492 14.3164 li
123.855 14.5144 124.218 14.6574 124.57 14.7454 cv
124.922 14.8444 125.274 14.8884 125.626 14.8884 cv
126.088 14.8884 126.451 14.8114 126.704 14.6574 cv
126.946 14.5034 127.078 14.2724 127.078 13.9754 cv
127.078 13.7114 126.979 13.5024 126.803 13.3594 cv
126.627 13.2164 126.231 13.0734 125.615 12.9414 cv
125.274 12.8644 li
124.658 12.7324 124.207 12.5344 123.943 12.2704 cv
123.668 12.0064 123.536 11.6434 123.536 11.1704 cv
123.536 10.6094 123.734 10.1694 124.13 9.86137 cv
124.526 9.55337 125.098 9.39937 125.846 9.39937 cv
126.209 9.39937 126.55 9.43237 126.88 9.48737 cv
127.199 9.54237 127.496 9.61937 127.771 9.71837 cv
f
gsave
145.237 132.014 mo
255.691 132.014 li
255.691 21.5594 li
145.237 21.5594 li
cp
clp
145.237 132.014 mo
256.117 132.014 li
256.117 21.1339 li
145.237 21.1339 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 143.697 ]ct
[110.88 0 0 110.88 145.237 11.683 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 154 
/H 154 
/M[154 0 0 -154 0 154 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 154 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 154 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 154 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 154 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
Xp+S)r!30+q?[cA$O[@O%1NgY&.fKg'GhT()]]_:+=&6]/1rY64$c>8>@Mf-OINSlbNS^"s/l@k!<</r
!WrN,!X/K)rWN3("9o)8#71;8(CCN[%M03b',))r(a11W2+LSRNMjJCgpd@0!!**#r;lm!rW<`8"UGJF
%h9*[%1WjV"9oN(6IPq%!!30SAF9W:"o/B"#Q4r)#p]ic$OdFQ%M'']&JGfm(Dn#0*?QFM,q:Gu0fD*Z
9iP>5GCbh\W3a:nkkG,WXT7ejq#Ug(!s/T-"9Sc0r<3<.#6kG>rWs>I$k<aY&eYin'c%c4,qV5L;g45!
cIo#ohuN]V!<N<$!r`9,"9f,?%1`pZr=/r8"9p>?^]:A7!=:F6"k!SL#5e`)#l4iX$47.L$k3XU%hK9a
',2/t)&jP;+<`$Z.P*;22F0f,>@MDmOIN2abM)^jp&MQ%mfE1b#Qk,0!s8Z."9eZ,!sSr7#lY,6$4@7P
&.oEc',),s(`X\N2*=fGGGi-;!:g*j!<E*"quZj"%L!+F%1`sZ%LimX$jQtMXT6!6!!1.Ej9>;_r!30+
q?\VY$O[@O%1NdX&.fKg'GVH&)]^"C,UFig/ho1E5t4gX@VgUWS$ToRkkF*;aT1c1q#U^%!s/T-"8rB$
"Tnu6#71;8'FG3V%M03b',))r(`XhR2+LSRNMlaUK`D/T!!3'"rW<'$"9\l6$P!(G"qD(P%L`IERK1V5
[0?7-q$-^$r<W6+.1-Fj$k*RS%hB3`',)&r(`=;6+!DmU-nHu*2EO3!<*NgUJWQh:^tS#!!8@MB!Vld!
!s8T-rWE0'r<3<.#6kG>rWs5F$P!XX&eYin'c%W0,qV5L;g45e!1*]a!<E6&rW<'$#Qt;<$OmUV%hARK
!=&a_!9!pV"oAN(#5e`)#l4i/$471?$mH,j%hK9a',2/t)&jP;+<`!Y.P*;22F0f,<+9ZfOIN2abImoB
!:U$a!XJl0!X&T.!sAc*"Tnr5#7187&IT!W&.oNg',D<"*$Hmk4B#\@!3#r!!<E*"!<N<$!r`90"UGGC
%hB-[%1WjVo)O@BoDkfnp]gX$r<W6+-OL4h$k*RS%M'*^&JGin(`=85+!;^Q-n6i(1cmum9j;(CJWQA-
^o@D7!:Ksa!riB&!riB$"T8K+#6kD=rWs/D$OdLV&J>`j()@`,,qUuE;h>#K!!**#rW2s!rW<9+"UGGE
rXT)@%1Wl=!6YAP"n2]j#5e`)#l4iS$4@4M$k3XV%hK9c',26")&sY=+=&6]/1rY84$c>8>@Mf-OJoM7
!7_)<!Vld!!s8T-rWE-&rWNE/#6kG>rWs,C$P!XX&eYik'c%W0,qV5LmJr@LqZ6ZtrW<3)"UG5=%1`pZ
rXOech>jAUq$-a%r<W6+!X]8BrX9kX%M'']&JGin(E"/3*?ZLN-n6c&1c@Eb9iPS<GEA<0!9O:N!Vc^%
!s/N,!sA]/"T8K,"pP;<#lY,?$OdLV&J>]i()7Z++Y>S+!2BMp!<E*"!<N<$!r`9-":,>B%hB-[%JBdR
!:^&c"o&<"#Q4o.$2Y#S$47.L$k3XU%hK9a',2/u)&jP;+<`$Z.P<G42F0f,>@ME"OKANY!:Ks`!XJl0
!WrN-!sAc*"Tnu6#71;8%LNRP%M03b',),s(`XhRa8iUJ!<E3"!W<)u!s8]4$4ZtF!"S#hK`M)UVZli"
r!30+q?[N:$O[@O%1NdX&.fKk',26")&jS<+=&6]/1rY64$c>8>@Mf-U]C,iq#U9m"Tni."9Sc)"TAQ-
"pY>;#lY,>$4@=R&.oNg',;9"+XOMr`rH,@!;urt!r`9,"9f&=%1`pZciBF5lNOg&q$-^$r<W6+*=</^
$k*RS%hB3`',))s(`=;6+!DmU.P*2,2EO2-9iP>5GG>0,!Vlfs!s&H+rWE0'r<3<.#6kG>rWru?$k<aY
&eYin'c%c4U&`jHr;cp#!WE0"!sSl3$4@:R%_VkC!8%Iu"o&<"#Q4r)#m(G@$iUPR%1Wm[&.oQi'c.`,
*$6:H,q(5o0f1dS7SR)ro)PupmfE1b#Qk,0"9Sc/"9eZ,"U5/9#RLeG#mq%K%M03b',),s(ln[_!!**#
rW2ourW<9,#RV"OWW9a5T`t2qr!30+q?[<4$O[@O%2oZc%hK9c',2/u)&jS<+=&6].P<G44$c>8>G2&q
!V6?f!riB&!riB$"T8K+#6kD=rWro=$OdLV&J>`j'c+:Z_#OK:!;urt!r`9)"9f&=%FY<B!:C#s"o/B"
#Q4r)#o<pV$OdFQ%1`s\&JGfl(Dn#0*?QFM,q'!L/ho7G5tt=O!:Kse!rW0&!s8T-rWE0'r<3<.#6kG>
rWrl<$P!XX&eYin'r:oZ!;up!!Wi9%rW<6*"UYXQ!2onP"iLT?#5e`)#l4i/$471?$lBE`%hK9a',2/t
)&jP;+<`!Y.P*;22F0h+!3#tf!Vc^%!s/N,!sA]/"T8K+"pP;<r<W]:$k<g\&ebqA!9F1]!<E*"!<N<$
!r`9&"UM41])]nUf*1pRr!30+q?\/L$4@7N%1NdX&.fEe'GVH&)]^"C+XJNd/ho1E6/qsX!:Ks`!X&T,
!WrQ'"T8K+#6kD=rWrf:$OdLV&J>cV!.k4F!!**#rW2s!rW<0("e#G:!4<!p"o&<"#Q4r)#oj9[$OdFQ
%1`s\&/,]k(Dn#0*?QCL,q(;s0fD,?!6tT5!Vld!!s8T-rWE-&rWNE/#6kG>rWrc9$P!XX&eaL1M?*MS
rrN0%rW<-'LB-95U':Asq$-a%r<W6+!X]8BrX9MN%M'']&JGin(E"/3*?ZLN-n6c&1q`nH!:U$a!XJl0
!X&T.!sAc*"U##6#7(V7#m:VE%M06)!1X#i!<E*"!<N<$!riAo!.k4C!1O/e#6"l-#Q4r)#oX-X$OdFQ
%1Wm[&.oQi'c7f-*$6:H,q(5q0rb6E!:Ks`!XJl0!WrN-!sAc*"Tnu6#71;8":>MF%M43lnGiRj!<*#t
!ri@n!6YAP"lfd]#5e`)#l4iF$4@4M$k3XU%hK9c',26")&jS<+=&6]/2#BOa8kZ0q#U^%!s/T-"8rB%
"U##7"pYG5#m1MB%M%n,KE)#R!;urt!WW=[!8[^P"n`&p#5\Z(#l4iE$4@4M$k3XV%hK<d',;<#)&sY=
+XA?`/AM8>!:Ksa!WrN,!X/K)rri9("9o)8#RLD9!X]>GgAmN>r;cp#!WE/o!.k4@!13re#6"i)#Q4r)
#m(G@$iUPH%1Wm[&.oQi'c.`,*$6:H,q,kqli?JTp]:^'!WiK,"9Sc0r<39-"pYG5#ltA@a8i.=!<E3"
!WE/\!/1FP"e#Vi#5e`)#l=oE#mq%J$k*RS%M'*^',)&p(`=85+!;gTRK3<emfE4crr`9&rr`3&r<39.
"pYG5#lk=?!4i.2!<E'!!!:LIQiQFUX9JD(qZm'*q?[]?$O[@O%1NgY&.oQh'GhT("<8F(+XE?RncA^j
q#UX#!s/W)"9/N&"U##7"pbM6$).FD!;up!!Wft7WrUcU]`n39r!30+q?[31$4HhA%LimY&.fEe'GVE%
)]TqBo)PKbn,`:c"Tnf-"9Sc.!sAc*"U,)7#7(VBNr\#:!<E3"!NH.6!0dZ^#5e`)#l4i@$47.L$k3XU
%hK9a',2/u)&jS<SH/EbmfE1b"9S],!sAK)r<3</"pYD?\,`l9!s&B&!Rh%6!:C#f"o&<"#Q4r)#mq"I
$OdFQ%1`s\&-ij^'GhT(*$(4Cp]:-jq#UX#!s/W)"9&H&"U##7"pbL2!6,$<!Pe]6!8@[d"o/B"#Q>#*
#m(G@$iUPB%1WmZ&.oQi'c.`,p&LT_n,`:c#Qk,0"9Sc/"9eZ,!X8i6OoX,7!!0/$])]nUap%PEr!30+
q?[]?$4@7N%1NdX&.fEe'GVH&irH7_mfE1b#Qk,0!s8Z."9eZ,!=&i.!.k49!!!%g!6tSP"l':V#5e`)
#l4i<$4@4M$k3XU%hK9c',26"ciCl^mfE4c"Tni."9Sc)"TAQ*"paGoJcLB&i;fSUmKNCjqZm'*q?[W=
$O[@O%1NgY&.oQh'c4O`dfAh;q#UX#!s/W)"9/N&"TSbZ!.k3&!;$8P"TS`$#5e`)#l4i/$471?$jR4O
%hK9a',7GHjT+`Mp]:^'!WiK,"9Sc0rWRlRJcNso\-:Fep]gX$r<W6+$jm@M$k*RS%M'*^',/gp])_:#
q#^QurrW3&r<3-(mJqh=JcOX-V$6&dp]gX$r<W6+$OR7L$k*RS%hB3`'>OUm!:Ksa!WrN,!X/K)rri?*
gAlg*JcP<@Op1Xbq$-a%r<W6+!X]8BrX8o=%M'*^XT72Xn,`:c#Qk,0"9Sc/"9cdGJcLK)rWS8bp]ga'
rWiB-q?[H8$4@7N%1NdX&=NUh!:Ks`!X&T,!WrQ("LS5]!13cP"ePtn#5e`)#l4i0$4@4M":P_K%hFKs
rrMWjq#UX#!s/W)!rrIu!.k3O!8%I["o/B"#Q4r)#mUeF$OdFQ%M/.2Q2p@SrrW'!"p4r/"9Sc/NrXb3
^&Wolr!**(r!30+q?[?5$4@7N%1Sj.lN$ASp]:R#!WiH+\,_*\PlU4UR0E?ir!30+r!<T7#mq%J$k*T&
!;uod!Vld"!s8T-"/Q!L!2onP"fhh&#5\Z(#l4i1$4@4M%/'[_!:p6i!Vld!!s8T-OoU(6])]nU]ES*8
r!30+q?[62$4@:&!20D^!Vc]s!s8H%JcLB&c2b6UcNX(Jr!30+q?[31$Ob;]ZiKOqq#^QulMuM:JcOa0
U'9KZp]gX$r<W6+!=B4J!6,$-!Vlcs"5!U*!.k4C!07<S"o/B##Q4r)#lk=4!7q5?!VleK!.k3o!4W3S
"o&<"#Q4r)$.AmW!:Ksb!q$&?!.k4-!2TkR"o&<"#Q4r*$,?PV!:Ksc!o!^,!.k4@!0RNQ"o/B"#Q4r+
$*=3U!:Ksd!lt@n!/1FP"bHpX"o&<"#Q4r,$(:kT!:Kse!jr#[!13cP"d0&a#5e`+#lb20$&8NS!:Ksf
!ho[H!36+P"f)=t#5\Z(#lb5&!/U^P!VQQo!fm>5!58Gb"o&8s#5e`)#QP1%!8RYE!<<22!.k39!:C#L
"o&9%#Q4o+#`8WO!:Krb!.k3L!8@[K"o&<"#Q>#&!.t7O!V$2R!.k3_!6>>I"o/B##QG(i!0dKS!WE(N
!.k3r!4<!I"o&<"#65%V!2fhf!UB`;!.k40!29YH"o&<"#JC,J!:p6D!.k3&!;$8P"m-!a#5e_+!6YB7
!J1<'!6YAP"hY$6#6"kV!20Dc!U]r>!.k4-!2TkE"o&<%#J^>G!;6HJ!.k3&!:^&P"lKR[#6+q1!6"s4
!QY7m!/1FP"bHpJ"o/@k!7h/G!OVoZ!13cP"bd-Z#5e[\!9jLZ!MTRG!36+P"d]Dh#4hhH!;ccm!KR54
!58Gb"mZ?i#+Yb@!;ll-!.k39!:C#B"o\]'#)WE@!;lko!.k3L!8@[>"oSZ!!.k4D!;uq]!.k3_!6>>=
"o\_d!/LXS!WE(N!.k3r!4<!<"oeeR!1Eof!UB`;!.k40!29Y;"TSb?!3?/#!S@C(!.k4C!07<:"f_R:
!.k3&!6YAP"gA0Z!.k3&!.k4-!2Tk:"i(+i!.k3&!:^&P"kEjZ!.k3&!/1FP"bHpB"e#FC!.k3<!:'f?
"oJOZ!.k3&!36+P"croZ!.k3&!.k3b!.kC:"e>XF!.k39!:C#B"o/=Z!.k3&!2onP"cW]Z!.k3&!.k3_
!6>>:"lfT7!.k3&!6tSP"g\BZ!.k3&!.k40!29Y:"hanf!.k3&!;$8P"ka'Z!58Gb!.k3o!4W3:"k*I'
!.k3&!8[^P"iCMZ!.k3&!.k4@!0RN:"g%cV!.k3)!<*.R"mH2Z!.k3&!13cP"bHpU"c!)0!.k3O!8%I:
"nM_G!.k3&!58Gb"m,uZ!.k3&!0mQP"bHpR"c<;3!.k3L!8@[:"nhqJ!.k3&!4r6P"eZ%Z!.k3&!.k3r
!4<!:"jd7$!.k3&!9!pP"i^_Z!.k3&!.k4C!07<:"f_R:!.k3&!6YAP"gA0Z!.k3&!.k4-!2Tk:"i(+i
!.k3&!:^&P"kEjZ!.k3&!/1FP"bHpB"e#FC!.k3<!:'f?"oJOZ!.k3&!36+P"croZ!.k3&!.k3b!.kC:
"e>XF!.k39!:C#B"o/=Z!.k3&!2onP"cW]Z!.k3&!.k3_!6>>:"lfT7!.k3&!6tSP"g\BZ!.k3&!.k40
!29Y:"hanf!.k3&!;$8P"ka'Z!58Gb!.k3o!4W3:"k*I'!.k3&!8[^P"iCMZ!.k3&!.k4@!0RN:"g%cV
!.k3)!<*.R"mH2Z!.k3&!13cP"bHpU"c!)0!.k3O!8%I:"nM_G!.k3&!58Gb"m,uZ!.k3&!0mQP"bHpR
"c<;3!.k3L!8@[:"nhqJ!.k3&!4r6P"eZ%Z!.k3&!.k3r!4<!:"jd7$!.k3&!9!pP"i^_Z!.k3&!.k4C
!07<:"f_R:!.k3&!6YAP"gA0Z!.k3&!.k4-!2Tk:"i(+i!.k3&!:^&P"kEjZ!.k3&!/1FP"bHpB"e#FC
!.k3<!:'f?"oJOZ!.k3&!36+P"croZ!.k3&!.k3b!.kC:"e>XF!.k39!:C#B"o/=Z!.k3&!2onP"cW]Z
!.k3&!.k3_!6>>:"lfT7!.k3&!6tSP"g\BZ!.k3&!.k40!29Y:"hanf!.k3&!;$8P"ka'Z!58Gb!.k3o
!4W3:"k*I'!.k3&!8[^P"iCMZ!.k3&!.k4@!0RN:"g%cV!.k3)!<*.R"mH2Z!.k3&!13cP"bHpU"c!)0
!.k3O!8%I:"nM_G!.k3&!58Gb"m,uZ!.k3&!0mQP"bHpR"c<;3!.k3L!8@[:"nhqJ!.k3&!4r6P"eZ%Z
!.k3&!.k3r!4<!:"jd7$!.k3&!9!pP"i^_Z!.k3&!.k4C!07<:"f_R:!.k3&!6YAP"gA0Z!.k3&!.k4-
!2Tk:"i(+i!.k3&!:^&P"kEjZ!.k3&!/1FP"bHpB"e#FC!.k3<!.Y~>

%%EndBinary
grestore
np
grestore
145.237 132.014 mo
145.237 21.5594 li
@
255.691 132.014 mo
255.691 21.5594 li
@
145.237 132.014 mo
255.691 132.014 li
@
145.237 21.5594 mo
255.691 21.5594 li
@
172.987 100.7 mo
171.647 104.33 li
174.327 104.33 li
172.987 100.7 li
172.427 99.73 mo
173.547 99.73 li
176.327 107.02 li
175.297 107.02 li
174.637 105.15 li
171.347 105.15 li
170.687 107.02 li
169.647 107.02 li
172.427 99.73 li
0 1 1 0 cmyk
f
226.48 48.5889 mo
226.48 51.2589 li
228.06 51.2589 li
228.59 51.2589 228.98 51.1489 229.24 50.9289 cv
229.49 50.7089 229.62 50.3789 229.62 49.9189 cv
229.62 49.4689 229.49 49.1389 229.24 48.9189 cv
228.98 48.6989 228.59 48.5889 228.06 48.5889 cv
226.48 48.5889 li
226.48 45.5889 mo
226.48 47.7889 li
227.94 47.7889 li
228.42 47.7889 228.77 47.6989 229.01 47.5189 cv
229.25 47.3389 229.37 47.0689 229.37 46.6889 cv
229.37 46.3289 229.25 46.0489 229.01 45.8689 cv
228.77 45.6889 228.42 45.5889 227.94 45.5889 cv
226.48 45.5889 li
225.49 44.7789 mo
228.01 44.7789 li
228.76 44.7789 229.34 44.9389 229.75 45.2489 cv
230.15 45.5689 230.36 46.0089 230.36 46.5789 cv
230.36 47.0289 230.25 47.3889 230.04 47.6489 cv
229.83 47.9089 229.53 48.0789 229.13 48.1389 cv
229.61 48.2489 229.99 48.4689 230.26 48.7989 cv
230.52 49.1289 230.66 49.5389 230.66 50.0289 cv
230.66 50.6889 230.43 51.1889 229.99 51.5389 cv
229.55 51.8989 228.92 52.0689 228.11 52.0689 cv
225.49 52.0689 li
225.49 44.7789 li
.690455 0 1 0 cmyk
f
139.804 7.21037 mo
139.32 8.04637 138.968 8.86037 138.737 9.66337 cv
138.495 10.4664 138.385 11.2804 138.385 12.1054 cv
138.385 12.9414 138.495 13.7554 138.737 14.5584 cv
138.968 15.3724 139.32 16.1754 139.804 17.0004 cv
138.946 17.0004 li
138.407 16.1534 138 15.3394 137.736 14.5254 cv
137.472 13.7114 137.34 12.9084 137.34 12.1054 cv
137.34 11.3134 137.472 10.5104 137.736 9.69637 cv
138 8.88237 138.396 8.05737 138.946 7.21037 cv
139.804 7.21037 li
1 /0 /CSD get_res sepcs
1 sep
f
146.041 12.5564 mo
146.041 11.8304 145.887 11.2694 145.59 10.8514 cv
145.282 10.4334 144.875 10.2244 144.358 10.2244 cv
143.83 10.2244 143.423 10.4334 143.126 10.8514 cv
142.818 11.2694 142.675 11.8304 142.675 12.5564 cv
142.675 13.2824 142.818 13.8544 143.126 14.2724 cv
143.423 14.6904 143.83 14.8884 144.358 14.8884 cv
144.875 14.8884 145.282 14.6904 145.59 14.2724 cv
145.887 13.8544 146.041 13.2824 146.041 12.5564 cv
142.675 10.4554 mo
142.873 10.1034 143.137 9.83937 143.456 9.66337 cv
143.775 9.48737 144.16 9.39937 144.6 9.39937 cv
145.326 9.39937 145.92 9.69637 146.382 10.2684 cv
146.833 10.8514 147.064 11.6104 147.064 12.5564 cv
147.064 13.5024 146.833 14.2724 146.382 14.8444 cv
145.92 15.4164 145.326 15.7024 144.6 15.7024 cv
144.16 15.7024 143.775 15.6144 143.456 15.4494 cv
143.137 15.2844 142.873 15.0204 142.675 14.6574 cv
142.675 15.5594 li
141.685 15.5594 li
141.685 7.19937 li
142.675 7.19937 li
142.675 10.4554 li
f
148.549 7.21037 mo
149.407 7.21037 li
149.935 8.05737 150.342 8.88237 150.606 9.69637 cv
150.87 10.5104 151.013 11.3134 151.013 12.1054 cv
151.013 12.9084 150.87 13.7114 150.606 14.5254 cv
150.342 15.3394 149.935 16.1534 149.407 17.0004 cv
148.549 17.0004 li
149.022 16.1754 149.374 15.3724 149.616 14.5584 cv
149.847 13.7554 149.968 12.9414 149.968 12.1054 cv
149.968 11.2804 149.847 10.4664 149.616 9.66337 cv
149.374 8.86037 149.022 8.04637 148.549 7.21037 cv
f
160.341 11.7974 mo
160.572 11.8854 160.803 12.0504 161.023 12.3034 cv
161.243 12.5674 161.463 12.9194 161.683 13.3704 cv
162.783 15.5594 li
161.617 15.5594 li
160.594 13.5024 li
160.33 12.9744 160.066 12.6114 159.824 12.4354 cv
159.571 12.2594 159.23 12.1714 158.801 12.1714 cv
157.624 12.1714 li
157.624 15.5594 li
156.535 15.5594 li
156.535 7.54037 li
158.988 7.54037 li
159.901 7.54037 160.583 7.73837 161.034 8.11237 cv
161.485 8.49737 161.716 9.08037 161.716 9.85037 cv
161.716 10.3564 161.595 10.7854 161.364 11.1154 cv
161.122 11.4454 160.781 11.6764 160.341 11.7974 cv
157.624 8.43137 mo
157.624 11.2804 li
158.988 11.2804 li
159.505 11.2804 159.901 11.1594 160.165 10.9174 cv
160.429 10.6754 160.572 10.3234 160.572 9.85037 cv
160.572 9.38837 160.429 9.03637 160.165 8.79437 cv
159.901 8.55237 159.505 8.43137 158.988 8.43137 cv
157.624 8.43137 li
f
169.284 12.3034 mo
169.284 12.7874 li
164.741 12.7874 li
164.785 13.4694 164.983 13.9974 165.357 14.3494 cv
165.72 14.7014 166.226 14.8774 166.886 14.8774 cv
167.26 14.8774 167.634 14.8334 167.986 14.7454 cv
168.338 14.6574 168.701 14.5144 169.053 14.3164 cv
169.053 15.2514 li
168.701 15.4054 168.338 15.5264 167.964 15.5924 cv
167.59 15.6584 167.205 15.7024 166.831 15.7024 cv
165.863 15.7024 165.104 15.4274 164.543 14.8774 cv
163.982 14.3274 163.707 13.5684 163.707 12.6114 cv
163.707 11.6324 163.971 10.8514 164.499 10.2684 cv
165.027 9.69637 165.753 9.39937 166.655 9.39937 cv
167.469 9.39937 168.107 9.66337 168.58 10.1804 cv
169.042 10.7084 169.284 11.4124 169.284 12.3034 cv
168.294 12.0174 mo
168.283 11.4784 168.129 11.0494 167.843 10.7194 cv
167.546 10.4004 167.15 10.2354 166.666 10.2354 cv
166.116 10.2354 165.676 10.4004 165.346 10.7084 cv
165.016 11.0164 164.818 11.4564 164.774 12.0174 cv
168.294 12.0174 li
f
171.858 14.6574 mo
171.858 17.8364 li
170.868 17.8364 li
170.868 9.54237 li
171.858 9.54237 li
171.858 10.4554 li
172.056 10.1034 172.32 9.83937 172.639 9.66337 cv
172.958 9.48737 173.343 9.39937 173.783 9.39937 cv
174.509 9.39937 175.103 9.69637 175.565 10.2684 cv
176.016 10.8514 176.247 11.6104 176.247 12.5564 cv
176.247 13.5024 176.016 14.2724 175.565 14.8444 cv
175.103 15.4164 174.509 15.7024 173.783 15.7024 cv
173.343 15.7024 172.958 15.6144 172.639 15.4494 cv
172.32 15.2844 172.056 15.0204 171.858 14.6574 cv
175.224 12.5564 mo
175.224 11.8304 175.07 11.2694 174.773 10.8514 cv
174.465 10.4334 174.058 10.2244 173.541 10.2244 cv
173.013 10.2244 172.606 10.4334 172.309 10.8514 cv
172.001 11.2694 171.858 11.8304 171.858 12.5564 cv
171.858 13.2824 172.001 13.8544 172.309 14.2724 cv
172.606 14.6904 173.013 14.8884 173.541 14.8884 cv
174.058 14.8884 174.465 14.6904 174.773 14.2724 cv
175.07 13.8544 175.224 13.2824 175.224 12.5564 cv
f
181.373 10.4664 mo
181.263 10.4004 181.142 10.3564 181.01 10.3234 cv
180.878 10.3014 180.735 10.2794 180.581 10.2794 cv
180.02 10.2794 179.591 10.4664 179.294 10.8294 cv
178.986 11.1924 178.843 11.7094 178.843 12.3914 cv
178.843 15.5594 li
177.853 15.5594 li
177.853 9.54237 li
178.843 9.54237 li
178.843 10.4774 li
179.041 10.1144 179.316 9.83937 179.646 9.66337 cv
179.976 9.48737 180.383 9.39937 180.867 9.39937 cv
181.098 9.41037 li
181.175 9.42137 181.263 9.43237 181.373 9.45437 cv
181.373 10.4664 li
f
187.555 12.3034 mo
187.555 12.7874 li
183.012 12.7874 li
183.056 13.4694 183.254 13.9974 183.628 14.3494 cv
183.991 14.7014 184.497 14.8774 185.157 14.8774 cv
185.531 14.8774 185.905 14.8334 186.257 14.7454 cv
186.609 14.6574 186.972 14.5144 187.324 14.3164 cv
187.324 15.2514 li
186.972 15.4054 186.609 15.5264 186.235 15.5924 cv
185.861 15.6584 185.476 15.7024 185.102 15.7024 cv
184.134 15.7024 183.375 15.4274 182.814 14.8774 cv
182.253 14.3274 181.978 13.5684 181.978 12.6114 cv
181.978 11.6324 182.242 10.8514 182.77 10.2684 cv
183.298 9.69637 184.024 9.39937 184.926 9.39937 cv
185.74 9.39937 186.378 9.66337 186.851 10.1804 cv
187.313 10.7084 187.555 11.4124 187.555 12.3034 cv
186.565 12.0174 mo
186.554 11.4784 186.4 11.0494 186.114 10.7194 cv
185.817 10.4004 185.421 10.2354 184.937 10.2354 cv
184.387 10.2354 183.947 10.4004 183.617 10.7084 cv
183.287 11.0164 183.089 11.4564 183.045 12.0174 cv
186.565 12.0174 li
f
193.011 9.71837 mo
193.011 10.6534 li
192.725 10.5214 192.439 10.4114 192.142 10.3344 cv
191.834 10.2684 191.526 10.2244 191.207 10.2244 cv
190.712 10.2244 190.338 10.3014 190.096 10.4554 cv
189.854 10.6094 189.733 10.8294 189.733 11.1264 cv
189.733 11.3574 189.821 11.5334 189.997 11.6654 cv
190.173 11.7974 190.525 11.9294 191.053 12.0394 cv
191.394 12.1164 li
192.098 12.2704 192.593 12.4904 192.89 12.7544 cv
193.176 13.0294 193.33 13.4144 193.33 13.8984 cv
193.33 14.4594 193.11 14.8994 192.67 15.2184 cv
192.23 15.5484 191.614 15.7024 190.844 15.7024 cv
190.514 15.7024 190.184 15.6694 189.832 15.6144 cv
189.48 15.5594 189.117 15.4714 188.732 15.3394 cv
188.732 14.3164 li
189.095 14.5144 189.458 14.6574 189.81 14.7454 cv
190.162 14.8444 190.514 14.8884 190.866 14.8884 cv
191.328 14.8884 191.691 14.8114 191.944 14.6574 cv
192.186 14.5034 192.318 14.2724 192.318 13.9754 cv
192.318 13.7114 192.219 13.5024 192.043 13.3594 cv
191.867 13.2164 191.471 13.0734 190.855 12.9414 cv
190.514 12.8644 li
189.898 12.7324 189.447 12.5344 189.183 12.2704 cv
188.908 12.0064 188.776 11.6434 188.776 11.1704 cv
188.776 10.6094 188.974 10.1694 189.37 9.86137 cv
189.766 9.55337 190.338 9.39937 191.086 9.39937 cv
191.449 9.39937 191.79 9.43237 192.12 9.48737 cv
192.439 9.54237 192.736 9.61937 193.011 9.71837 cv
f
200.051 12.3034 mo
200.051 12.7874 li
195.508 12.7874 li
195.552 13.4694 195.75 13.9974 196.124 14.3494 cv
196.487 14.7014 196.993 14.8774 197.653 14.8774 cv
198.027 14.8774 198.401 14.8334 198.753 14.7454 cv
199.105 14.6574 199.468 14.5144 199.82 14.3164 cv
199.82 15.2514 li
199.468 15.4054 199.105 15.5264 198.731 15.5924 cv
198.357 15.6584 197.972 15.7024 197.598 15.7024 cv
196.63 15.7024 195.871 15.4274 195.31 14.8774 cv
194.749 14.3274 194.474 13.5684 194.474 12.6114 cv
194.474 11.6324 194.738 10.8514 195.266 10.2684 cv
195.794 9.69637 196.52 9.39937 197.422 9.39937 cv
198.236 9.39937 198.874 9.66337 199.347 10.1804 cv
199.809 10.7084 200.051 11.4124 200.051 12.3034 cv
199.061 12.0174 mo
199.05 11.4784 198.896 11.0494 198.61 10.7194 cv
198.313 10.4004 197.917 10.2354 197.433 10.2354 cv
196.883 10.2354 196.443 10.4004 196.113 10.7084 cv
195.783 11.0164 195.585 11.4564 195.541 12.0174 cv
199.061 12.0174 li
f
206.673 11.9294 mo
206.673 15.5594 li
205.683 15.5594 li
205.683 11.9624 li
205.683 11.3904 205.562 10.9724 205.342 10.6864 cv
205.122 10.4004 204.792 10.2574 204.352 10.2574 cv
203.813 10.2574 203.395 10.4334 203.087 10.7744 cv
202.779 11.1154 202.625 11.5774 202.625 12.1604 cv
202.625 15.5594 li
201.635 15.5594 li
201.635 9.54237 li
202.625 9.54237 li
202.625 10.4774 li
202.856 10.1254 203.131 9.85037 203.461 9.67437 cv
203.78 9.49837 204.154 9.39937 204.572 9.39937 cv
205.254 9.39937 205.782 9.61937 206.134 10.0484 cv
206.486 10.4774 206.673 11.1044 206.673 11.9294 cv
f
209.621 7.83737 mo
209.621 9.54237 li
211.656 9.54237 li
211.656 10.3124 li
209.621 10.3124 li
209.621 13.5794 li
209.621 14.0744 209.687 14.3934 209.819 14.5254 cv
209.951 14.6684 210.226 14.7344 210.644 14.7344 cv
211.656 14.7344 li
211.656 15.5594 li
210.644 15.5594 li
209.874 15.5594 209.346 15.4164 209.06 15.1304 cv
208.774 14.8444 208.631 14.3274 208.631 13.5794 cv
208.631 10.3124 li
207.905 10.3124 li
207.905 9.54237 li
208.631 9.54237 li
208.631 7.83737 li
209.621 7.83737 li
f
215.693 12.5344 mo
214.89 12.5344 214.34 12.6334 214.032 12.8094 cv
213.724 12.9964 213.57 13.3044 213.57 13.7444 cv
213.57 14.0964 213.68 14.3824 213.911 14.5804 cv
214.142 14.7894 214.461 14.8884 214.857 14.8884 cv
215.407 14.8884 215.847 14.7014 216.177 14.3054 cv
216.507 13.9204 216.672 13.4034 216.672 12.7544 cv
216.672 12.5344 li
215.693 12.5344 li
217.662 12.1274 mo
217.662 15.5594 li
216.672 15.5594 li
216.672 14.6464 li
216.441 15.0204 216.155 15.2844 215.825 15.4494 cv
215.495 15.6144 215.077 15.7024 214.593 15.7024 cv
213.977 15.7024 213.482 15.5374 213.119 15.1964 cv
212.756 14.8554 212.58 14.3934 212.58 13.8104 cv
212.58 13.1394 212.8 12.6334 213.262 12.2814 cv
213.713 11.9404 214.384 11.7644 215.286 11.7644 cv
216.672 11.7644 li
216.672 11.6654 li
216.672 11.2144 216.518 10.8624 216.221 10.6094 cv
215.924 10.3674 215.506 10.2354 214.967 10.2354 cv
214.615 10.2354 214.285 10.2794 213.955 10.3674 cv
213.625 10.4554 213.317 10.5764 213.02 10.7304 cv
213.02 9.81737 li
213.372 9.68537 213.724 9.57537 214.065 9.50937 cv
214.406 9.44337 214.736 9.39937 215.066 9.39937 cv
215.935 9.39937 216.584 9.63037 217.013 10.0814 cv
217.442 10.5324 217.662 11.2144 217.662 12.1274 cv
f
220.676 7.83737 mo
220.676 9.54237 li
222.711 9.54237 li
222.711 10.3124 li
220.676 10.3124 li
220.676 13.5794 li
220.676 14.0744 220.742 14.3934 220.874 14.5254 cv
221.006 14.6684 221.281 14.7344 221.699 14.7344 cv
222.711 14.7344 li
222.711 15.5594 li
221.699 15.5594 li
220.929 15.5594 220.401 15.4164 220.115 15.1304 cv
219.829 14.8444 219.686 14.3274 219.686 13.5794 cv
219.686 10.3124 li
218.96 10.3124 li
218.96 9.54237 li
219.686 9.54237 li
219.686 7.83737 li
220.676 7.83737 li
f
224.009 9.54237 mo
224.999 9.54237 li
224.999 15.5594 li
224.009 15.5594 li
224.009 9.54237 li
224.009 7.19937 mo
224.999 7.19937 li
224.999 8.45337 li
224.009 8.45337 li
224.009 7.19937 li
f
226.363 9.54237 mo
227.408 9.54237 li
229.289 14.5914 li
231.17 9.54237 li
232.215 9.54237 li
229.96 15.5594 li
228.618 15.5594 li
226.363 9.54237 li
f
238.727 12.3034 mo
238.727 12.7874 li
234.184 12.7874 li
234.228 13.4694 234.426 13.9974 234.8 14.3494 cv
235.163 14.7014 235.669 14.8774 236.329 14.8774 cv
236.703 14.8774 237.077 14.8334 237.429 14.7454 cv
237.781 14.6574 238.144 14.5144 238.496 14.3164 cv
238.496 15.2514 li
238.144 15.4054 237.781 15.5264 237.407 15.5924 cv
237.033 15.6584 236.648 15.7024 236.274 15.7024 cv
235.306 15.7024 234.547 15.4274 233.986 14.8774 cv
233.425 14.3274 233.15 13.5684 233.15 12.6114 cv
233.15 11.6324 233.414 10.8514 233.942 10.2684 cv
234.47 9.69637 235.196 9.39937 236.098 9.39937 cv
236.912 9.39937 237.55 9.66337 238.023 10.1804 cv
238.485 10.7084 238.727 11.4124 238.727 12.3034 cv
237.737 12.0174 mo
237.726 11.4784 237.572 11.0494 237.286 10.7194 cv
236.989 10.4004 236.593 10.2354 236.109 10.2354 cv
235.559 10.2354 235.119 10.4004 234.789 10.7084 cv
234.459 11.0164 234.261 11.4564 234.217 12.0174 cv
237.737 12.0174 li
f
245.349 11.9294 mo
245.349 15.5594 li
244.359 15.5594 li
244.359 11.9624 li
244.359 11.3904 244.238 10.9724 244.018 10.6864 cv
243.798 10.4004 243.468 10.2574 243.028 10.2574 cv
242.489 10.2574 242.071 10.4334 241.763 10.7744 cv
241.455 11.1154 241.301 11.5774 241.301 12.1604 cv
241.301 15.5594 li
240.311 15.5594 li
240.311 9.54237 li
241.301 9.54237 li
241.301 10.4774 li
241.532 10.1254 241.807 9.85037 242.137 9.67437 cv
242.456 9.49837 242.83 9.39937 243.248 9.39937 cv
243.93 9.39937 244.458 9.61937 244.81 10.0484 cv
245.162 10.4774 245.349 11.1044 245.349 11.9294 cv
f
252.466 12.3034 mo
252.466 12.7874 li
247.923 12.7874 li
247.967 13.4694 248.165 13.9974 248.539 14.3494 cv
248.902 14.7014 249.408 14.8774 250.068 14.8774 cv
250.442 14.8774 250.816 14.8334 251.168 14.7454 cv
251.52 14.6574 251.883 14.5144 252.235 14.3164 cv
252.235 15.2514 li
251.883 15.4054 251.52 15.5264 251.146 15.5924 cv
250.772 15.6584 250.387 15.7024 250.013 15.7024 cv
249.045 15.7024 248.286 15.4274 247.725 14.8774 cv
247.164 14.3274 246.889 13.5684 246.889 12.6114 cv
246.889 11.6324 247.153 10.8514 247.681 10.2684 cv
248.209 9.69637 248.935 9.39937 249.837 9.39937 cv
250.651 9.39937 251.289 9.66337 251.762 10.1804 cv
252.224 10.7084 252.466 11.4124 252.466 12.3034 cv
251.476 12.0174 mo
251.465 11.4784 251.311 11.0494 251.025 10.7194 cv
250.728 10.4004 250.332 10.2354 249.848 10.2354 cv
249.298 10.2354 248.858 10.4004 248.528 10.7084 cv
248.198 11.0164 248 11.4564 247.956 12.0174 cv
251.476 12.0174 li
f
257.922 9.71837 mo
257.922 10.6534 li
257.636 10.5214 257.35 10.4114 257.053 10.3344 cv
256.745 10.2684 256.437 10.2244 256.118 10.2244 cv
255.623 10.2244 255.249 10.3014 255.007 10.4554 cv
254.765 10.6094 254.644 10.8294 254.644 11.1264 cv
254.644 11.3574 254.732 11.5334 254.908 11.6654 cv
255.084 11.7974 255.436 11.9294 255.964 12.0394 cv
256.305 12.1164 li
257.009 12.2704 257.504 12.4904 257.801 12.7544 cv
258.087 13.0294 258.241 13.4144 258.241 13.8984 cv
258.241 14.4594 258.021 14.8994 257.581 15.2184 cv
257.141 15.5484 256.525 15.7024 255.755 15.7024 cv
255.425 15.7024 255.095 15.6694 254.743 15.6144 cv
254.391 15.5594 254.028 15.4714 253.643 15.3394 cv
253.643 14.3164 li
254.006 14.5144 254.369 14.6574 254.721 14.7454 cv
255.073 14.8444 255.425 14.8884 255.777 14.8884 cv
256.239 14.8884 256.602 14.8114 256.855 14.6574 cv
257.097 14.5034 257.229 14.2724 257.229 13.9754 cv
257.229 13.7114 257.13 13.5024 256.954 13.3594 cv
256.778 13.2164 256.382 13.0734 255.766 12.9414 cv
255.425 12.8644 li
254.809 12.7324 254.358 12.5344 254.094 12.2704 cv
253.819 12.0064 253.687 11.6434 253.687 11.1704 cv
253.687 10.6094 253.885 10.1694 254.281 9.86137 cv
254.677 9.55337 255.249 9.39937 255.997 9.39937 cv
256.36 9.39937 256.701 9.43237 257.031 9.48737 cv
257.35 9.54237 257.647 9.61937 257.922 9.71837 cv
f
263.653 9.71837 mo
263.653 10.6534 li
263.367 10.5214 263.081 10.4114 262.784 10.3344 cv
262.476 10.2684 262.168 10.2244 261.849 10.2244 cv
261.354 10.2244 260.98 10.3014 260.738 10.4554 cv
260.496 10.6094 260.375 10.8294 260.375 11.1264 cv
260.375 11.3574 260.463 11.5334 260.639 11.6654 cv
260.815 11.7974 261.167 11.9294 261.695 12.0394 cv
262.036 12.1164 li
262.74 12.2704 263.235 12.4904 263.532 12.7544 cv
263.818 13.0294 263.972 13.4144 263.972 13.8984 cv
263.972 14.4594 263.752 14.8994 263.312 15.2184 cv
262.872 15.5484 262.256 15.7024 261.486 15.7024 cv
261.156 15.7024 260.826 15.6694 260.474 15.6144 cv
260.122 15.5594 259.759 15.4714 259.374 15.3394 cv
259.374 14.3164 li
259.737 14.5144 260.1 14.6574 260.452 14.7454 cv
260.804 14.8444 261.156 14.8884 261.508 14.8884 cv
261.97 14.8884 262.333 14.8114 262.586 14.6574 cv
262.828 14.5034 262.96 14.2724 262.96 13.9754 cv
262.96 13.7114 262.861 13.5024 262.685 13.3594 cv
262.509 13.2164 262.113 13.0734 261.497 12.9414 cv
261.156 12.8644 li
260.54 12.7324 260.089 12.5344 259.825 12.2704 cv
259.55 12.0064 259.418 11.6434 259.418 11.1704 cv
259.418 10.6094 259.616 10.1694 260.012 9.86137 cv
260.408 9.55337 260.98 9.39937 261.728 9.39937 cv
262.091 9.39937 262.432 9.43237 262.762 9.48737 cv
263.081 9.54237 263.378 9.61937 263.653 9.71837 cv
f
gsave
266.491 125.027 mo
277.291 125.027 li
277.291 29.9866 li
266.491 29.9866 li
cp
clp
266.491 125.027 mo
266.491 124.655 li
266.491 30.3579 li
266.491 29.9866 li
277.291 29.9866 li
277.291 30.3579 li
277.291 124.655 li
277.291 125.027 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
.01 lw
0 lc
266.491 125.027 mo
266.491 124.655 li
266.491 30.3579 li
266.491 29.9866 li
277.291 29.9866 li
277.291 30.3579 li
277.291 124.655 li
277.291 125.027 li
cp
@
grestore
266.4 124.56 mo
277.2 124.56 li
277.2 29.52 li
266.4 29.52 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 143.697 ]ct
[10.8 0 0 95.04 266.4 19.137 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 15 
/H 132 
/M[15 0 0 -132 0 132 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 15 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 15 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 15 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 15 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
o)J:9nj;nXo)J:9nj;nTqZ$Bko%`e&nlPD^o%`e'nk\lW!<;WFnjDt<o)J:8nj;n3o)JU@ptG:)ni64?
o%NY"nhK_8o[j,pnilUoo)J:3niZIho)J:2r&XR5nfRH&o$m4ineq#uo$d7gr\X0\o)J:.nhK\Ho)J:-
nh'eJp'^Hko$?kXnd=sfo$-_Qp':O$o)J:(nfdQ-o)J:%nfI?)rr;Zko#L;AncJC^o#(#9ncJRcr;Z?'
neUcto)J9one1Koo)Ja$oXaT%nc87\o!e/tnc87\pp9k(nd4jeo)/'^nd4jeo(hjW!!i*#nc87Tnu)$_
nc87QntPp`q??Eio()@CnceRao'u:@nceRao'Q"7nc\L`o'>k1nc\dhq#L!LnrN>Dnc87Dnr*&@o)Jaj
o&T@snc\L`o&0(incnXbqqh,)npU'6nc878np0d3nc8=7s4Hmbnd4jeo%*AOnd4jeo$dMSpMTO.nc87.
nnR_&nc87,ok+28nd=pfo$$Z7ndG!go#^H1r<r<,nc87$nm(_mnc87#nlteqr<r/ro#($"ndG!go"jlr
ndPKto`4Qsnknrenc86mnkS`cpAk*ko""<andb3jo!\*]ndb3js0VF*nji6\nc86bnjW*Znc8Hfql]KV
ndb3jnuM=IndY-inu)OPo02^Snc86XniQCOnc86Uq)S:3ndb3jntGV6ndY-int#>0ndY-inso8.ndY-i
nsT&(q@360nc86Hnh9PCnc86Fnh9SC!"ADunrWDondY-inr*&gndY-inq[&hq'Y_Bnc867ngEu<nc863
o-FA_ndb3jnpU'Rndb3jnp9jMq[`H4nc86)nfdQ6nc86&nfRK6rsnT"no=4@ndk9knnmq;ndkWupAjc!
nf731nc85nnf%'0o`4sknn%A0ndb3jnmV)*ndb3jrEo8*ne^j,nc85dne^j,nc8AerEAb.ndP'hnlYGt
ndY-inl5T'obI$+nc85ZneCX&nc85VpD!N>nd=pfnkJZhnd=pfnk/HersA<(nc85Nne:R"nc85Kne:d&
qZcTknj;m[nceRaniu[Xnc]!no)S>Ene1Krnc85Bne1Krq#L6kni61Pnc\L`ni$%OncSF_nhotMnc\L`
nh]hJncSF_qD.k%ndk9nnc856ndk9nnc887!&*mQncSF_nh'DBncJ@^ngsYIp^Qcrnc851ndP'jnc850
oF([,ncJ@^ngEu9ncA:]ng<o7quZTonc85+nd4jfnc85*nd4sjrW;WjnfdQ1ncA:]nf[K0ncA[hp&OY)
nd4=Vnf73,ncAFar;cC-nd+7Unf%'(irK&qobd6)irJWdncn+SpD!N>ncn+Sne:QtirJW^rrr#uirJW]
nc[tQndbEtqZPpZndY-lirJWXncJjlj8e`WncIhOnd4jgq#K^\nd+deirJWTirJWMJ,~>

%%EndBinary
grestore
np
281.771 115.938 mo
282.761 115.938 li
282.761 122.398 li
286.311 122.398 li
286.311 123.228 li
281.771 123.228 li
281.771 115.938 li
1 /0 /CSD get_res sepcs
1 sep
f
289.422 118.388 mo
288.942 118.388 288.562 118.578 288.282 118.958 cv
288.002 119.338 287.862 119.848 287.862 120.498 cv
287.862 121.158 287.992 121.668 288.272 122.048 cv
288.552 122.428 288.932 122.608 289.422 122.608 cv
289.902 122.608 290.282 122.428 290.562 122.048 cv
290.842 121.668 290.982 121.158 290.982 120.498 cv
290.982 119.858 290.842 119.338 290.562 118.958 cv
290.282 118.578 289.902 118.388 289.422 118.388 cv
289.422 117.628 mo
290.202 117.628 290.812 117.888 291.262 118.388 cv
291.702 118.898 291.932 119.598 291.932 120.498 cv
291.932 121.398 291.702 122.098 291.262 122.598 cv
290.812 123.108 290.202 123.358 289.422 123.358 cv
288.632 123.358 288.012 123.108 287.572 122.598 cv
287.132 122.098 286.912 121.398 286.912 120.498 cv
286.912 119.598 287.132 118.898 287.572 118.388 cv
288.012 117.888 288.632 117.628 289.422 117.628 cv
f
292.902 117.758 mo
293.802 117.758 li
294.922 122.028 li
296.042 117.758 li
297.102 117.758 li
298.222 122.028 li
299.342 117.758 li
300.242 117.758 li
298.812 123.228 li
297.752 123.228 li
296.572 118.748 li
295.392 123.228 li
294.332 123.228 li
292.902 117.758 li
f
306.281 120.268 mo
306.281 120.708 li
302.151 120.708 li
302.191 121.328 302.371 121.808 302.711 122.128 cv
303.041 122.448 303.501 122.608 304.101 122.608 cv
304.441 122.608 304.781 122.568 305.101 122.488 cv
305.421 122.408 305.751 122.278 306.071 122.098 cv
306.071 122.948 li
305.751 123.088 305.421 123.198 305.081 123.258 cv
304.741 123.318 304.391 123.358 304.051 123.358 cv
303.171 123.358 302.481 123.108 301.971 122.608 cv
301.461 122.108 301.211 121.418 301.211 120.548 cv
301.211 119.658 301.451 118.948 301.931 118.418 cv
302.411 117.898 303.071 117.628 303.891 117.628 cv
304.631 117.628 305.211 117.868 305.641 118.338 cv
306.061 118.818 306.281 119.458 306.281 120.268 cv
305.381 120.008 mo
305.371 119.518 305.231 119.128 304.971 118.828 cv
304.701 118.538 304.341 118.388 303.901 118.388 cv
303.401 118.388 303.001 118.538 302.701 118.818 cv
302.401 119.098 302.221 119.498 302.181 120.008 cv
305.381 120.008 li
f
311.242 117.918 mo
311.242 118.768 li
310.982 118.648 310.722 118.548 310.452 118.478 cv
310.172 118.418 309.892 118.378 309.602 118.378 cv
309.152 118.378 308.812 118.448 308.592 118.588 cv
308.372 118.728 308.262 118.928 308.262 119.198 cv
308.262 119.408 308.342 119.568 308.502 119.688 cv
308.662 119.808 308.982 119.928 309.462 120.028 cv
309.772 120.098 li
310.412 120.238 310.862 120.438 311.132 120.678 cv
311.392 120.928 311.532 121.278 311.532 121.718 cv
311.532 122.228 311.332 122.628 310.932 122.918 cv
310.532 123.218 309.972 123.358 309.272 123.358 cv
308.972 123.358 308.672 123.328 308.352 123.278 cv
308.032 123.228 307.702 123.148 307.352 123.028 cv
307.352 122.098 li
307.682 122.278 308.012 122.408 308.332 122.488 cv
308.652 122.578 308.972 122.618 309.292 122.618 cv
309.712 122.618 310.042 122.548 310.272 122.408 cv
310.492 122.268 310.612 122.058 310.612 121.788 cv
310.612 121.548 310.522 121.358 310.362 121.228 cv
310.202 121.098 309.842 120.968 309.282 120.848 cv
308.972 120.778 li
308.412 120.658 308.002 120.478 307.762 120.238 cv
307.512 119.998 307.392 119.668 307.392 119.238 cv
307.392 118.728 307.572 118.328 307.932 118.048 cv
308.292 117.768 308.812 117.628 309.492 117.628 cv
309.822 117.628 310.132 117.658 310.432 117.708 cv
310.722 117.758 310.992 117.828 311.242 117.918 cv
f
313.851 116.208 mo
313.851 117.758 li
315.701 117.758 li
315.701 118.458 li
313.851 118.458 li
313.851 121.428 li
313.851 121.878 313.911 122.168 314.031 122.288 cv
314.151 122.418 314.401 122.478 314.781 122.478 cv
315.701 122.478 li
315.701 123.228 li
314.781 123.228 li
314.081 123.228 313.601 123.098 313.341 122.838 cv
313.081 122.578 312.951 122.108 312.951 121.428 cv
312.951 118.458 li
312.291 118.458 li
312.291 117.758 li
312.951 117.758 li
312.951 116.208 li
313.851 116.208 li
f
282.761 127.939 mo
282.761 130.679 li
284.001 130.679 li
284.461 130.679 284.811 130.569 285.061 130.329 cv
285.311 130.089 285.441 129.749 285.441 129.309 cv
285.441 128.869 285.311 128.539 285.061 128.299 cv
284.811 128.059 284.461 127.939 284.001 127.939 cv
282.761 127.939 li
281.771 127.129 mo
284.001 127.129 li
284.811 127.129 285.431 127.319 285.851 127.689 cv
286.271 128.059 286.481 128.599 286.481 129.309 cv
286.481 130.029 286.271 130.579 285.851 130.939 cv
285.431 131.309 284.811 131.489 284.001 131.489 cv
282.761 131.489 li
282.761 134.419 li
281.771 134.419 li
281.771 127.129 li
f
290.931 129.789 mo
290.831 129.729 290.721 129.689 290.601 129.659 cv
290.481 129.639 290.351 129.619 290.211 129.619 cv
289.701 129.619 289.311 129.789 289.041 130.119 cv
288.761 130.449 288.631 130.919 288.631 131.539 cv
288.631 134.419 li
287.731 134.419 li
287.731 128.949 li
288.631 128.949 li
288.631 129.799 li
288.811 129.469 289.061 129.219 289.361 129.059 cv
289.661 128.899 290.031 128.819 290.471 128.819 cv
290.681 128.829 li
290.751 128.839 290.831 128.849 290.931 128.869 cv
290.931 129.789 li
f
293.991 129.579 mo
293.511 129.579 293.131 129.769 292.851 130.149 cv
292.571 130.529 292.431 131.039 292.431 131.689 cv
292.431 132.349 292.561 132.859 292.841 133.239 cv
293.121 133.619 293.501 133.799 293.991 133.799 cv
294.471 133.799 294.851 133.619 295.131 133.239 cv
295.411 132.859 295.551 132.349 295.551 131.689 cv
295.551 131.049 295.411 130.529 295.131 130.149 cv
294.851 129.769 294.471 129.579 293.991 129.579 cv
293.991 128.819 mo
294.771 128.819 295.381 129.079 295.831 129.579 cv
296.271 130.089 296.501 130.789 296.501 131.689 cv
296.501 132.589 296.271 133.289 295.831 133.789 cv
295.381 134.299 294.771 134.549 293.991 134.549 cv
293.201 134.549 292.581 134.299 292.141 133.789 cv
291.701 133.289 291.481 132.589 291.481 131.689 cv
291.481 130.789 291.701 130.089 292.141 129.579 cv
292.581 129.079 293.201 128.819 293.991 128.819 cv
f
301.921 131.689 mo
301.921 131.029 301.781 130.519 301.511 130.139 cv
301.231 129.759 300.861 129.569 300.391 129.569 cv
299.911 129.569 299.541 129.759 299.271 130.139 cv
298.991 130.519 298.861 131.029 298.861 131.689 cv
298.861 132.349 298.991 132.869 299.271 133.249 cv
299.541 133.629 299.911 133.809 300.391 133.809 cv
300.861 133.809 301.231 133.629 301.511 133.249 cv
301.781 132.869 301.921 132.349 301.921 131.689 cv
298.861 129.779 mo
299.041 129.459 299.281 129.219 299.571 129.059 cv
299.861 128.899 300.211 128.819 300.611 128.819 cv
301.271 128.819 301.811 129.089 302.231 129.609 cv
302.641 130.139 302.851 130.829 302.851 131.689 cv
302.851 132.549 302.641 133.249 302.231 133.769 cv
301.811 134.289 301.271 134.549 300.611 134.549 cv
300.211 134.549 299.861 134.469 299.571 134.319 cv
299.281 134.169 299.041 133.929 298.861 133.599 cv
298.861 134.419 li
297.961 134.419 li
297.961 126.819 li
298.861 126.819 li
298.861 129.779 li
f
306.831 131.669 mo
306.101 131.669 305.601 131.759 305.321 131.919 cv
305.041 132.089 304.901 132.369 304.901 132.769 cv
304.901 133.089 305.001 133.349 305.211 133.529 cv
305.421 133.719 305.711 133.809 306.071 133.809 cv
306.571 133.809 306.971 133.639 307.271 133.279 cv
307.571 132.929 307.721 132.459 307.721 131.869 cv
307.721 131.669 li
306.831 131.669 li
308.621 131.299 mo
308.621 134.419 li
307.721 134.419 li
307.721 133.589 li
307.511 133.929 307.251 134.169 306.951 134.319 cv
306.651 134.469 306.271 134.549 305.831 134.549 cv
305.271 134.549 304.821 134.399 304.491 134.089 cv
304.161 133.779 304.001 133.359 304.001 132.829 cv
304.001 132.219 304.201 131.759 304.621 131.439 cv
305.031 131.129 305.641 130.969 306.461 130.969 cv
307.721 130.969 li
307.721 130.879 li
307.721 130.469 307.581 130.149 307.311 129.919 cv
307.041 129.699 306.661 129.579 306.171 129.579 cv
305.851 129.579 305.551 129.619 305.251 129.699 cv
304.951 129.779 304.671 129.889 304.401 130.029 cv
304.401 129.199 li
304.721 129.079 305.041 128.979 305.351 128.919 cv
305.661 128.859 305.961 128.819 306.261 128.819 cv
307.051 128.819 307.641 129.029 308.031 129.439 cv
308.421 129.849 308.621 130.469 308.621 131.299 cv
f
314.401 131.689 mo
314.401 131.029 314.261 130.519 313.991 130.139 cv
313.711 129.759 313.341 129.569 312.871 129.569 cv
312.391 129.569 312.021 129.759 311.751 130.139 cv
311.471 130.519 311.341 131.029 311.341 131.689 cv
311.341 132.349 311.471 132.869 311.751 133.249 cv
312.021 133.629 312.391 133.809 312.871 133.809 cv
313.341 133.809 313.711 133.629 313.991 133.249 cv
314.261 132.869 314.401 132.349 314.401 131.689 cv
311.341 129.779 mo
311.521 129.459 311.761 129.219 312.051 129.059 cv
312.341 128.899 312.691 128.819 313.091 128.819 cv
313.751 128.819 314.291 129.089 314.711 129.609 cv
315.121 130.139 315.331 130.829 315.331 131.689 cv
315.331 132.549 315.121 133.249 314.711 133.769 cv
314.291 134.289 313.751 134.549 313.091 134.549 cv
312.691 134.549 312.341 134.469 312.051 134.319 cv
311.761 134.169 311.521 133.929 311.341 133.599 cv
311.341 134.419 li
310.441 134.419 li
310.441 126.819 li
311.341 126.819 li
311.341 129.779 li
f
316.821 128.949 mo
317.721 128.949 li
317.721 134.419 li
316.821 134.419 li
316.821 128.949 li
316.821 126.819 mo
317.721 126.819 li
317.721 127.959 li
316.821 127.959 li
316.821 126.819 li
f
319.601 126.819 mo
320.501 126.819 li
320.501 134.419 li
319.601 134.419 li
319.601 126.819 li
f
322.381 128.949 mo
323.281 128.949 li
323.281 134.419 li
322.381 134.419 li
322.381 128.949 li
322.381 126.819 mo
323.281 126.819 li
323.281 127.959 li
322.381 127.959 li
322.381 126.819 li
f
326.051 127.399 mo
326.051 128.949 li
327.901 128.949 li
327.901 129.649 li
326.051 129.649 li
326.051 132.619 li
326.051 133.069 326.111 133.359 326.231 133.479 cv
326.351 133.609 326.601 133.669 326.981 133.669 cv
327.901 133.669 li
327.901 134.419 li
326.981 134.419 li
326.281 134.419 325.801 134.289 325.541 134.029 cv
325.281 133.769 325.151 133.299 325.151 132.619 cv
325.151 129.649 li
324.491 129.649 li
324.491 128.949 li
325.151 128.949 li
325.151 127.399 li
326.051 127.399 li
f
331.361 134.919 mo
331.101 135.559 330.851 135.989 330.611 136.189 cv
330.371 136.389 330.051 136.489 329.651 136.489 cv
328.931 136.489 li
328.931 135.739 li
329.461 135.739 li
329.701 135.739 329.891 135.679 330.031 135.559 cv
330.171 135.439 330.321 135.169 330.491 134.729 cv
330.651 134.329 li
328.441 128.949 li
329.391 128.949 li
331.101 133.229 li
332.811 128.949 li
333.761 128.949 li
331.361 134.919 li
f
286.741 27.1482 mo
286.741 25.1882 li
285.131 25.1882 li
285.131 24.3782 li
287.721 24.3782 li
287.721 27.5082 li
287.341 27.7882 286.921 27.9882 286.461 28.1182 cv
286.001 28.2482 285.511 28.3182 284.991 28.3182 cv
283.851 28.3182 282.951 27.9882 282.311 27.3282 cv
281.671 26.6682 281.351 25.7382 281.351 24.5482 cv
281.351 23.3682 281.671 22.4382 282.311 21.7682 cv
282.951 21.1082 283.851 20.7682 284.991 20.7682 cv
285.461 20.7682 285.911 20.8282 286.341 20.9482 cv
286.771 21.0682 287.171 21.2382 287.531 21.4582 cv
287.531 22.5082 li
287.161 22.2082 286.771 21.9782 286.361 21.8182 cv
285.951 21.6582 285.521 21.5782 285.071 21.5782 cv
284.171 21.5782 283.501 21.8282 283.061 22.3282 cv
282.611 22.8282 282.391 23.5682 282.391 24.5482 cv
282.391 25.5382 282.611 26.2782 283.061 26.7782 cv
283.501 27.2782 284.171 27.5182 285.071 27.5182 cv
285.411 27.5182 285.721 27.4882 286.001 27.4282 cv
286.281 27.3682 286.521 27.2782 286.741 27.1482 cv
f
292.651 23.5582 mo
292.551 23.4982 292.441 23.4582 292.321 23.4282 cv
292.201 23.4082 292.071 23.3882 291.931 23.3882 cv
291.421 23.3882 291.031 23.5582 290.761 23.8882 cv
290.481 24.2182 290.351 24.6882 290.351 25.3082 cv
290.351 28.1882 li
289.451 28.1882 li
289.451 22.7182 li
290.351 22.7182 li
290.351 23.5682 li
290.531 23.2382 290.781 22.9882 291.081 22.8282 cv
291.381 22.6682 291.751 22.5882 292.191 22.5882 cv
292.401 22.5982 li
292.471 22.6082 292.551 22.6182 292.651 22.6382 cv
292.651 23.5582 li
f
298.271 25.2282 mo
298.271 25.6682 li
294.141 25.6682 li
294.181 26.2882 294.361 26.7682 294.701 27.0882 cv
295.031 27.4082 295.491 27.5682 296.091 27.5682 cv
296.431 27.5682 296.771 27.5282 297.091 27.4482 cv
297.411 27.3682 297.741 27.2382 298.061 27.0582 cv
298.061 27.9082 li
297.741 28.0482 297.411 28.1582 297.071 28.2182 cv
296.731 28.2782 296.381 28.3182 296.041 28.3182 cv
295.161 28.3182 294.471 28.0682 293.961 27.5682 cv
293.451 27.0682 293.201 26.3782 293.201 25.5082 cv
293.201 24.6182 293.441 23.9082 293.921 23.3782 cv
294.401 22.8582 295.061 22.5882 295.881 22.5882 cv
296.621 22.5882 297.201 22.8282 297.631 23.2982 cv
298.051 23.7782 298.271 24.4182 298.271 25.2282 cv
297.371 24.9682 mo
297.361 24.4782 297.221 24.0882 296.961 23.7882 cv
296.691 23.4982 296.331 23.3482 295.891 23.3482 cv
295.391 23.3482 294.991 23.4982 294.691 23.7782 cv
294.391 24.0582 294.211 24.4582 294.171 24.9682 cv
297.371 24.9682 li
f
302.231 25.4382 mo
301.501 25.4382 301.001 25.5282 300.721 25.6882 cv
300.441 25.8582 300.301 26.1382 300.301 26.5382 cv
300.301 26.8582 300.401 27.1182 300.611 27.2982 cv
300.821 27.4882 301.111 27.5782 301.471 27.5782 cv
301.971 27.5782 302.371 27.4082 302.671 27.0482 cv
302.971 26.6982 303.121 26.2282 303.121 25.6382 cv
303.121 25.4382 li
302.231 25.4382 li
304.021 25.0682 mo
304.021 28.1882 li
303.121 28.1882 li
303.121 27.3582 li
302.911 27.6982 302.651 27.9382 302.351 28.0882 cv
302.051 28.2382 301.671 28.3182 301.231 28.3182 cv
300.671 28.3182 300.221 28.1682 299.891 27.8582 cv
299.561 27.5482 299.401 27.1282 299.401 26.5982 cv
299.401 25.9882 299.601 25.5282 300.021 25.2082 cv
300.431 24.8982 301.041 24.7382 301.861 24.7382 cv
303.121 24.7382 li
303.121 24.6482 li
303.121 24.2382 302.981 23.9182 302.711 23.6882 cv
302.441 23.4682 302.061 23.3482 301.571 23.3482 cv
301.251 23.3482 300.951 23.3882 300.651 23.4682 cv
300.351 23.5482 300.071 23.6582 299.801 23.7982 cv
299.801 22.9682 li
300.121 22.8482 300.441 22.7482 300.751 22.6882 cv
301.061 22.6282 301.361 22.5882 301.661 22.5882 cv
302.451 22.5882 303.041 22.7982 303.431 23.2082 cv
303.821 23.6182 304.021 24.2382 304.021 25.0682 cv
f
306.761 21.1682 mo
306.761 22.7182 li
308.611 22.7182 li
308.611 23.4182 li
306.761 23.4182 li
306.761 26.3882 li
306.761 26.8382 306.822 27.1282 306.941 27.2482 cv
307.061 27.3782 307.311 27.4382 307.691 27.4382 cv
308.611 27.4382 li
308.611 28.1882 li
307.691 28.1882 li
306.991 28.1882 306.511 28.0582 306.251 27.7982 cv
305.991 27.5382 305.861 27.0682 305.861 26.3882 cv
305.861 23.4182 li
305.201 23.4182 li
305.201 22.7182 li
305.861 22.7182 li
305.861 21.1682 li
306.761 21.1682 li
f
314.471 25.2282 mo
314.471 25.6682 li
310.341 25.6682 li
310.381 26.2882 310.561 26.7682 310.901 27.0882 cv
311.231 27.4082 311.691 27.5682 312.291 27.5682 cv
312.631 27.5682 312.971 27.5282 313.291 27.4482 cv
313.611 27.3682 313.941 27.2382 314.261 27.0582 cv
314.261 27.9082 li
313.941 28.0482 313.611 28.1582 313.271 28.2182 cv
312.931 28.2782 312.581 28.3182 312.241 28.3182 cv
311.361 28.3182 310.671 28.0682 310.161 27.5682 cv
309.651 27.0682 309.401 26.3782 309.401 25.5082 cv
309.401 24.6182 309.641 23.9082 310.121 23.3782 cv
310.601 22.8582 311.261 22.5882 312.081 22.5882 cv
312.821 22.5882 313.401 22.8282 313.831 23.2982 cv
314.251 23.7782 314.471 24.4182 314.471 25.2282 cv
313.571 24.9682 mo
313.561 24.4782 313.421 24.0882 313.161 23.7882 cv
312.891 23.4982 312.531 23.3482 312.091 23.3482 cv
311.591 23.3482 311.191 23.4982 310.891 23.7782 cv
310.591 24.0582 310.411 24.4582 310.371 24.9682 cv
313.571 24.9682 li
f
319.432 22.8782 mo
319.432 23.7282 li
319.172 23.6082 318.912 23.5082 318.642 23.4382 cv
318.362 23.3782 318.082 23.3382 317.792 23.3382 cv
317.342 23.3382 317.002 23.4082 316.782 23.5482 cv
316.562 23.6882 316.452 23.8882 316.452 24.1582 cv
316.452 24.3682 316.532 24.5282 316.692 24.6482 cv
316.852 24.7682 317.172 24.8882 317.652 24.9882 cv
317.962 25.0582 li
318.602 25.1982 319.052 25.3982 319.322 25.6382 cv
319.582 25.8882 319.722 26.2382 319.722 26.6782 cv
319.722 27.1882 319.522 27.5882 319.122 27.8782 cv
318.722 28.1782 318.162 28.3182 317.462 28.3182 cv
317.162 28.3182 316.862 28.2882 316.542 28.2382 cv
316.222 28.1882 315.892 28.1082 315.542 27.9882 cv
315.542 27.0582 li
315.872 27.2382 316.202 27.3682 316.522 27.4482 cv
316.842 27.5382 317.162 27.5782 317.482 27.5782 cv
317.902 27.5782 318.232 27.5082 318.462 27.3682 cv
318.682 27.2282 318.802 27.0182 318.802 26.7482 cv
318.802 26.5082 318.712 26.3182 318.552 26.1882 cv
318.392 26.0582 318.032 25.9282 317.472 25.8082 cv
317.162 25.7382 li
316.602 25.6182 316.192 25.4382 315.952 25.1982 cv
315.702 24.9582 315.582 24.6282 315.582 24.1982 cv
315.582 23.6882 315.762 23.2882 316.122 23.0082 cv
316.482 22.7282 317.002 22.5882 317.682 22.5882 cv
318.012 22.5882 318.322 22.6182 318.622 22.6682 cv
318.912 22.7182 319.182 22.7882 319.432 22.8782 cv
f
322.041 21.1682 mo
322.041 22.7182 li
323.891 22.7182 li
323.891 23.4182 li
322.041 23.4182 li
322.041 26.3882 li
322.041 26.8382 322.102 27.1282 322.221 27.2482 cv
322.341 27.3782 322.591 27.4382 322.971 27.4382 cv
323.891 27.4382 li
323.891 28.1882 li
322.971 28.1882 li
322.271 28.1882 321.791 28.0582 321.531 27.7982 cv
321.271 27.5382 321.141 27.0682 321.141 26.3882 cv
321.141 23.4182 li
320.481 23.4182 li
320.481 22.7182 li
321.141 22.7182 li
321.141 21.1682 li
322.041 21.1682 li
f
282.761 32.8988 mo
282.761 35.6388 li
284.001 35.6388 li
284.461 35.6388 284.811 35.5288 285.061 35.2888 cv
285.311 35.0488 285.441 34.7088 285.441 34.2688 cv
285.441 33.8288 285.311 33.4988 285.061 33.2588 cv
284.811 33.0188 284.461 32.8988 284.001 32.8988 cv
282.761 32.8988 li
281.771 32.0888 mo
284.001 32.0888 li
284.811 32.0888 285.431 32.2788 285.851 32.6488 cv
286.271 33.0188 286.481 33.5588 286.481 34.2688 cv
286.481 34.9888 286.271 35.5388 285.851 35.8988 cv
285.431 36.2688 284.811 36.4488 284.001 36.4488 cv
282.761 36.4488 li
282.761 39.3788 li
281.771 39.3788 li
281.771 32.0888 li
f
290.931 34.7488 mo
290.831 34.6888 290.721 34.6488 290.601 34.6188 cv
290.481 34.5988 290.351 34.5788 290.211 34.5788 cv
289.701 34.5788 289.311 34.7488 289.041 35.0788 cv
288.761 35.4088 288.631 35.8788 288.631 36.4988 cv
288.631 39.3788 li
287.731 39.3788 li
287.731 33.9088 li
288.631 33.9088 li
288.631 34.7588 li
288.811 34.4288 289.061 34.1788 289.361 34.0188 cv
289.661 33.8588 290.031 33.7788 290.471 33.7788 cv
290.681 33.7888 li
290.751 33.7988 290.831 33.8088 290.931 33.8288 cv
290.931 34.7488 li
f
293.991 34.5388 mo
293.511 34.5388 293.131 34.7288 292.851 35.1088 cv
292.571 35.4888 292.431 35.9988 292.431 36.6488 cv
292.431 37.3088 292.561 37.8188 292.841 38.1988 cv
293.121 38.5788 293.501 38.7588 293.991 38.7588 cv
294.471 38.7588 294.851 38.5788 295.131 38.1988 cv
295.411 37.8188 295.551 37.3088 295.551 36.6488 cv
295.551 36.0088 295.411 35.4888 295.131 35.1088 cv
294.851 34.7288 294.471 34.5388 293.991 34.5388 cv
293.991 33.7788 mo
294.771 33.7788 295.381 34.0388 295.831 34.5388 cv
296.271 35.0488 296.501 35.7488 296.501 36.6488 cv
296.501 37.5488 296.271 38.2488 295.831 38.7488 cv
295.381 39.2588 294.771 39.5088 293.991 39.5088 cv
293.201 39.5088 292.581 39.2588 292.141 38.7488 cv
291.701 38.2488 291.481 37.5488 291.481 36.6488 cv
291.481 35.7488 291.701 35.0488 292.141 34.5388 cv
292.581 34.0388 293.201 33.7788 293.991 33.7788 cv
f
301.921 36.6488 mo
301.921 35.9888 301.781 35.4788 301.511 35.0988 cv
301.231 34.7188 300.861 34.5288 300.391 34.5288 cv
299.911 34.5288 299.541 34.7188 299.271 35.0988 cv
298.991 35.4788 298.861 35.9888 298.861 36.6488 cv
298.861 37.3088 298.991 37.8288 299.271 38.2088 cv
299.541 38.5888 299.911 38.7688 300.391 38.7688 cv
300.861 38.7688 301.231 38.5888 301.511 38.2088 cv
301.781 37.8288 301.921 37.3088 301.921 36.6488 cv
298.861 34.7388 mo
299.041 34.4188 299.281 34.1788 299.571 34.0188 cv
299.861 33.8588 300.211 33.7788 300.611 33.7788 cv
301.271 33.7788 301.811 34.0488 302.231 34.5688 cv
302.641 35.0988 302.851 35.7888 302.851 36.6488 cv
302.851 37.5088 302.641 38.2088 302.231 38.7288 cv
301.811 39.2488 301.271 39.5088 300.611 39.5088 cv
300.211 39.5088 299.861 39.4288 299.571 39.2788 cv
299.281 39.1288 299.041 38.8888 298.861 38.5588 cv
298.861 39.3788 li
297.961 39.3788 li
297.961 31.7788 li
298.861 31.7788 li
298.861 34.7388 li
f
306.831 36.6288 mo
306.101 36.6288 305.601 36.7188 305.321 36.8788 cv
305.041 37.0488 304.901 37.3288 304.901 37.7288 cv
304.901 38.0488 305.001 38.3088 305.211 38.4888 cv
305.421 38.6788 305.711 38.7688 306.071 38.7688 cv
306.571 38.7688 306.971 38.5988 307.271 38.2388 cv
307.571 37.8888 307.721 37.4188 307.721 36.8288 cv
307.721 36.6288 li
306.831 36.6288 li
308.621 36.2588 mo
308.621 39.3788 li
307.721 39.3788 li
307.721 38.5488 li
307.511 38.8888 307.251 39.1288 306.951 39.2788 cv
306.651 39.4288 306.271 39.5088 305.831 39.5088 cv
305.271 39.5088 304.821 39.3588 304.491 39.0488 cv
304.161 38.7388 304.001 38.3188 304.001 37.7888 cv
304.001 37.1788 304.201 36.7188 304.621 36.3988 cv
305.031 36.0888 305.641 35.9288 306.461 35.9288 cv
307.721 35.9288 li
307.721 35.8388 li
307.721 35.4288 307.581 35.1088 307.311 34.8788 cv
307.041 34.6588 306.661 34.5388 306.171 34.5388 cv
305.851 34.5388 305.551 34.5788 305.251 34.6588 cv
304.951 34.7388 304.671 34.8488 304.401 34.9888 cv
304.401 34.1588 li
304.721 34.0388 305.041 33.9388 305.351 33.8788 cv
305.661 33.8188 305.961 33.7788 306.261 33.7788 cv
307.051 33.7788 307.641 33.9888 308.031 34.3988 cv
308.421 34.8088 308.621 35.4288 308.621 36.2588 cv
f
314.401 36.6488 mo
314.401 35.9888 314.261 35.4788 313.991 35.0988 cv
313.711 34.7188 313.341 34.5288 312.871 34.5288 cv
312.391 34.5288 312.021 34.7188 311.751 35.0988 cv
311.471 35.4788 311.341 35.9888 311.341 36.6488 cv
311.341 37.3088 311.471 37.8288 311.751 38.2088 cv
312.021 38.5888 312.391 38.7688 312.871 38.7688 cv
313.341 38.7688 313.711 38.5888 313.991 38.2088 cv
314.261 37.8288 314.401 37.3088 314.401 36.6488 cv
311.341 34.7388 mo
311.521 34.4188 311.761 34.1788 312.051 34.0188 cv
312.341 33.8588 312.691 33.7788 313.091 33.7788 cv
313.751 33.7788 314.291 34.0488 314.711 34.5688 cv
315.121 35.0988 315.331 35.7888 315.331 36.6488 cv
315.331 37.5088 315.121 38.2088 314.711 38.7288 cv
314.291 39.2488 313.751 39.5088 313.091 39.5088 cv
312.691 39.5088 312.341 39.4288 312.051 39.2788 cv
311.761 39.1288 311.521 38.8888 311.341 38.5588 cv
311.341 39.3788 li
310.441 39.3788 li
310.441 31.7788 li
311.341 31.7788 li
311.341 34.7388 li
f
316.821 33.9088 mo
317.721 33.9088 li
317.721 39.3788 li
316.821 39.3788 li
316.821 33.9088 li
316.821 31.7788 mo
317.721 31.7788 li
317.721 32.9188 li
316.821 32.9188 li
316.821 31.7788 li
f
319.601 31.7788 mo
320.501 31.7788 li
320.501 39.3788 li
319.601 39.3788 li
319.601 31.7788 li
f
322.381 33.9088 mo
323.281 33.9088 li
323.281 39.3788 li
322.381 39.3788 li
322.381 33.9088 li
322.381 31.7788 mo
323.281 31.7788 li
323.281 32.9188 li
322.381 32.9188 li
322.381 31.7788 li
f
326.051 32.3588 mo
326.051 33.9088 li
327.901 33.9088 li
327.901 34.6088 li
326.051 34.6088 li
326.051 37.5788 li
326.051 38.0288 326.111 38.3188 326.231 38.4388 cv
326.351 38.5688 326.601 38.6288 326.981 38.6288 cv
327.901 38.6288 li
327.901 39.3788 li
326.981 39.3788 li
326.281 39.3788 325.801 39.2488 325.541 38.9888 cv
325.281 38.7288 325.151 38.2588 325.151 37.5788 cv
325.151 34.6088 li
324.491 34.6088 li
324.491 33.9088 li
325.151 33.9088 li
325.151 32.3588 li
326.051 32.3588 li
f
331.361 39.8788 mo
331.101 40.5188 330.851 40.9488 330.611 41.1488 cv
330.371 41.3488 330.051 41.4488 329.651 41.4488 cv
328.931 41.4488 li
328.931 40.6988 li
329.461 40.6988 li
329.701 40.6988 329.891 40.6388 330.031 40.5188 cv
330.171 40.3988 330.321 40.1288 330.491 39.6888 cv
330.651 39.2888 li
328.441 33.9088 li
329.391 33.9088 li
331.101 38.1888 li
332.811 33.9088 li
333.761 33.9088 li
331.361 39.8788 li
f
0 lc
266.491 125.027 mo
266.491 124.655 li
266.491 30.3579 li
266.491 29.9866 li
277.291 29.9866 li
277.291 30.3579 li
277.291 124.655 li
277.291 125.027 li
cp
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
